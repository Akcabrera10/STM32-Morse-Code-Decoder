
LAST_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08005fa0  08005fa0  00015fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800617c  0800617c  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800617c  0800617c  0001617c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006184  08006184  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006184  08006184  00016184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006188  08006188  00016188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0800618c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049ec  200000dc  08006268  000200dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ac8  08006268  00024ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001287f  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b26  00000000  00000000  0003298b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  000354b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  000363c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041fd  00000000  00000000  000371d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010557  00000000  00000000  0003b3cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091517  00000000  00000000  0004b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dce3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044ac  00000000  00000000  000dce8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000dc 	.word	0x200000dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005f88 	.word	0x08005f88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000e0 	.word	0x200000e0
 80001dc:	08005f88 	.word	0x08005f88

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295
 8000204:	f04f 30ff 	movne.w	r0, #4294967295
 8000208:	f000 b974 	b.w	80004f4 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	4604      	mov	r4, r0
 800022c:	468e      	mov	lr, r1
 800022e:	2b00      	cmp	r3, #0
 8000230:	d14d      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000232:	428a      	cmp	r2, r1
 8000234:	4694      	mov	ip, r2
 8000236:	d969      	bls.n	800030c <__udivmoddi4+0xe8>
 8000238:	fab2 f282 	clz	r2, r2
 800023c:	b152      	cbz	r2, 8000254 <__udivmoddi4+0x30>
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	f1c2 0120 	rsb	r1, r2, #32
 8000246:	fa20 f101 	lsr.w	r1, r0, r1
 800024a:	fa0c fc02 	lsl.w	ip, ip, r2
 800024e:	ea41 0e03 	orr.w	lr, r1, r3
 8000252:	4094      	lsls	r4, r2
 8000254:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000258:	0c21      	lsrs	r1, r4, #16
 800025a:	fbbe f6f8 	udiv	r6, lr, r8
 800025e:	fa1f f78c 	uxth.w	r7, ip
 8000262:	fb08 e316 	mls	r3, r8, r6, lr
 8000266:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026a:	fb06 f107 	mul.w	r1, r6, r7
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f106 30ff 	add.w	r0, r6, #4294967295
 800027a:	f080 811f 	bcs.w	80004bc <__udivmoddi4+0x298>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 811c 	bls.w	80004bc <__udivmoddi4+0x298>
 8000284:	3e02      	subs	r6, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a5b      	subs	r3, r3, r1
 800028a:	b2a4      	uxth	r4, r4
 800028c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000290:	fb08 3310 	mls	r3, r8, r0, r3
 8000294:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000298:	fb00 f707 	mul.w	r7, r0, r7
 800029c:	42a7      	cmp	r7, r4
 800029e:	d90a      	bls.n	80002b6 <__udivmoddi4+0x92>
 80002a0:	eb1c 0404 	adds.w	r4, ip, r4
 80002a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a8:	f080 810a 	bcs.w	80004c0 <__udivmoddi4+0x29c>
 80002ac:	42a7      	cmp	r7, r4
 80002ae:	f240 8107 	bls.w	80004c0 <__udivmoddi4+0x29c>
 80002b2:	4464      	add	r4, ip
 80002b4:	3802      	subs	r0, #2
 80002b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ba:	1be4      	subs	r4, r4, r7
 80002bc:	2600      	movs	r6, #0
 80002be:	b11d      	cbz	r5, 80002c8 <__udivmoddi4+0xa4>
 80002c0:	40d4      	lsrs	r4, r2
 80002c2:	2300      	movs	r3, #0
 80002c4:	e9c5 4300 	strd	r4, r3, [r5]
 80002c8:	4631      	mov	r1, r6
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0xc2>
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	f000 80ef 	beq.w	80004b6 <__udivmoddi4+0x292>
 80002d8:	2600      	movs	r6, #0
 80002da:	e9c5 0100 	strd	r0, r1, [r5]
 80002de:	4630      	mov	r0, r6
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	fab3 f683 	clz	r6, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d14a      	bne.n	8000384 <__udivmoddi4+0x160>
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d302      	bcc.n	80002f8 <__udivmoddi4+0xd4>
 80002f2:	4282      	cmp	r2, r0
 80002f4:	f200 80f9 	bhi.w	80004ea <__udivmoddi4+0x2c6>
 80002f8:	1a84      	subs	r4, r0, r2
 80002fa:	eb61 0303 	sbc.w	r3, r1, r3
 80002fe:	2001      	movs	r0, #1
 8000300:	469e      	mov	lr, r3
 8000302:	2d00      	cmp	r5, #0
 8000304:	d0e0      	beq.n	80002c8 <__udivmoddi4+0xa4>
 8000306:	e9c5 4e00 	strd	r4, lr, [r5]
 800030a:	e7dd      	b.n	80002c8 <__udivmoddi4+0xa4>
 800030c:	b902      	cbnz	r2, 8000310 <__udivmoddi4+0xec>
 800030e:	deff      	udf	#255	; 0xff
 8000310:	fab2 f282 	clz	r2, r2
 8000314:	2a00      	cmp	r2, #0
 8000316:	f040 8092 	bne.w	800043e <__udivmoddi4+0x21a>
 800031a:	eba1 010c 	sub.w	r1, r1, ip
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f fe8c 	uxth.w	lr, ip
 8000326:	2601      	movs	r6, #1
 8000328:	0c20      	lsrs	r0, r4, #16
 800032a:	fbb1 f3f7 	udiv	r3, r1, r7
 800032e:	fb07 1113 	mls	r1, r7, r3, r1
 8000332:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000336:	fb0e f003 	mul.w	r0, lr, r3
 800033a:	4288      	cmp	r0, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x12c>
 800033e:	eb1c 0101 	adds.w	r1, ip, r1
 8000342:	f103 38ff 	add.w	r8, r3, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x12a>
 8000348:	4288      	cmp	r0, r1
 800034a:	f200 80cb 	bhi.w	80004e4 <__udivmoddi4+0x2c0>
 800034e:	4643      	mov	r3, r8
 8000350:	1a09      	subs	r1, r1, r0
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb1 f0f7 	udiv	r0, r1, r7
 8000358:	fb07 1110 	mls	r1, r7, r0, r1
 800035c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000360:	fb0e fe00 	mul.w	lr, lr, r0
 8000364:	45a6      	cmp	lr, r4
 8000366:	d908      	bls.n	800037a <__udivmoddi4+0x156>
 8000368:	eb1c 0404 	adds.w	r4, ip, r4
 800036c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x154>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f200 80bb 	bhi.w	80004ee <__udivmoddi4+0x2ca>
 8000378:	4608      	mov	r0, r1
 800037a:	eba4 040e 	sub.w	r4, r4, lr
 800037e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000382:	e79c      	b.n	80002be <__udivmoddi4+0x9a>
 8000384:	f1c6 0720 	rsb	r7, r6, #32
 8000388:	40b3      	lsls	r3, r6
 800038a:	fa22 fc07 	lsr.w	ip, r2, r7
 800038e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000392:	fa20 f407 	lsr.w	r4, r0, r7
 8000396:	fa01 f306 	lsl.w	r3, r1, r6
 800039a:	431c      	orrs	r4, r3
 800039c:	40f9      	lsrs	r1, r7
 800039e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a2:	fa00 f306 	lsl.w	r3, r0, r6
 80003a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003aa:	0c20      	lsrs	r0, r4, #16
 80003ac:	fa1f fe8c 	uxth.w	lr, ip
 80003b0:	fb09 1118 	mls	r1, r9, r8, r1
 80003b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b8:	fb08 f00e 	mul.w	r0, r8, lr
 80003bc:	4288      	cmp	r0, r1
 80003be:	fa02 f206 	lsl.w	r2, r2, r6
 80003c2:	d90b      	bls.n	80003dc <__udivmoddi4+0x1b8>
 80003c4:	eb1c 0101 	adds.w	r1, ip, r1
 80003c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003cc:	f080 8088 	bcs.w	80004e0 <__udivmoddi4+0x2bc>
 80003d0:	4288      	cmp	r0, r1
 80003d2:	f240 8085 	bls.w	80004e0 <__udivmoddi4+0x2bc>
 80003d6:	f1a8 0802 	sub.w	r8, r8, #2
 80003da:	4461      	add	r1, ip
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e4:	fb09 1110 	mls	r1, r9, r0, r1
 80003e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f0:	458e      	cmp	lr, r1
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1e2>
 80003f4:	eb1c 0101 	adds.w	r1, ip, r1
 80003f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fc:	d26c      	bcs.n	80004d8 <__udivmoddi4+0x2b4>
 80003fe:	458e      	cmp	lr, r1
 8000400:	d96a      	bls.n	80004d8 <__udivmoddi4+0x2b4>
 8000402:	3802      	subs	r0, #2
 8000404:	4461      	add	r1, ip
 8000406:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040a:	fba0 9402 	umull	r9, r4, r0, r2
 800040e:	eba1 010e 	sub.w	r1, r1, lr
 8000412:	42a1      	cmp	r1, r4
 8000414:	46c8      	mov	r8, r9
 8000416:	46a6      	mov	lr, r4
 8000418:	d356      	bcc.n	80004c8 <__udivmoddi4+0x2a4>
 800041a:	d053      	beq.n	80004c4 <__udivmoddi4+0x2a0>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x212>
 800041e:	ebb3 0208 	subs.w	r2, r3, r8
 8000422:	eb61 010e 	sbc.w	r1, r1, lr
 8000426:	fa01 f707 	lsl.w	r7, r1, r7
 800042a:	fa22 f306 	lsr.w	r3, r2, r6
 800042e:	40f1      	lsrs	r1, r6
 8000430:	431f      	orrs	r7, r3
 8000432:	e9c5 7100 	strd	r7, r1, [r5]
 8000436:	2600      	movs	r6, #0
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	f1c2 0320 	rsb	r3, r2, #32
 8000442:	40d8      	lsrs	r0, r3
 8000444:	fa0c fc02 	lsl.w	ip, ip, r2
 8000448:	fa21 f303 	lsr.w	r3, r1, r3
 800044c:	4091      	lsls	r1, r2
 800044e:	4301      	orrs	r1, r0
 8000450:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000454:	fa1f fe8c 	uxth.w	lr, ip
 8000458:	fbb3 f0f7 	udiv	r0, r3, r7
 800045c:	fb07 3610 	mls	r6, r7, r0, r3
 8000460:	0c0b      	lsrs	r3, r1, #16
 8000462:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000466:	fb00 f60e 	mul.w	r6, r0, lr
 800046a:	429e      	cmp	r6, r3
 800046c:	fa04 f402 	lsl.w	r4, r4, r2
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x260>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 38ff 	add.w	r8, r0, #4294967295
 800047a:	d22f      	bcs.n	80004dc <__udivmoddi4+0x2b8>
 800047c:	429e      	cmp	r6, r3
 800047e:	d92d      	bls.n	80004dc <__udivmoddi4+0x2b8>
 8000480:	3802      	subs	r0, #2
 8000482:	4463      	add	r3, ip
 8000484:	1b9b      	subs	r3, r3, r6
 8000486:	b289      	uxth	r1, r1
 8000488:	fbb3 f6f7 	udiv	r6, r3, r7
 800048c:	fb07 3316 	mls	r3, r7, r6, r3
 8000490:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000494:	fb06 f30e 	mul.w	r3, r6, lr
 8000498:	428b      	cmp	r3, r1
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x28a>
 800049c:	eb1c 0101 	adds.w	r1, ip, r1
 80004a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a4:	d216      	bcs.n	80004d4 <__udivmoddi4+0x2b0>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d914      	bls.n	80004d4 <__udivmoddi4+0x2b0>
 80004aa:	3e02      	subs	r6, #2
 80004ac:	4461      	add	r1, ip
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b4:	e738      	b.n	8000328 <__udivmoddi4+0x104>
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e705      	b.n	80002c8 <__udivmoddi4+0xa4>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e3      	b.n	8000288 <__udivmoddi4+0x64>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6f8      	b.n	80002b6 <__udivmoddi4+0x92>
 80004c4:	454b      	cmp	r3, r9
 80004c6:	d2a9      	bcs.n	800041c <__udivmoddi4+0x1f8>
 80004c8:	ebb9 0802 	subs.w	r8, r9, r2
 80004cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7a3      	b.n	800041c <__udivmoddi4+0x1f8>
 80004d4:	4646      	mov	r6, r8
 80004d6:	e7ea      	b.n	80004ae <__udivmoddi4+0x28a>
 80004d8:	4620      	mov	r0, r4
 80004da:	e794      	b.n	8000406 <__udivmoddi4+0x1e2>
 80004dc:	4640      	mov	r0, r8
 80004de:	e7d1      	b.n	8000484 <__udivmoddi4+0x260>
 80004e0:	46d0      	mov	r8, sl
 80004e2:	e77b      	b.n	80003dc <__udivmoddi4+0x1b8>
 80004e4:	3b02      	subs	r3, #2
 80004e6:	4461      	add	r1, ip
 80004e8:	e732      	b.n	8000350 <__udivmoddi4+0x12c>
 80004ea:	4630      	mov	r0, r6
 80004ec:	e709      	b.n	8000302 <__udivmoddi4+0xde>
 80004ee:	4464      	add	r4, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e742      	b.n	800037a <__udivmoddi4+0x156>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <_write>:
QueueHandle_t xQueue2_2;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	b29a      	uxth	r2, r3
 8000508:	f04f 33ff 	mov.w	r3, #4294967295
 800050c:	68b9      	ldr	r1, [r7, #8]
 800050e:	4804      	ldr	r0, [pc, #16]	; (8000520 <_write+0x28>)
 8000510:	f001 fcbf 	bl	8001e92 <HAL_UART_Transmit>
    return len;
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	3710      	adds	r7, #16
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	200000fc 	.word	0x200000fc

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fc70 	bl	8000e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f86e 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8fe 	bl	8000730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000534:	f000 f8d2 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start UART reception */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000538:	f002 f854 	bl	80025e4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */
  // Create the semaphore with an initial count of 0
   xSemaphore = xSemaphoreCreateCounting(1, 0);
 800053c:	2100      	movs	r1, #0
 800053e:	2001      	movs	r0, #1
 8000540:	f002 fb51 	bl	8002be6 <xQueueCreateCountingSemaphore>
 8000544:	4603      	mov	r3, r0
 8000546:	4a21      	ldr	r2, [pc, #132]	; (80005cc <main+0xa8>)
 8000548:	6013      	str	r3, [r2, #0]

   // Check if semaphore creation was successful
   if (xSemaphore == NULL) {
 800054a:	4b20      	ldr	r3, [pc, #128]	; (80005cc <main+0xa8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d100      	bne.n	8000554 <main+0x30>
       // Handle semaphore creation error
       while (1);
 8000552:	e7fe      	b.n	8000552 <main+0x2e>
   }


  /* USER CODE BEGIN RTOS_QUEUES */
  // Create the queues
  xQueue1 = xQueueCreate(QUEUE_1_SIZE, sizeof(char));
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	200f      	movs	r0, #15
 800055a:	f002 fae7 	bl	8002b2c <xQueueGenericCreate>
 800055e:	4603      	mov	r3, r0
 8000560:	4a1b      	ldr	r2, [pc, #108]	; (80005d0 <main+0xac>)
 8000562:	6013      	str	r3, [r2, #0]
  xQueue2_1 = xQueueCreate(QUEUE_2_1_SIZE, sizeof(char));
 8000564:	2200      	movs	r2, #0
 8000566:	2101      	movs	r1, #1
 8000568:	200f      	movs	r0, #15
 800056a:	f002 fadf 	bl	8002b2c <xQueueGenericCreate>
 800056e:	4603      	mov	r3, r0
 8000570:	4a18      	ldr	r2, [pc, #96]	; (80005d4 <main+0xb0>)
 8000572:	6013      	str	r3, [r2, #0]
  xQueue2_2 = xQueueCreate(15, sizeof(char));
 8000574:	2200      	movs	r2, #0
 8000576:	2101      	movs	r1, #1
 8000578:	200f      	movs	r0, #15
 800057a:	f002 fad7 	bl	8002b2c <xQueueGenericCreate>
 800057e:	4603      	mov	r3, r0
 8000580:	4a15      	ldr	r2, [pc, #84]	; (80005d8 <main+0xb4>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask01, NULL, &Task1_attributes);
 8000584:	4a15      	ldr	r2, [pc, #84]	; (80005dc <main+0xb8>)
 8000586:	2100      	movs	r1, #0
 8000588:	4815      	ldr	r0, [pc, #84]	; (80005e0 <main+0xbc>)
 800058a:	f002 f875 	bl	8002678 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a14      	ldr	r2, [pc, #80]	; (80005e4 <main+0xc0>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask02, NULL, &Task2_attributes);
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <main+0xc4>)
 8000596:	2100      	movs	r1, #0
 8000598:	4814      	ldr	r0, [pc, #80]	; (80005ec <main+0xc8>)
 800059a:	f002 f86d 	bl	8002678 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <main+0xcc>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask03, NULL, &Task3_attributes);
 80005a4:	4a13      	ldr	r2, [pc, #76]	; (80005f4 <main+0xd0>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	4813      	ldr	r0, [pc, #76]	; (80005f8 <main+0xd4>)
 80005aa:	f002 f865 	bl	8002678 <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a12      	ldr	r2, [pc, #72]	; (80005fc <main+0xd8>)
 80005b2:	6013      	str	r3, [r2, #0]
  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask04, NULL, &Task4_attributes);
 80005b4:	4a12      	ldr	r2, [pc, #72]	; (8000600 <main+0xdc>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <main+0xe0>)
 80005ba:	f002 f85d 	bl	8002678 <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a11      	ldr	r2, [pc, #68]	; (8000608 <main+0xe4>)
 80005c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c4:	f002 f832 	bl	800262c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c8:	e7fe      	b.n	80005c8 <main+0xa4>
 80005ca:	bf00      	nop
 80005cc:	20000150 	.word	0x20000150
 80005d0:	20000154 	.word	0x20000154
 80005d4:	20000158 	.word	0x20000158
 80005d8:	2000015c 	.word	0x2000015c
 80005dc:	08006070 	.word	0x08006070
 80005e0:	080007fd 	.word	0x080007fd
 80005e4:	20000140 	.word	0x20000140
 80005e8:	08006094 	.word	0x08006094
 80005ec:	080008d5 	.word	0x080008d5
 80005f0:	20000144 	.word	0x20000144
 80005f4:	080060b8 	.word	0x080060b8
 80005f8:	08000975 	.word	0x08000975
 80005fc:	20000148 	.word	0x20000148
 8000600:	080060dc 	.word	0x080060dc
 8000604:	08000a21 	.word	0x08000a21
 8000608:	2000014c 	.word	0x2000014c

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b094      	sub	sp, #80	; 0x50
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 0320 	add.w	r3, r7, #32
 8000616:	2230      	movs	r2, #48	; 0x30
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f004 ffc6 	bl	80055ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	4b27      	ldr	r3, [pc, #156]	; (80006d4 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	4a26      	ldr	r2, [pc, #152]	; (80006d4 <SystemClock_Config+0xc8>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	; 0x40
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <SystemClock_Config+0xc8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a20      	ldr	r2, [pc, #128]	; (80006d8 <SystemClock_Config+0xcc>)
 8000656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800065a:	6013      	str	r3, [r2, #0]
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemClock_Config+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	2301      	movs	r3, #1
 800066e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2310      	movs	r3, #16
 8000672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2300      	movs	r3, #0
 800067a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800067c:	2308      	movs	r3, #8
 800067e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000680:	23c0      	movs	r3, #192	; 0xc0
 8000682:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000684:	2304      	movs	r3, #4
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000688:	2308      	movs	r3, #8
 800068a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0320 	add.w	r3, r7, #32
 8000690:	4618      	mov	r0, r3
 8000692:	f000 ff19 	bl	80014c8 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800069c:	f000 fa3e 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	2103      	movs	r1, #3
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 f97b 	bl	80019b8 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006c8:	f000 fa28 	bl	8000b1c <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 fb70 	bl	8001df8 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f9fd 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000fc 	.word	0x200000fc
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b088      	sub	sp, #32
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b2a      	ldr	r3, [pc, #168]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a29      	ldr	r2, [pc, #164]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b27      	ldr	r3, [pc, #156]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <MX_GPIO_Init+0xc4>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	603b      	str	r3, [r7, #0]
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1b      	ldr	r2, [pc, #108]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b19      	ldr	r3, [pc, #100]	; (80007f4 <MX_GPIO_Init+0xc4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2130      	movs	r1, #48	; 0x30
 800079e:	4816      	ldr	r0, [pc, #88]	; (80007f8 <MX_GPIO_Init+0xc8>)
 80007a0:	f000 fe78 	bl	8001494 <HAL_GPIO_WritePin>


  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	480f      	ldr	r0, [pc, #60]	; (80007f8 <MX_GPIO_Init+0xc8>)
 80007ba:	f000 fccf 	bl	800115c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2105      	movs	r1, #5
 80007c2:	2006      	movs	r0, #6
 80007c4:	f000 fc93 	bl	80010ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c8:	2006      	movs	r0, #6
 80007ca:	f000 fcac 	bl	8001126 <HAL_NVIC_EnableIRQ>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ce:	2330      	movs	r3, #48	; 0x30
 80007d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d2:	2301      	movs	r3, #1
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007de:	f107 030c 	add.w	r3, r7, #12
 80007e2:	4619      	mov	r1, r3
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_GPIO_Init+0xc8>)
 80007e6:	f000 fcb9 	bl	800115c <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007ea:	bf00      	nop
 80007ec:	3720      	adds	r7, #32
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000

080007fc <StartTask01>:

/* USER CODE END 4 */

/* USER CODE END Header_StartTask01 */
/* Task 1: Read user input from button and enqueue dots and dashes to queue 1 */
void StartTask01(void *pvParameters) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
    uint32_t press = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
    uint32_t release = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
    uint32_t duration;
    qTemp qSend;
    bool spaceSent = false;
 800080c:	2300      	movs	r3, #0
 800080e:	77fb      	strb	r3, [r7, #31]
    char morseChar;

    for (;;) {
        /* Wait for button press on user button (PA0) */
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && ButtonState == 1) {
 8000810:	e002      	b.n	8000818 <StartTask01+0x1c>
        	HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f000 fb6c 	bl	8000ef0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && ButtonState == 1) {
 8000818:	2101      	movs	r1, #1
 800081a:	482b      	ldr	r0, [pc, #172]	; (80008c8 <StartTask01+0xcc>)
 800081c:	f000 fe22 	bl	8001464 <HAL_GPIO_ReadPin>
 8000820:	4603      	mov	r3, r0
 8000822:	2b01      	cmp	r3, #1
 8000824:	d104      	bne.n	8000830 <StartTask01+0x34>
 8000826:	4b29      	ldr	r3, [pc, #164]	; (80008cc <StartTask01+0xd0>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	b2db      	uxtb	r3, r3
 800082c:	2b01      	cmp	r3, #1
 800082e:	d0f0      	beq.n	8000812 <StartTask01+0x16>
        }

        /* Measure duration of button press */
        press = HAL_GetTick();
 8000830:	f000 fb52 	bl	8000ed8 <HAL_GetTick>
 8000834:	61b8      	str	r0, [r7, #24]
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000836:	e005      	b.n	8000844 <StartTask01+0x48>
        	HAL_Delay(10);
 8000838:	200a      	movs	r0, #10
 800083a:	f000 fb59 	bl	8000ef0 <HAL_Delay>
            ButtonState = 0;
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <StartTask01+0xd0>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET) {
 8000844:	2101      	movs	r1, #1
 8000846:	4820      	ldr	r0, [pc, #128]	; (80008c8 <StartTask01+0xcc>)
 8000848:	f000 fe0c 	bl	8001464 <HAL_GPIO_ReadPin>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f2      	beq.n	8000838 <StartTask01+0x3c>
        }
        release = HAL_GetTick();
 8000852:	f000 fb41 	bl	8000ed8 <HAL_GetTick>
 8000856:	6178      	str	r0, [r7, #20]
        duration = release - press;
 8000858:	697a      	ldr	r2, [r7, #20]
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	613b      	str	r3, [r7, #16]

        /* Convert duration to dot, dash or end of Morse code */
        if (duration < 1000 && spaceSent == false) {
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000866:	d208      	bcs.n	800087a <StartTask01+0x7e>
 8000868:	7ffb      	ldrb	r3, [r7, #31]
 800086a:	f083 0301 	eor.w	r3, r3, #1
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d002      	beq.n	800087a <StartTask01+0x7e>
            qSend = DOT;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
 8000878:	e019      	b.n	80008ae <StartTask01+0xb2>
        }
        else if (duration < 3000 && spaceSent == false) {
 800087a:	693b      	ldr	r3, [r7, #16]
 800087c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000880:	4293      	cmp	r3, r2
 8000882:	d808      	bhi.n	8000896 <StartTask01+0x9a>
 8000884:	7ffb      	ldrb	r3, [r7, #31]
 8000886:	f083 0301 	eor.w	r3, r3, #1
 800088a:	b2db      	uxtb	r3, r3
 800088c:	2b00      	cmp	r3, #0
 800088e:	d002      	beq.n	8000896 <StartTask01+0x9a>
            qSend = DASH;
 8000890:	2301      	movs	r3, #1
 8000892:	73fb      	strb	r3, [r7, #15]
 8000894:	e00b      	b.n	80008ae <StartTask01+0xb2>
        }

        else if (spaceSent == true){
 8000896:	7ffb      	ldrb	r3, [r7, #31]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d004      	beq.n	80008a6 <StartTask01+0xaa>
        	spaceSent = false;
 800089c:	2300      	movs	r3, #0
 800089e:	77fb      	strb	r3, [r7, #31]
        	qSend = SPACE;
 80008a0:	2302      	movs	r3, #2
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e003      	b.n	80008ae <StartTask01+0xb2>
        }
        else {
            qSend = SPACE;
 80008a6:	2302      	movs	r3, #2
 80008a8:	73fb      	strb	r3, [r7, #15]
            spaceSent = true;
 80008aa:	2301      	movs	r3, #1
 80008ac:	77fb      	strb	r3, [r7, #31]
        }

        /* Enqueue dot, dash or end of Morse code to xQueue1 */
        xQueueSend(xQueue1, &qSend, 0);
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <StartTask01+0xd4>)
 80008b0:	6818      	ldr	r0, [r3, #0]
 80008b2:	f107 010f 	add.w	r1, r7, #15
 80008b6:	2300      	movs	r3, #0
 80008b8:	2200      	movs	r2, #0
 80008ba:	f002 f9c7 	bl	8002c4c <xQueueGenericSend>
        HAL_Delay(100);
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f000 fb16 	bl	8000ef0 <HAL_Delay>
        while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET && ButtonState == 1) {
 80008c4:	e7a8      	b.n	8000818 <StartTask01+0x1c>
 80008c6:	bf00      	nop
 80008c8:	40020000 	.word	0x40020000
 80008cc:	200000f8 	.word	0x200000f8
 80008d0:	20000154 	.word	0x20000154

080008d4 <StartTask02>:
    }

}

/* Task 2: Dequeue dots and dashes from queue 1 and enqueue to queue 2_2 */
void StartTask02(void *pvParameters) {
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
BaseType_t xStatus;
qTemp qSend;

for (;;) {
    /* Dequeue dot or dash from xQueue1 */
    xStatus = xQueueReceive(xQueue1, &qSend, portMAX_DELAY);
 80008dc:	4b21      	ldr	r3, [pc, #132]	; (8000964 <StartTask02+0x90>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f107 010b 	add.w	r1, r7, #11
 80008e4:	f04f 32ff 	mov.w	r2, #4294967295
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fb49 	bl	8002f80 <xQueueReceive>
 80008ee:	60f8      	str	r0, [r7, #12]
    if (xStatus == pdPASS) {
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d1f2      	bne.n	80008dc <StartTask02+0x8>
    	if (qSend != SPACE){
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	2b02      	cmp	r3, #2
 80008fa:	d007      	beq.n	800090c <StartTask02+0x38>
    	xQueueSendToBack(xQueue2_2, &qSend, 0);
 80008fc:	4b1a      	ldr	r3, [pc, #104]	; (8000968 <StartTask02+0x94>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	f107 010b 	add.w	r1, r7, #11
 8000904:	2300      	movs	r3, #0
 8000906:	2200      	movs	r2, #0
 8000908:	f002 f9a0 	bl	8002c4c <xQueueGenericSend>
    	}
    	xQueueSendToBack(xQueue2_1, &qSend, 0);
 800090c:	4b17      	ldr	r3, [pc, #92]	; (800096c <StartTask02+0x98>)
 800090e:	6818      	ldr	r0, [r3, #0]
 8000910:	f107 010b 	add.w	r1, r7, #11
 8000914:	2300      	movs	r3, #0
 8000916:	2200      	movs	r2, #0
 8000918:	f002 f998 	bl	8002c4c <xQueueGenericSend>

        /* Light up LED on GPIOA, PIN 4 or PIN 5 based on whether the dot or dash is a dot or a dash */
        if (qSend == DOT) {
 800091c:	7afb      	ldrb	r3, [r7, #11]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10d      	bne.n	800093e <StartTask02+0x6a>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000922:	2201      	movs	r2, #1
 8000924:	2110      	movs	r1, #16
 8000926:	4812      	ldr	r0, [pc, #72]	; (8000970 <StartTask02+0x9c>)
 8000928:	f000 fdb4 	bl	8001494 <HAL_GPIO_WritePin>
            HAL_Delay(100);
 800092c:	2064      	movs	r0, #100	; 0x64
 800092e:	f000 fadf 	bl	8000ef0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	2110      	movs	r1, #16
 8000936:	480e      	ldr	r0, [pc, #56]	; (8000970 <StartTask02+0x9c>)
 8000938:	f000 fdac 	bl	8001494 <HAL_GPIO_WritePin>
 800093c:	e7ce      	b.n	80008dc <StartTask02+0x8>
        }
        else if (qSend == DASH) {
 800093e:	7afb      	ldrb	r3, [r7, #11]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d1cb      	bne.n	80008dc <StartTask02+0x8>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	4809      	ldr	r0, [pc, #36]	; (8000970 <StartTask02+0x9c>)
 800094a:	f000 fda3 	bl	8001494 <HAL_GPIO_WritePin>
            HAL_Delay(500);
 800094e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000952:	f000 facd 	bl	8000ef0 <HAL_Delay>
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	2110      	movs	r1, #16
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <StartTask02+0x9c>)
 800095c:	f000 fd9a 	bl	8001494 <HAL_GPIO_WritePin>
    xStatus = xQueueReceive(xQueue1, &qSend, portMAX_DELAY);
 8000960:	e7bc      	b.n	80008dc <StartTask02+0x8>
 8000962:	bf00      	nop
 8000964:	20000154 	.word	0x20000154
 8000968:	2000015c 	.word	0x2000015c
 800096c:	20000158 	.word	0x20000158
 8000970:	40020000 	.word	0x40020000

08000974 <StartTask03>:
}
}


/* Task 3: Dequeue dots and dashes from queue 2_1, decode them and print corresponding letter */
void StartTask03(void *pvParameters) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b086      	sub	sp, #24
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
    BaseType_t xStatus;
    qTemp qReceive;
    char morseCode[6] = {0};
 800097c:	2300      	movs	r3, #0
 800097e:	60bb      	str	r3, [r7, #8]
 8000980:	2300      	movs	r3, #0
 8000982:	81bb      	strh	r3, [r7, #12]
    int morseIndex = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]
    for (;;) {
        /* Wait for message from Queue2_1 */
        xStatus = xQueueReceive(xQueue2_1, &qReceive, portMAX_DELAY);
 8000988:	4b23      	ldr	r3, [pc, #140]	; (8000a18 <StartTask03+0xa4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f107 010e 	add.w	r1, r7, #14
 8000990:	f04f 32ff 	mov.w	r2, #4294967295
 8000994:	4618      	mov	r0, r3
 8000996:	f002 faf3 	bl	8002f80 <xQueueReceive>
 800099a:	6138      	str	r0, [r7, #16]

        /* Process Morse code */
        if (xStatus == pdPASS) {
 800099c:	693b      	ldr	r3, [r7, #16]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1f2      	bne.n	8000988 <StartTask03+0x14>
            /* If end of Morse code, decode and print letter */
            if (qReceive == SPACE) {
 80009a2:	7bbb      	ldrb	r3, [r7, #14]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d11b      	bne.n	80009e0 <StartTask03+0x6c>
                char letter = decodeMorse(morseCode);
 80009a8:	f107 0308 	add.w	r3, r7, #8
 80009ac:	4618      	mov	r0, r3
 80009ae:	f000 f88b 	bl	8000ac8 <decodeMorse>
 80009b2:	4603      	mov	r3, r0
 80009b4:	73fb      	strb	r3, [r7, #15]
                printf("%c", letter);
 80009b6:	7bfb      	ldrb	r3, [r7, #15]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 fdff 	bl	80055bc <putchar>
                xSemaphoreGive(xSemaphore);
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <StartTask03+0xa8>)
 80009c0:	6818      	ldr	r0, [r3, #0]
 80009c2:	2300      	movs	r3, #0
 80009c4:	2200      	movs	r2, #0
 80009c6:	2100      	movs	r1, #0
 80009c8:	f002 f940 	bl	8002c4c <xQueueGenericSend>

                morseIndex = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
                memset(morseCode, 0, sizeof(morseCode));
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	2206      	movs	r2, #6
 80009d6:	2100      	movs	r1, #0
 80009d8:	4618      	mov	r0, r3
 80009da:	f004 fde7 	bl	80055ac <memset>
 80009de:	e7d3      	b.n	8000988 <StartTask03+0x14>
            }
            /* Otherwise, store Morse code character */
            else {
                morseCode[morseIndex] = (qReceive == DOT) ? '.' : '-';
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d101      	bne.n	80009ea <StartTask03+0x76>
 80009e6:	212e      	movs	r1, #46	; 0x2e
 80009e8:	e000      	b.n	80009ec <StartTask03+0x78>
 80009ea:	212d      	movs	r1, #45	; 0x2d
 80009ec:	f107 0208 	add.w	r2, r7, #8
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4413      	add	r3, r2
 80009f4:	460a      	mov	r2, r1
 80009f6:	701a      	strb	r2, [r3, #0]
                morseIndex++;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	3301      	adds	r3, #1
 80009fc:	617b      	str	r3, [r7, #20]
                if (morseIndex >= sizeof(morseCode)) {
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2b05      	cmp	r3, #5
 8000a02:	d9c1      	bls.n	8000988 <StartTask03+0x14>
                    morseIndex = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
                    memset(morseCode, 0, sizeof(morseCode));
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4618      	mov	r0, r3
 8000a12:	f004 fdcb 	bl	80055ac <memset>
        xStatus = xQueueReceive(xQueue2_1, &qReceive, portMAX_DELAY);
 8000a16:	e7b7      	b.n	8000988 <StartTask03+0x14>
 8000a18:	20000158 	.word	0x20000158
 8000a1c:	20000150 	.word	0x20000150

08000a20 <StartTask04>:
}


/* Task 4: Dequeue dots and dashes from queue 2_2 and display the entire sequence on LED */

void StartTask04(void *pvParameters) {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]

    BaseType_t xStatus;
    qTemp qSend;

    xSemaphoreTake(xSemaphore, portMAX_DELAY);
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <StartTask04+0x9c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a30:	4618      	mov	r0, r3
 8000a32:	f002 fb85 	bl	8003140 <xQueueSemaphoreTake>
    for (;;) {
        /* Wait for semaphore from Task 2 */


    	while(uxQueueMessagesWaiting(xQueue2_2)>0){
 8000a36:	e031      	b.n	8000a9c <StartTask04+0x7c>
        /* Receive Morse code array from Task 2 */
        xStatus = xQueueReceive(xQueue2_2, &qSend, 0);
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <StartTask04+0xa0>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f107 010b 	add.w	r1, r7, #11
 8000a40:	2200      	movs	r2, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fa9c 	bl	8002f80 <xQueueReceive>
 8000a48:	60f8      	str	r0, [r7, #12]

        /* Process Morse code array */
        if (xStatus == pdPASS) {
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d125      	bne.n	8000a9c <StartTask04+0x7c>
            /* If end of Morse code array, reset index */

            /* Otherwise, process Morse code character */

                if (qSend ==  DOT) {
 8000a50:	7afb      	ldrb	r3, [r7, #11]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d10d      	bne.n	8000a72 <StartTask04+0x52>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2120      	movs	r1, #32
 8000a5a:	481a      	ldr	r0, [pc, #104]	; (8000ac4 <StartTask04+0xa4>)
 8000a5c:	f000 fd1a 	bl	8001494 <HAL_GPIO_WritePin>
                    HAL_Delay(100);
 8000a60:	2064      	movs	r0, #100	; 0x64
 8000a62:	f000 fa45 	bl	8000ef0 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	4816      	ldr	r0, [pc, #88]	; (8000ac4 <StartTask04+0xa4>)
 8000a6c:	f000 fd12 	bl	8001494 <HAL_GPIO_WritePin>
 8000a70:	e010      	b.n	8000a94 <StartTask04+0x74>
                }
                else if (qSend == DASH) {
 8000a72:	7afb      	ldrb	r3, [r7, #11]
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d10d      	bne.n	8000a94 <StartTask04+0x74>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	2120      	movs	r1, #32
 8000a7c:	4811      	ldr	r0, [pc, #68]	; (8000ac4 <StartTask04+0xa4>)
 8000a7e:	f000 fd09 	bl	8001494 <HAL_GPIO_WritePin>
                    HAL_Delay(500);
 8000a82:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a86:	f000 fa33 	bl	8000ef0 <HAL_Delay>
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	480d      	ldr	r0, [pc, #52]	; (8000ac4 <StartTask04+0xa4>)
 8000a90:	f000 fd00 	bl	8001494 <HAL_GPIO_WritePin>
                }
                HAL_Delay(500);
 8000a94:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a98:	f000 fa2a 	bl	8000ef0 <HAL_Delay>
    	while(uxQueueMessagesWaiting(xQueue2_2)>0){
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <StartTask04+0xa0>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f002 fc59 	bl	8003358 <uxQueueMessagesWaiting>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d1c5      	bne.n	8000a38 <StartTask04+0x18>

        }
    	}
    	xSemaphoreGive(xSemaphore);
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <StartTask04+0x9c>)
 8000aae:	6818      	ldr	r0, [r3, #0]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f002 f8c9 	bl	8002c4c <xQueueGenericSend>
    	while(uxQueueMessagesWaiting(xQueue2_2)>0){
 8000aba:	e7ef      	b.n	8000a9c <StartTask04+0x7c>
 8000abc:	20000150 	.word	0x20000150
 8000ac0:	2000015c 	.word	0x2000015c
 8000ac4:	40020000 	.word	0x40020000

08000ac8 <decodeMorse>:



// Function to decode a morse code string and return corresponding letter
char decodeMorse(char *morseChar)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    /* Define a lookup table for decoding morse code */
    static const char *morseTable[] = {".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."};

    /* Determine the index of the morse code in the lookup table */
    int i;
    for (i = 0; i < 26; i++)
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e00d      	b.n	8000af2 <decodeMorse+0x2a>
    {
        if (strcmp(morseChar, morseTable[i]) == 0)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <decodeMorse+0x50>)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ade:	4619      	mov	r1, r3
 8000ae0:	6878      	ldr	r0, [r7, #4]
 8000ae2:	f7ff fb7d 	bl	80001e0 <strcmp>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <decodeMorse+0x32>
    for (i = 0; i < 26; i++)
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2b19      	cmp	r3, #25
 8000af6:	ddee      	ble.n	8000ad6 <decodeMorse+0xe>
 8000af8:	e000      	b.n	8000afc <decodeMorse+0x34>
        {
            break;
 8000afa:	bf00      	nop
        }
    }

    /* If morse code is not found in the lookup table, return space */
    if (i == 26)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b1a      	cmp	r3, #26
 8000b00:	d101      	bne.n	8000b06 <decodeMorse+0x3e>
    {
        return ' ';
 8000b02:	2320      	movs	r3, #32
 8000b04:	e003      	b.n	8000b0e <decodeMorse+0x46>
    }

    /* Convert index to letter by adding 'A' */
    return i + 'A';
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	3341      	adds	r3, #65	; 0x41
 8000b0c:	b2db      	uxtb	r3, r3
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000000 	.word	0x20000000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_MspInit+0x54>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <HAL_MspInit+0x54>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <HAL_MspInit+0x54>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <HAL_MspInit+0x54>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <HAL_MspInit+0x54>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <HAL_MspInit+0x54>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b66:	2200      	movs	r2, #0
 8000b68:	210f      	movs	r1, #15
 8000b6a:	f06f 0001 	mvn.w	r0, #1
 8000b6e:	f000 fabe 	bl	80010ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a19      	ldr	r2, [pc, #100]	; (8000c04 <HAL_UART_MspInit+0x84>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d12b      	bne.n	8000bfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a17      	ldr	r2, [pc, #92]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_UART_MspInit+0x88>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bda:	230c      	movs	r3, #12
 8000bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bea:	2307      	movs	r3, #7
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0314 	add.w	r3, r7, #20
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <HAL_UART_MspInit+0x8c>)
 8000bf6:	f000 fab1 	bl	800115c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bfa:	bf00      	nop
 8000bfc:	3728      	adds	r7, #40	; 0x28
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40004400 	.word	0x40004400
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000

08000c10 <EXTI0_IRQHandler>:
/**
  * @brief This function handles Non maskable interrupt.
  */

void EXTI0_IRQHandler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  // Check if the interrupt was triggered by the user button on PA0
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <EXTI0_IRQHandler+0x28>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d005      	beq.n	8000c2c <EXTI0_IRQHandler+0x1c>
  {
    // Clear the interrupt flag
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <EXTI0_IRQHandler+0x28>)
 8000c22:	2201      	movs	r2, #1
 8000c24:	615a      	str	r2, [r3, #20]

    ButtonState = 1;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <EXTI0_IRQHandler+0x2c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40013c00 	.word	0x40013c00
 8000c3c:	200000f8 	.word	0x200000f8

08000c40 <NMI_Handler>:

void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c70:	f000 f91e 	bl	8000eb0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c74:	f003 fafe 	bl	8004274 <xTaskGetSchedulerState>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d001      	beq.n	8000c82 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c7e:	f004 f9e3 	bl	8005048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}

08000c86 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	b086      	sub	sp, #24
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	60f8      	str	r0, [r7, #12]
 8000c8e:	60b9      	str	r1, [r7, #8]
 8000c90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c92:	2300      	movs	r3, #0
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	e00a      	b.n	8000cae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c98:	f3af 8000 	nop.w
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1c5a      	adds	r2, r3, #1
 8000ca2:	60ba      	str	r2, [r7, #8]
 8000ca4:	b2ca      	uxtb	r2, r1
 8000ca6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	dbf0      	blt.n	8000c98 <_read+0x12>
  }

  return len;
 8000cb6:	687b      	ldr	r3, [r7, #4]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr

08000cd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ce8:	605a      	str	r2, [r3, #4]
  return 0;
 8000cea:	2300      	movs	r3, #0
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <_isatty>:

int _isatty(int file)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d00:	2301      	movs	r3, #1
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b085      	sub	sp, #20
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	60f8      	str	r0, [r7, #12]
 8000d16:	60b9      	str	r1, [r7, #8]
 8000d18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d30:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <_sbrk+0x5c>)
 8000d32:	4b15      	ldr	r3, [pc, #84]	; (8000d88 <_sbrk+0x60>)
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d3c:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <_sbrk+0x64>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d102      	bne.n	8000d4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d44:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <_sbrk+0x64>)
 8000d46:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <_sbrk+0x68>)
 8000d48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	693a      	ldr	r2, [r7, #16]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d207      	bcs.n	8000d68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d58:	f004 fbf0 	bl	800553c <__errno>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	220c      	movs	r2, #12
 8000d60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e009      	b.n	8000d7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6e:	4b07      	ldr	r3, [pc, #28]	; (8000d8c <_sbrk+0x64>)
 8000d70:	681a      	ldr	r2, [r3, #0]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4413      	add	r3, r2
 8000d76:	4a05      	ldr	r2, [pc, #20]	; (8000d8c <_sbrk+0x64>)
 8000d78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20020000 	.word	0x20020000
 8000d88:	00000400 	.word	0x00000400
 8000d8c:	20000160 	.word	0x20000160
 8000d90:	20004ac8 	.word	0x20004ac8

08000d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <SystemInit+0x20>)
 8000d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <SystemInit+0x20>)
 8000da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dbe:	490e      	ldr	r1, [pc, #56]	; (8000df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dc0:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0b      	ldr	r2, [pc, #44]	; (8000e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dd4:	4c0b      	ldr	r4, [pc, #44]	; (8000e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de2:	f7ff ffd7 	bl	8000d94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de6:	f004 fbaf 	bl	8005548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dea:	f7ff fb9b 	bl	8000524 <main>
  bx  lr    
 8000dee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8000dfc:	0800618c 	.word	0x0800618c
  ldr r2, =_sbss
 8000e00:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 8000e04:	20004ac8 	.word	0x20004ac8

08000e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC_IRQHandler>
	...

08000e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <HAL_Init+0x40>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a0d      	ldr	r2, [pc, #52]	; (8000e4c <HAL_Init+0x40>)
 8000e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e1c:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <HAL_Init+0x40>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <HAL_Init+0x40>)
 8000e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_Init+0x40>)
 8000e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e34:	2003      	movs	r0, #3
 8000e36:	f000 f94f 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3a:	200f      	movs	r0, #15
 8000e3c:	f000 f808 	bl	8000e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e40:	f7ff fe72 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40023c00 	.word	0x40023c00

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_InitTick+0x54>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_InitTick+0x58>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4619      	mov	r1, r3
 8000e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f967 	bl	8001142 <HAL_SYSTICK_Config>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e00e      	b.n	8000e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b0f      	cmp	r3, #15
 8000e82:	d80a      	bhi.n	8000e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e84:	2200      	movs	r2, #0
 8000e86:	6879      	ldr	r1, [r7, #4]
 8000e88:	f04f 30ff 	mov.w	r0, #4294967295
 8000e8c:	f000 f92f 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e90:	4a06      	ldr	r2, [pc, #24]	; (8000eac <HAL_InitTick+0x5c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
 8000e98:	e000      	b.n	8000e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000068 	.word	0x20000068
 8000ea8:	20000070 	.word	0x20000070
 8000eac:	2000006c 	.word	0x2000006c

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4a04      	ldr	r2, [pc, #16]	; (8000ed4 <HAL_IncTick+0x24>)
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	20000070 	.word	0x20000070
 8000ed4:	20000164 	.word	0x20000164

08000ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  return uwTick;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetTick+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	20000164 	.word	0x20000164

08000ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef8:	f7ff ffee 	bl	8000ed8 <HAL_GetTick>
 8000efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f08:	d005      	beq.n	8000f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0a:	4b0a      	ldr	r3, [pc, #40]	; (8000f34 <HAL_Delay+0x44>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	4413      	add	r3, r2
 8000f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f16:	bf00      	nop
 8000f18:	f7ff ffde 	bl	8000ed8 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8f7      	bhi.n	8000f18 <HAL_Delay+0x28>
  {
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000070 	.word	0x20000070

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	; (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff29 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff3e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff31 	bl	8000f9c <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa2 	bl	8001094 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e159      	b.n	800142c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8148 	bne.w	8001426 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d005      	beq.n	80011ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80a2 	beq.w	8001426 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b57      	ldr	r3, [pc, #348]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	4a56      	ldr	r2, [pc, #344]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	; 0x44
 80012f2:	4b54      	ldr	r3, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x2e8>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a52      	ldr	r2, [pc, #328]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a49      	ldr	r2, [pc, #292]	; (800144c <HAL_GPIO_Init+0x2f0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d019      	beq.n	800135e <HAL_GPIO_Init+0x202>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a48      	ldr	r2, [pc, #288]	; (8001450 <HAL_GPIO_Init+0x2f4>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d013      	beq.n	800135a <HAL_GPIO_Init+0x1fe>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a47      	ldr	r2, [pc, #284]	; (8001454 <HAL_GPIO_Init+0x2f8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d00d      	beq.n	8001356 <HAL_GPIO_Init+0x1fa>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a46      	ldr	r2, [pc, #280]	; (8001458 <HAL_GPIO_Init+0x2fc>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x1f6>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a45      	ldr	r2, [pc, #276]	; (800145c <HAL_GPIO_Init+0x300>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d101      	bne.n	800134e <HAL_GPIO_Init+0x1f2>
 800134a:	2304      	movs	r3, #4
 800134c:	e008      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800134e:	2307      	movs	r3, #7
 8001350:	e006      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001352:	2303      	movs	r3, #3
 8001354:	e004      	b.n	8001360 <HAL_GPIO_Init+0x204>
 8001356:	2302      	movs	r3, #2
 8001358:	e002      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135a:	2301      	movs	r3, #1
 800135c:	e000      	b.n	8001360 <HAL_GPIO_Init+0x204>
 800135e:	2300      	movs	r3, #0
 8001360:	69fa      	ldr	r2, [r7, #28]
 8001362:	f002 0203 	and.w	r2, r2, #3
 8001366:	0092      	lsls	r2, r2, #2
 8001368:	4093      	lsls	r3, r2
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001370:	4935      	ldr	r1, [pc, #212]	; (8001448 <HAL_GPIO_Init+0x2ec>)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	089b      	lsrs	r3, r3, #2
 8001376:	3302      	adds	r3, #2
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800137e:	4b38      	ldr	r3, [pc, #224]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013a2:	4a2f      	ldr	r2, [pc, #188]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	43db      	mvns	r3, r3
 80013b2:	69ba      	ldr	r2, [r7, #24]
 80013b4:	4013      	ands	r3, r2
 80013b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d003      	beq.n	80013cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013d2:	4b23      	ldr	r3, [pc, #140]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	43db      	mvns	r3, r3
 80013dc:	69ba      	ldr	r2, [r7, #24]
 80013de:	4013      	ands	r3, r2
 80013e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013f6:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_GPIO_Init+0x304>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	43db      	mvns	r3, r3
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4013      	ands	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001420:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <HAL_GPIO_Init+0x304>)
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3301      	adds	r3, #1
 800142a:	61fb      	str	r3, [r7, #28]
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b0f      	cmp	r3, #15
 8001430:	f67f aea2 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3724      	adds	r7, #36	; 0x24
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	40013800 	.word	0x40013800
 800144c:	40020000 	.word	0x40020000
 8001450:	40020400 	.word	0x40020400
 8001454:	40020800 	.word	0x40020800
 8001458:	40020c00 	.word	0x40020c00
 800145c:	40021000 	.word	0x40021000
 8001460:	40013c00 	.word	0x40013c00

08001464 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	460b      	mov	r3, r1
 800146e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691a      	ldr	r2, [r3, #16]
 8001474:	887b      	ldrh	r3, [r7, #2]
 8001476:	4013      	ands	r3, r2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d002      	beq.n	8001482 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800147c:	2301      	movs	r3, #1
 800147e:	73fb      	strb	r3, [r7, #15]
 8001480:	e001      	b.n	8001486 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001486:	7bfb      	ldrb	r3, [r7, #15]
}
 8001488:	4618      	mov	r0, r3
 800148a:	3714      	adds	r7, #20
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	041a      	lsls	r2, r3, #16
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	619a      	str	r2, [r3, #24]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e267      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d075      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014e6:	4b88      	ldr	r3, [pc, #544]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	d00c      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014f2:	4b85      	ldr	r3, [pc, #532]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d112      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014fe:	4b82      	ldr	r3, [pc, #520]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4b7e      	ldr	r3, [pc, #504]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05b      	beq.n	80015d0 <HAL_RCC_OscConfig+0x108>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d157      	bne.n	80015d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e242      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x74>
 800152e:	4b76      	ldr	r3, [pc, #472]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a75      	ldr	r2, [pc, #468]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	e01d      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x98>
 8001546:	4b70      	ldr	r3, [pc, #448]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a6f      	ldr	r2, [pc, #444]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800154c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b6d      	ldr	r3, [pc, #436]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a6c      	ldr	r2, [pc, #432]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e00b      	b.n	8001578 <HAL_RCC_OscConfig+0xb0>
 8001560:	4b69      	ldr	r3, [pc, #420]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a68      	ldr	r2, [pc, #416]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001566:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800156a:	6013      	str	r3, [r2, #0]
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a65      	ldr	r2, [pc, #404]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001576:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d013      	beq.n	80015a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001580:	f7ff fcaa 	bl	8000ed8 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001588:	f7ff fca6 	bl	8000ed8 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b64      	cmp	r3, #100	; 0x64
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e207      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159a:	4b5b      	ldr	r3, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0xc0>
 80015a6:	e014      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fc96 	bl	8000ed8 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ae:	e008      	b.n	80015c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b0:	f7ff fc92 	bl	8000ed8 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	2b64      	cmp	r3, #100	; 0x64
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e1f3      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c2:	4b51      	ldr	r3, [pc, #324]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f0      	bne.n	80015b0 <HAL_RCC_OscConfig+0xe8>
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d063      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015de:	4b4a      	ldr	r3, [pc, #296]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00b      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015ea:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d11c      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80015f6:	4b44      	ldr	r3, [pc, #272]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d116      	bne.n	8001630 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001602:	4b41      	ldr	r3, [pc, #260]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e1c7      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b3b      	ldr	r3, [pc, #236]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4937      	ldr	r1, [pc, #220]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162e:	e03a      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d020      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <HAL_RCC_OscConfig+0x244>)
 800163a:	2201      	movs	r2, #1
 800163c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff fc4b 	bl	8000ed8 <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001646:	f7ff fc47 	bl	8000ed8 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e1a8      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001658:	4b2b      	ldr	r3, [pc, #172]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0302 	and.w	r3, r3, #2
 8001660:	2b00      	cmp	r3, #0
 8001662:	d0f0      	beq.n	8001646 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	4925      	ldr	r1, [pc, #148]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 8001674:	4313      	orrs	r3, r2
 8001676:	600b      	str	r3, [r1, #0]
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_OscConfig+0x244>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001680:	f7ff fc2a 	bl	8000ed8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fc26 	bl	8000ed8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e187      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d036      	beq.n	8001720 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d016      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <HAL_RCC_OscConfig+0x248>)
 80016bc:	2201      	movs	r2, #1
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc0a 	bl	8000ed8 <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc06 	bl	8000ed8 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e167      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_RCC_OscConfig+0x240>)
 80016dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x200>
 80016e6:	e01b      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <HAL_RCC_OscConfig+0x248>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ee:	f7ff fbf3 	bl	8000ed8 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016f4:	e00e      	b.n	8001714 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f6:	f7ff fbef 	bl	8000ed8 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d907      	bls.n	8001714 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e150      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001708:	40023800 	.word	0x40023800
 800170c:	42470000 	.word	0x42470000
 8001710:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001714:	4b88      	ldr	r3, [pc, #544]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d1ea      	bne.n	80016f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0304 	and.w	r3, r3, #4
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8097 	beq.w	800185c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001732:	4b81      	ldr	r3, [pc, #516]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	4b7d      	ldr	r3, [pc, #500]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	4a7c      	ldr	r2, [pc, #496]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	; 0x40
 800174e:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800175a:	2301      	movs	r3, #1
 800175c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800175e:	4b77      	ldr	r3, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001766:	2b00      	cmp	r3, #0
 8001768:	d118      	bne.n	800179c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176a:	4b74      	ldr	r3, [pc, #464]	; (800193c <HAL_RCC_OscConfig+0x474>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a73      	ldr	r2, [pc, #460]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001776:	f7ff fbaf 	bl	8000ed8 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800177e:	f7ff fbab 	bl	8000ed8 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e10c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001790:	4b6a      	ldr	r3, [pc, #424]	; (800193c <HAL_RCC_OscConfig+0x474>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x2ea>
 80017a4:	4b64      	ldr	r3, [pc, #400]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a8:	4a63      	ldr	r2, [pc, #396]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6713      	str	r3, [r2, #112]	; 0x70
 80017b0:	e01c      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	2b05      	cmp	r3, #5
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x30c>
 80017ba:	4b5f      	ldr	r3, [pc, #380]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017be:	4a5e      	ldr	r2, [pc, #376]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6713      	str	r3, [r2, #112]	; 0x70
 80017c6:	4b5c      	ldr	r3, [pc, #368]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ca:	4a5b      	ldr	r2, [pc, #364]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6713      	str	r3, [r2, #112]	; 0x70
 80017d2:	e00b      	b.n	80017ec <HAL_RCC_OscConfig+0x324>
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d8:	4a57      	ldr	r2, [pc, #348]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	6713      	str	r3, [r2, #112]	; 0x70
 80017e0:	4b55      	ldr	r3, [pc, #340]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e4:	4a54      	ldr	r2, [pc, #336]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d015      	beq.n	8001820 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f4:	f7ff fb70 	bl	8000ed8 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	e00a      	b.n	8001812 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb6c 	bl	8000ed8 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	f241 3288 	movw	r2, #5000	; 0x1388
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e0cb      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0ee      	beq.n	80017fc <HAL_RCC_OscConfig+0x334>
 800181e:	e014      	b.n	800184a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff fb5a 	bl	8000ed8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001826:	e00a      	b.n	800183e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f7ff fb56 	bl	8000ed8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e0b5      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ee      	bne.n	8001828 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800184a:	7dfb      	ldrb	r3, [r7, #23]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001850:	4b39      	ldr	r3, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	4a38      	ldr	r2, [pc, #224]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800185a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	699b      	ldr	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a1 	beq.w	80019a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001866:	4b34      	ldr	r3, [pc, #208]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b08      	cmp	r3, #8
 8001870:	d05c      	beq.n	800192c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	2b02      	cmp	r3, #2
 8001878:	d141      	bne.n	80018fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800187a:	4b31      	ldr	r3, [pc, #196]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001880:	f7ff fb2a 	bl	8000ed8 <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001888:	f7ff fb26 	bl	8000ed8 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b02      	cmp	r3, #2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e087      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	69da      	ldr	r2, [r3, #28]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b4:	019b      	lsls	r3, r3, #6
 80018b6:	431a      	orrs	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	085b      	lsrs	r3, r3, #1
 80018be:	3b01      	subs	r3, #1
 80018c0:	041b      	lsls	r3, r3, #16
 80018c2:	431a      	orrs	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	061b      	lsls	r3, r3, #24
 80018ca:	491b      	ldr	r1, [pc, #108]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff faff 	bl	8000ed8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018de:	f7ff fafb 	bl	8000ed8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e05c      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x416>
 80018fc:	e054      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fe:	4b10      	ldr	r3, [pc, #64]	; (8001940 <HAL_RCC_OscConfig+0x478>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001904:	f7ff fae8 	bl	8000ed8 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800190c:	f7ff fae4 	bl	8000ed8 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b02      	cmp	r3, #2
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e045      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_RCC_OscConfig+0x470>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1f0      	bne.n	800190c <HAL_RCC_OscConfig+0x444>
 800192a:	e03d      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	699b      	ldr	r3, [r3, #24]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d107      	bne.n	8001944 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e038      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000
 8001940:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_RCC_OscConfig+0x4ec>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d028      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800195c:	429a      	cmp	r2, r3
 800195e:	d121      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d11a      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800197a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197c:	4293      	cmp	r3, r2
 800197e:	d111      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198a:	085b      	lsrs	r3, r3, #1
 800198c:	3b01      	subs	r3, #1
 800198e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001990:	429a      	cmp	r2, r3
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d001      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e000      	b.n	80019aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800

080019b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0cc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019cc:	4b68      	ldr	r3, [pc, #416]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d90c      	bls.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b65      	ldr	r3, [pc, #404]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b63      	ldr	r3, [pc, #396]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0b8      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a0c:	4b59      	ldr	r3, [pc, #356]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	4a58      	ldr	r2, [pc, #352]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a24:	4b53      	ldr	r3, [pc, #332]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a52      	ldr	r2, [pc, #328]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a30:	4b50      	ldr	r3, [pc, #320]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	494d      	ldr	r1, [pc, #308]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d044      	beq.n	8001ad8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d107      	bne.n	8001a66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e07f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d003      	beq.n	8001a76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a72:	2b03      	cmp	r3, #3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a76:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e06f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a86:	4b3b      	ldr	r3, [pc, #236]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e067      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a96:	4b37      	ldr	r3, [pc, #220]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 0203 	bic.w	r2, r3, #3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aa8:	f7ff fa16 	bl	8000ed8 <HAL_GetTick>
 8001aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff fa12 	bl	8000ed8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e04f      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac6:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 020c 	and.w	r2, r3, #12
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1eb      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d20c      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_RCC_ClockConfig+0x1b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e032      	b.n	8001b66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490e      	ldr	r1, [pc, #56]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b3e:	f000 f821 	bl	8001b84 <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490a      	ldr	r1, [pc, #40]	; (8001b78 <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	fa22 f303 	lsr.w	r3, r2, r3
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_RCC_ClockConfig+0x1c4>)
 8001b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b5a:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <HAL_RCC_ClockConfig+0x1c8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff f976 	bl	8000e50 <HAL_InitTick>

  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023c00 	.word	0x40023c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	08006100 	.word	0x08006100
 8001b7c:	20000068 	.word	0x20000068
 8001b80:	2000006c 	.word	0x2000006c

08001b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b88:	b094      	sub	sp, #80	; 0x50
 8001b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001b90:	2300      	movs	r3, #0
 8001b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001b94:	2300      	movs	r3, #0
 8001b96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b9c:	4b79      	ldr	r3, [pc, #484]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 030c 	and.w	r3, r3, #12
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d00d      	beq.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	f200 80e1 	bhi.w	8001d70 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8001bb6:	e0db      	b.n	8001d70 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bb8:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001bbc:	e0db      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bbe:	4b73      	ldr	r3, [pc, #460]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x208>)
 8001bc0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bc2:	e0d8      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bcc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bce:	4b6d      	ldr	r3, [pc, #436]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4b6a      	ldr	r3, [pc, #424]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	099b      	lsrs	r3, r3, #6
 8001be0:	2200      	movs	r2, #0
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
 8001be4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001be8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001bf6:	4622      	mov	r2, r4
 8001bf8:	462b      	mov	r3, r5
 8001bfa:	f04f 0000 	mov.w	r0, #0
 8001bfe:	f04f 0100 	mov.w	r1, #0
 8001c02:	0159      	lsls	r1, r3, #5
 8001c04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c08:	0150      	lsls	r0, r2, #5
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4621      	mov	r1, r4
 8001c10:	1a51      	subs	r1, r2, r1
 8001c12:	6139      	str	r1, [r7, #16]
 8001c14:	4629      	mov	r1, r5
 8001c16:	eb63 0301 	sbc.w	r3, r3, r1
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	f04f 0300 	mov.w	r3, #0
 8001c24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c28:	4659      	mov	r1, fp
 8001c2a:	018b      	lsls	r3, r1, #6
 8001c2c:	4651      	mov	r1, sl
 8001c2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c32:	4651      	mov	r1, sl
 8001c34:	018a      	lsls	r2, r1, #6
 8001c36:	4651      	mov	r1, sl
 8001c38:	ebb2 0801 	subs.w	r8, r2, r1
 8001c3c:	4659      	mov	r1, fp
 8001c3e:	eb63 0901 	sbc.w	r9, r3, r1
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c56:	4690      	mov	r8, r2
 8001c58:	4699      	mov	r9, r3
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	eb18 0303 	adds.w	r3, r8, r3
 8001c60:	60bb      	str	r3, [r7, #8]
 8001c62:	462b      	mov	r3, r5
 8001c64:	eb49 0303 	adc.w	r3, r9, r3
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c76:	4629      	mov	r1, r5
 8001c78:	024b      	lsls	r3, r1, #9
 8001c7a:	4621      	mov	r1, r4
 8001c7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c80:	4621      	mov	r1, r4
 8001c82:	024a      	lsls	r2, r1, #9
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c94:	f7fe faae 	bl	80001f4 <__aeabi_uldivmod>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ca0:	e058      	b.n	8001d54 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b38      	ldr	r3, [pc, #224]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	4611      	mov	r1, r2
 8001cae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cb2:	623b      	str	r3, [r7, #32]
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001cbc:	4642      	mov	r2, r8
 8001cbe:	464b      	mov	r3, r9
 8001cc0:	f04f 0000 	mov.w	r0, #0
 8001cc4:	f04f 0100 	mov.w	r1, #0
 8001cc8:	0159      	lsls	r1, r3, #5
 8001cca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cce:	0150      	lsls	r0, r2, #5
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	4641      	mov	r1, r8
 8001cd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001cda:	4649      	mov	r1, r9
 8001cdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001cec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001cf0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001cf4:	ebb2 040a 	subs.w	r4, r2, sl
 8001cf8:	eb63 050b 	sbc.w	r5, r3, fp
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	00eb      	lsls	r3, r5, #3
 8001d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0a:	00e2      	lsls	r2, r4, #3
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	4643      	mov	r3, r8
 8001d12:	18e3      	adds	r3, r4, r3
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	464b      	mov	r3, r9
 8001d18:	eb45 0303 	adc.w	r3, r5, r3
 8001d1c:	607b      	str	r3, [r7, #4]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d2a:	4629      	mov	r1, r5
 8001d2c:	028b      	lsls	r3, r1, #10
 8001d2e:	4621      	mov	r1, r4
 8001d30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d34:	4621      	mov	r1, r4
 8001d36:	028a      	lsls	r2, r1, #10
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	61fa      	str	r2, [r7, #28]
 8001d44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d48:	f7fe fa54 	bl	80001f4 <__aeabi_uldivmod>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	4613      	mov	r3, r2
 8001d52:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	0c1b      	lsrs	r3, r3, #16
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001d64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d6e:	e002      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d72:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3750      	adds	r7, #80	; 0x50
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	00f42400 	.word	0x00f42400
 8001d8c:	007a1200 	.word	0x007a1200

08001d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d94:	4b03      	ldr	r3, [pc, #12]	; (8001da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d96:	681b      	ldr	r3, [r3, #0]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000068 	.word	0x20000068

08001da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dac:	f7ff fff0 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0a9b      	lsrs	r3, r3, #10
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4903      	ldr	r1, [pc, #12]	; (8001dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	08006110 	.word	0x08006110

08001dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001dd4:	f7ff ffdc 	bl	8001d90 <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	0b5b      	lsrs	r3, r3, #13
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	; (8001df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	08006110 	.word	0x08006110

08001df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e03f      	b.n	8001e8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d106      	bne.n	8001e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7fe feae 	bl	8000b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2224      	movs	r2, #36	; 0x24
 8001e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f929 	bl	8002094 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b08a      	sub	sp, #40	; 0x28
 8001e96:	af02      	add	r7, sp, #8
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d17c      	bne.n	8001fac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_UART_Transmit+0x2c>
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e075      	b.n	8001fae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d101      	bne.n	8001ed0 <HAL_UART_Transmit+0x3e>
 8001ecc:	2302      	movs	r3, #2
 8001ece:	e06e      	b.n	8001fae <HAL_UART_Transmit+0x11c>
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2200      	movs	r2, #0
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2221      	movs	r2, #33	; 0x21
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ee6:	f7fe fff7 	bl	8000ed8 <HAL_GetTick>
 8001eea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	88fa      	ldrh	r2, [r7, #6]
 8001ef0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f00:	d108      	bne.n	8001f14 <HAL_UART_Transmit+0x82>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d104      	bne.n	8001f14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
 8001f12:	e003      	b.n	8001f1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f24:	e02a      	b.n	8001f7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2180      	movs	r1, #128	; 0x80
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 f840 	bl	8001fb6 <UART_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e036      	b.n	8001fae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	3302      	adds	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
 8001f5c:	e007      	b.n	8001f6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	781a      	ldrb	r2, [r3, #0]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f80:	b29b      	uxth	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1cf      	bne.n	8001f26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f810 	bl	8001fb6 <UART_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e006      	b.n	8001fae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	e000      	b.n	8001fae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001fac:	2302      	movs	r3, #2
  }
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3720      	adds	r7, #32
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b090      	sub	sp, #64	; 0x40
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	603b      	str	r3, [r7, #0]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fc6:	e050      	b.n	800206a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fce:	d04c      	beq.n	800206a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <UART_WaitOnFlagUntilTimeout+0x30>
 8001fd6:	f7fe ff7f 	bl	8000ed8 <HAL_GetTick>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	1ad3      	subs	r3, r2, r3
 8001fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d241      	bcs.n	800206a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	330c      	adds	r3, #12
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	e853 3f00 	ldrex	r3, [r3]
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	330c      	adds	r3, #12
 8002004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002006:	637a      	str	r2, [r7, #52]	; 0x34
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800200a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800200c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800200e:	e841 2300 	strex	r3, r2, [r1]
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d1e5      	bne.n	8001fe6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	3314      	adds	r3, #20
 8002020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	e853 3f00 	ldrex	r3, [r3]
 8002028:	613b      	str	r3, [r7, #16]
   return(result);
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	63bb      	str	r3, [r7, #56]	; 0x38
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3314      	adds	r3, #20
 8002038:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800203a:	623a      	str	r2, [r7, #32]
 800203c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800203e:	69f9      	ldr	r1, [r7, #28]
 8002040:	6a3a      	ldr	r2, [r7, #32]
 8002042:	e841 2300 	strex	r3, r2, [r1]
 8002046:	61bb      	str	r3, [r7, #24]
   return(result);
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1e5      	bne.n	800201a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2220      	movs	r2, #32
 8002052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2220      	movs	r2, #32
 800205a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e00f      	b.n	800208a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	4013      	ands	r3, r2
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	429a      	cmp	r2, r3
 8002078:	bf0c      	ite	eq
 800207a:	2301      	moveq	r3, #1
 800207c:	2300      	movne	r3, #0
 800207e:	b2db      	uxtb	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	79fb      	ldrb	r3, [r7, #7]
 8002084:	429a      	cmp	r2, r3
 8002086:	d09f      	beq.n	8001fc8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3740      	adds	r7, #64	; 0x40
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002094:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002098:	b0c0      	sub	sp, #256	; 0x100
 800209a:	af00      	add	r7, sp, #0
 800209c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b0:	68d9      	ldr	r1, [r3, #12]
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	ea40 0301 	orr.w	r3, r0, r1
 80020bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80020be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	431a      	orrs	r2, r3
 80020cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d0:	695b      	ldr	r3, [r3, #20]
 80020d2:	431a      	orrs	r2, r3
 80020d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4313      	orrs	r3, r2
 80020dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80020e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80020ec:	f021 010c 	bic.w	r1, r1, #12
 80020f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80020fa:	430b      	orrs	r3, r1
 80020fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800210a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800210e:	6999      	ldr	r1, [r3, #24]
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	ea40 0301 	orr.w	r3, r0, r1
 800211a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800211c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <UART_SetConfig+0x2cc>)
 8002124:	429a      	cmp	r2, r3
 8002126:	d005      	beq.n	8002134 <UART_SetConfig+0xa0>
 8002128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	4b8d      	ldr	r3, [pc, #564]	; (8002364 <UART_SetConfig+0x2d0>)
 8002130:	429a      	cmp	r2, r3
 8002132:	d104      	bne.n	800213e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002134:	f7ff fe4c 	bl	8001dd0 <HAL_RCC_GetPCLK2Freq>
 8002138:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800213c:	e003      	b.n	8002146 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800213e:	f7ff fe33 	bl	8001da8 <HAL_RCC_GetPCLK1Freq>
 8002142:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002150:	f040 810c 	bne.w	800236c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002154:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002158:	2200      	movs	r2, #0
 800215a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800215e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002162:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	1891      	adds	r1, r2, r2
 800216c:	65b9      	str	r1, [r7, #88]	; 0x58
 800216e:	415b      	adcs	r3, r3
 8002170:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002172:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002176:	4621      	mov	r1, r4
 8002178:	eb12 0801 	adds.w	r8, r2, r1
 800217c:	4629      	mov	r1, r5
 800217e:	eb43 0901 	adc.w	r9, r3, r1
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800218e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002192:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002196:	4690      	mov	r8, r2
 8002198:	4699      	mov	r9, r3
 800219a:	4623      	mov	r3, r4
 800219c:	eb18 0303 	adds.w	r3, r8, r3
 80021a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80021a4:	462b      	mov	r3, r5
 80021a6:	eb49 0303 	adc.w	r3, r9, r3
 80021aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80021ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80021ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80021be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80021c2:	460b      	mov	r3, r1
 80021c4:	18db      	adds	r3, r3, r3
 80021c6:	653b      	str	r3, [r7, #80]	; 0x50
 80021c8:	4613      	mov	r3, r2
 80021ca:	eb42 0303 	adc.w	r3, r2, r3
 80021ce:	657b      	str	r3, [r7, #84]	; 0x54
 80021d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80021d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80021d8:	f7fe f80c 	bl	80001f4 <__aeabi_uldivmod>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4b61      	ldr	r3, [pc, #388]	; (8002368 <UART_SetConfig+0x2d4>)
 80021e2:	fba3 2302 	umull	r2, r3, r3, r2
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	011c      	lsls	r4, r3, #4
 80021ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021ee:	2200      	movs	r2, #0
 80021f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80021f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80021f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80021fc:	4642      	mov	r2, r8
 80021fe:	464b      	mov	r3, r9
 8002200:	1891      	adds	r1, r2, r2
 8002202:	64b9      	str	r1, [r7, #72]	; 0x48
 8002204:	415b      	adcs	r3, r3
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002208:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800220c:	4641      	mov	r1, r8
 800220e:	eb12 0a01 	adds.w	sl, r2, r1
 8002212:	4649      	mov	r1, r9
 8002214:	eb43 0b01 	adc.w	fp, r3, r1
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002224:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002228:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800222c:	4692      	mov	sl, r2
 800222e:	469b      	mov	fp, r3
 8002230:	4643      	mov	r3, r8
 8002232:	eb1a 0303 	adds.w	r3, sl, r3
 8002236:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800223a:	464b      	mov	r3, r9
 800223c:	eb4b 0303 	adc.w	r3, fp, r3
 8002240:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002250:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002254:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002258:	460b      	mov	r3, r1
 800225a:	18db      	adds	r3, r3, r3
 800225c:	643b      	str	r3, [r7, #64]	; 0x40
 800225e:	4613      	mov	r3, r2
 8002260:	eb42 0303 	adc.w	r3, r2, r3
 8002264:	647b      	str	r3, [r7, #68]	; 0x44
 8002266:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800226a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800226e:	f7fd ffc1 	bl	80001f4 <__aeabi_uldivmod>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	4611      	mov	r1, r2
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <UART_SetConfig+0x2d4>)
 800227a:	fba3 2301 	umull	r2, r3, r3, r1
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2264      	movs	r2, #100	; 0x64
 8002282:	fb02 f303 	mul.w	r3, r2, r3
 8002286:	1acb      	subs	r3, r1, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <UART_SetConfig+0x2d4>)
 8002290:	fba3 2302 	umull	r2, r3, r3, r2
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800229c:	441c      	add	r4, r3
 800229e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022a2:	2200      	movs	r2, #0
 80022a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80022a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80022ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80022b0:	4642      	mov	r2, r8
 80022b2:	464b      	mov	r3, r9
 80022b4:	1891      	adds	r1, r2, r2
 80022b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80022b8:	415b      	adcs	r3, r3
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80022c0:	4641      	mov	r1, r8
 80022c2:	1851      	adds	r1, r2, r1
 80022c4:	6339      	str	r1, [r7, #48]	; 0x30
 80022c6:	4649      	mov	r1, r9
 80022c8:	414b      	adcs	r3, r1
 80022ca:	637b      	str	r3, [r7, #52]	; 0x34
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80022d8:	4659      	mov	r1, fp
 80022da:	00cb      	lsls	r3, r1, #3
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022e2:	4651      	mov	r1, sl
 80022e4:	00ca      	lsls	r2, r1, #3
 80022e6:	4610      	mov	r0, r2
 80022e8:	4619      	mov	r1, r3
 80022ea:	4603      	mov	r3, r0
 80022ec:	4642      	mov	r2, r8
 80022ee:	189b      	adds	r3, r3, r2
 80022f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022f4:	464b      	mov	r3, r9
 80022f6:	460a      	mov	r2, r1
 80022f8:	eb42 0303 	adc.w	r3, r2, r3
 80022fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800230c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002310:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002314:	460b      	mov	r3, r1
 8002316:	18db      	adds	r3, r3, r3
 8002318:	62bb      	str	r3, [r7, #40]	; 0x28
 800231a:	4613      	mov	r3, r2
 800231c:	eb42 0303 	adc.w	r3, r2, r3
 8002320:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002322:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002326:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800232a:	f7fd ff63 	bl	80001f4 <__aeabi_uldivmod>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <UART_SetConfig+0x2d4>)
 8002334:	fba3 1302 	umull	r1, r3, r3, r2
 8002338:	095b      	lsrs	r3, r3, #5
 800233a:	2164      	movs	r1, #100	; 0x64
 800233c:	fb01 f303 	mul.w	r3, r1, r3
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	3332      	adds	r3, #50	; 0x32
 8002346:	4a08      	ldr	r2, [pc, #32]	; (8002368 <UART_SetConfig+0x2d4>)
 8002348:	fba2 2303 	umull	r2, r3, r2, r3
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	f003 0207 	and.w	r2, r3, #7
 8002352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4422      	add	r2, r4
 800235a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800235c:	e105      	b.n	800256a <UART_SetConfig+0x4d6>
 800235e:	bf00      	nop
 8002360:	40011000 	.word	0x40011000
 8002364:	40011400 	.word	0x40011400
 8002368:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800236c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002370:	2200      	movs	r2, #0
 8002372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002376:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800237a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800237e:	4642      	mov	r2, r8
 8002380:	464b      	mov	r3, r9
 8002382:	1891      	adds	r1, r2, r2
 8002384:	6239      	str	r1, [r7, #32]
 8002386:	415b      	adcs	r3, r3
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800238e:	4641      	mov	r1, r8
 8002390:	1854      	adds	r4, r2, r1
 8002392:	4649      	mov	r1, r9
 8002394:	eb43 0501 	adc.w	r5, r3, r1
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	00eb      	lsls	r3, r5, #3
 80023a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023a6:	00e2      	lsls	r2, r4, #3
 80023a8:	4614      	mov	r4, r2
 80023aa:	461d      	mov	r5, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	18e3      	adds	r3, r4, r3
 80023b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80023b4:	464b      	mov	r3, r9
 80023b6:	eb45 0303 	adc.w	r3, r5, r3
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80023be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80023ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80023da:	4629      	mov	r1, r5
 80023dc:	008b      	lsls	r3, r1, #2
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023e4:	4621      	mov	r1, r4
 80023e6:	008a      	lsls	r2, r1, #2
 80023e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80023ec:	f7fd ff02 	bl	80001f4 <__aeabi_uldivmod>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4b60      	ldr	r3, [pc, #384]	; (8002578 <UART_SetConfig+0x4e4>)
 80023f6:	fba3 2302 	umull	r2, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	011c      	lsls	r4, r3, #4
 80023fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002408:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800240c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002410:	4642      	mov	r2, r8
 8002412:	464b      	mov	r3, r9
 8002414:	1891      	adds	r1, r2, r2
 8002416:	61b9      	str	r1, [r7, #24]
 8002418:	415b      	adcs	r3, r3
 800241a:	61fb      	str	r3, [r7, #28]
 800241c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002420:	4641      	mov	r1, r8
 8002422:	1851      	adds	r1, r2, r1
 8002424:	6139      	str	r1, [r7, #16]
 8002426:	4649      	mov	r1, r9
 8002428:	414b      	adcs	r3, r1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002438:	4659      	mov	r1, fp
 800243a:	00cb      	lsls	r3, r1, #3
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002442:	4651      	mov	r1, sl
 8002444:	00ca      	lsls	r2, r1, #3
 8002446:	4610      	mov	r0, r2
 8002448:	4619      	mov	r1, r3
 800244a:	4603      	mov	r3, r0
 800244c:	4642      	mov	r2, r8
 800244e:	189b      	adds	r3, r3, r2
 8002450:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002454:	464b      	mov	r3, r9
 8002456:	460a      	mov	r2, r1
 8002458:	eb42 0303 	adc.w	r3, r2, r3
 800245c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	67bb      	str	r3, [r7, #120]	; 0x78
 800246a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800246c:	f04f 0200 	mov.w	r2, #0
 8002470:	f04f 0300 	mov.w	r3, #0
 8002474:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002478:	4649      	mov	r1, r9
 800247a:	008b      	lsls	r3, r1, #2
 800247c:	4641      	mov	r1, r8
 800247e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002482:	4641      	mov	r1, r8
 8002484:	008a      	lsls	r2, r1, #2
 8002486:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800248a:	f7fd feb3 	bl	80001f4 <__aeabi_uldivmod>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	4b39      	ldr	r3, [pc, #228]	; (8002578 <UART_SetConfig+0x4e4>)
 8002494:	fba3 1302 	umull	r1, r3, r3, r2
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	2164      	movs	r1, #100	; 0x64
 800249c:	fb01 f303 	mul.w	r3, r1, r3
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	3332      	adds	r3, #50	; 0x32
 80024a6:	4a34      	ldr	r2, [pc, #208]	; (8002578 <UART_SetConfig+0x4e4>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	095b      	lsrs	r3, r3, #5
 80024ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b2:	441c      	add	r4, r3
 80024b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024b8:	2200      	movs	r2, #0
 80024ba:	673b      	str	r3, [r7, #112]	; 0x70
 80024bc:	677a      	str	r2, [r7, #116]	; 0x74
 80024be:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80024c2:	4642      	mov	r2, r8
 80024c4:	464b      	mov	r3, r9
 80024c6:	1891      	adds	r1, r2, r2
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	415b      	adcs	r3, r3
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024d2:	4641      	mov	r1, r8
 80024d4:	1851      	adds	r1, r2, r1
 80024d6:	6039      	str	r1, [r7, #0]
 80024d8:	4649      	mov	r1, r9
 80024da:	414b      	adcs	r3, r1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80024ea:	4659      	mov	r1, fp
 80024ec:	00cb      	lsls	r3, r1, #3
 80024ee:	4651      	mov	r1, sl
 80024f0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024f4:	4651      	mov	r1, sl
 80024f6:	00ca      	lsls	r2, r1, #3
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	4603      	mov	r3, r0
 80024fe:	4642      	mov	r2, r8
 8002500:	189b      	adds	r3, r3, r2
 8002502:	66bb      	str	r3, [r7, #104]	; 0x68
 8002504:	464b      	mov	r3, r9
 8002506:	460a      	mov	r2, r1
 8002508:	eb42 0303 	adc.w	r3, r2, r3
 800250c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800250e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	663b      	str	r3, [r7, #96]	; 0x60
 8002518:	667a      	str	r2, [r7, #100]	; 0x64
 800251a:	f04f 0200 	mov.w	r2, #0
 800251e:	f04f 0300 	mov.w	r3, #0
 8002522:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002526:	4649      	mov	r1, r9
 8002528:	008b      	lsls	r3, r1, #2
 800252a:	4641      	mov	r1, r8
 800252c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002530:	4641      	mov	r1, r8
 8002532:	008a      	lsls	r2, r1, #2
 8002534:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002538:	f7fd fe5c 	bl	80001f4 <__aeabi_uldivmod>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4b0d      	ldr	r3, [pc, #52]	; (8002578 <UART_SetConfig+0x4e4>)
 8002542:	fba3 1302 	umull	r1, r3, r3, r2
 8002546:	095b      	lsrs	r3, r3, #5
 8002548:	2164      	movs	r1, #100	; 0x64
 800254a:	fb01 f303 	mul.w	r3, r1, r3
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	3332      	adds	r3, #50	; 0x32
 8002554:	4a08      	ldr	r2, [pc, #32]	; (8002578 <UART_SetConfig+0x4e4>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4422      	add	r2, r4
 8002568:	609a      	str	r2, [r3, #8]
}
 800256a:	bf00      	nop
 800256c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002570:	46bd      	mov	sp, r7
 8002572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002576:	bf00      	nop
 8002578:	51eb851f 	.word	0x51eb851f

0800257c <__NVIC_SetPriority>:
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	6039      	str	r1, [r7, #0]
 8002586:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	2b00      	cmp	r3, #0
 800258e:	db0a      	blt.n	80025a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	b2da      	uxtb	r2, r3
 8002594:	490c      	ldr	r1, [pc, #48]	; (80025c8 <__NVIC_SetPriority+0x4c>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	b2d2      	uxtb	r2, r2
 800259e:	440b      	add	r3, r1
 80025a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025a4:	e00a      	b.n	80025bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	4908      	ldr	r1, [pc, #32]	; (80025cc <__NVIC_SetPriority+0x50>)
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f003 030f 	and.w	r3, r3, #15
 80025b2:	3b04      	subs	r3, #4
 80025b4:	0112      	lsls	r2, r2, #4
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	440b      	add	r3, r1
 80025ba:	761a      	strb	r2, [r3, #24]
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000e100 	.word	0xe000e100
 80025cc:	e000ed00 	.word	0xe000ed00

080025d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80025d4:	2100      	movs	r1, #0
 80025d6:	f06f 0004 	mvn.w	r0, #4
 80025da:	f7ff ffcf 	bl	800257c <__NVIC_SetPriority>
#endif
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ea:	f3ef 8305 	mrs	r3, IPSR
 80025ee:	603b      	str	r3, [r7, #0]
  return(result);
 80025f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80025f6:	f06f 0305 	mvn.w	r3, #5
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	e00c      	b.n	8002618 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <osKernelInitialize+0x44>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002606:	4b08      	ldr	r3, [pc, #32]	; (8002628 <osKernelInitialize+0x44>)
 8002608:	2201      	movs	r2, #1
 800260a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	e002      	b.n	8002618 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002618:	687b      	ldr	r3, [r7, #4]
}
 800261a:	4618      	mov	r0, r3
 800261c:	370c      	adds	r7, #12
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	20000168 	.word	0x20000168

0800262c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002632:	f3ef 8305 	mrs	r3, IPSR
 8002636:	603b      	str	r3, [r7, #0]
  return(result);
 8002638:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <osKernelStart+0x1a>
    stat = osErrorISR;
 800263e:	f06f 0305 	mvn.w	r3, #5
 8002642:	607b      	str	r3, [r7, #4]
 8002644:	e010      	b.n	8002668 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <osKernelStart+0x48>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d109      	bne.n	8002662 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800264e:	f7ff ffbf 	bl	80025d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <osKernelStart+0x48>)
 8002654:	2202      	movs	r2, #2
 8002656:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002658:	f001 f9c4 	bl	80039e4 <vTaskStartScheduler>
      stat = osOK;
 800265c:	2300      	movs	r3, #0
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	e002      	b.n	8002668 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002668:	687b      	ldr	r3, [r7, #4]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000168 	.word	0x20000168

08002678 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b08e      	sub	sp, #56	; 0x38
 800267c:	af04      	add	r7, sp, #16
 800267e:	60f8      	str	r0, [r7, #12]
 8002680:	60b9      	str	r1, [r7, #8]
 8002682:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002688:	f3ef 8305 	mrs	r3, IPSR
 800268c:	617b      	str	r3, [r7, #20]
  return(result);
 800268e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002690:	2b00      	cmp	r3, #0
 8002692:	d17e      	bne.n	8002792 <osThreadNew+0x11a>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d07b      	beq.n	8002792 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800269a:	2380      	movs	r3, #128	; 0x80
 800269c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800269e:	2318      	movs	r3, #24
 80026a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80026a2:	2300      	movs	r3, #0
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d045      	beq.n	800273e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d002      	beq.n	80026c0 <osThreadNew+0x48>
        name = attr->name;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d002      	beq.n	80026ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d008      	beq.n	80026e6 <osThreadNew+0x6e>
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	2b38      	cmp	r3, #56	; 0x38
 80026d8:	d805      	bhi.n	80026e6 <osThreadNew+0x6e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <osThreadNew+0x72>
        return (NULL);
 80026e6:	2300      	movs	r3, #0
 80026e8:	e054      	b.n	8002794 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00e      	beq.n	8002720 <osThreadNew+0xa8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b5b      	cmp	r3, #91	; 0x5b
 8002708:	d90a      	bls.n	8002720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	d006      	beq.n	8002720 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d002      	beq.n	8002720 <osThreadNew+0xa8>
        mem = 1;
 800271a:	2301      	movs	r3, #1
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e010      	b.n	8002742 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10c      	bne.n	8002742 <osThreadNew+0xca>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d108      	bne.n	8002742 <osThreadNew+0xca>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d104      	bne.n	8002742 <osThreadNew+0xca>
          mem = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	61bb      	str	r3, [r7, #24]
 800273c:	e001      	b.n	8002742 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d110      	bne.n	800276a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002750:	9202      	str	r2, [sp, #8]
 8002752:	9301      	str	r3, [sp, #4]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 ff9e 	bl	80036a0 <xTaskCreateStatic>
 8002764:	4603      	mov	r3, r0
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e013      	b.n	8002792 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d110      	bne.n	8002792 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	b29a      	uxth	r2, r3
 8002774:	f107 0310 	add.w	r3, r7, #16
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 ffe9 	bl	800375a <xTaskCreate>
 8002788:	4603      	mov	r3, r0
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <osThreadNew+0x11a>
            hTask = NULL;
 800278e:	2300      	movs	r3, #0
 8002790:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002792:	693b      	ldr	r3, [r7, #16]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3728      	adds	r7, #40	; 0x28
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4a07      	ldr	r2, [pc, #28]	; (80027c8 <vApplicationGetIdleTaskMemory+0x2c>)
 80027ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <vApplicationGetIdleTaskMemory+0x30>)
 80027b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	601a      	str	r2, [r3, #0]
}
 80027ba:	bf00      	nop
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	2000016c 	.word	0x2000016c
 80027cc:	200001c8 	.word	0x200001c8

080027d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a07      	ldr	r2, [pc, #28]	; (80027fc <vApplicationGetTimerTaskMemory+0x2c>)
 80027e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	4a06      	ldr	r2, [pc, #24]	; (8002800 <vApplicationGetTimerTaskMemory+0x30>)
 80027e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ee:	601a      	str	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	200003c8 	.word	0x200003c8
 8002800:	20000424 	.word	0x20000424

08002804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f103 0208 	add.w	r2, r3, #8
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f103 0208 	add.w	r2, r3, #8
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f103 0208 	add.w	r2, r3, #8
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
 8002866:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	601a      	str	r2, [r3, #0]
}
 800289a:	bf00      	nop
 800289c:	3714      	adds	r7, #20
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028a6:	b480      	push	{r7}
 80028a8:	b085      	sub	sp, #20
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
 80028ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d103      	bne.n	80028c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e00c      	b.n	80028e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3308      	adds	r3, #8
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e002      	b.n	80028d4 <vListInsert+0x2e>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d2f6      	bcs.n	80028ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	601a      	str	r2, [r3, #0]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6892      	ldr	r2, [r2, #8]
 800292e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6852      	ldr	r2, [r2, #4]
 8002938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	d103      	bne.n	800294c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d10a      	bne.n	8002996 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	f3bf 8f6f 	isb	sy
 800298c:	f3bf 8f4f 	dsb	sy
 8002990:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002992:	bf00      	nop
 8002994:	e7fe      	b.n	8002994 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002996:	f002 fac5 	bl	8004f24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029a6:	fb01 f303 	mul.w	r3, r1, r3
 80029aa:	441a      	add	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2200      	movs	r2, #0
 80029b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c6:	3b01      	subs	r3, #1
 80029c8:	68f9      	ldr	r1, [r7, #12]
 80029ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	441a      	add	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	; 0xff
 80029da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d114      	bne.n	8002a16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d01a      	beq.n	8002a2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3310      	adds	r3, #16
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 fa7d 	bl	8003ef8 <xTaskRemoveFromEventList>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d012      	beq.n	8002a2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a04:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <xQueueGenericReset+0xcc>)
 8002a06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	f3bf 8f6f 	isb	sy
 8002a14:	e009      	b.n	8002a2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3310      	adds	r3, #16
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fef2 	bl	8002804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff feed 	bl	8002804 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a2a:	f002 faab 	bl	8004f84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	e000ed04 	.word	0xe000ed04

08002a3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08e      	sub	sp, #56	; 0x38
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d10a      	bne.n	8002a66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a54:	f383 8811 	msr	BASEPRI, r3
 8002a58:	f3bf 8f6f 	isb	sy
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a62:	bf00      	nop
 8002a64:	e7fe      	b.n	8002a64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d10a      	bne.n	8002a82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a70:	f383 8811 	msr	BASEPRI, r3
 8002a74:	f3bf 8f6f 	isb	sy
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a7e:	bf00      	nop
 8002a80:	e7fe      	b.n	8002a80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d002      	beq.n	8002a8e <xQueueGenericCreateStatic+0x52>
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <xQueueGenericCreateStatic+0x56>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <xQueueGenericCreateStatic+0x58>
 8002a92:	2300      	movs	r3, #0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10a      	bne.n	8002aae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	623b      	str	r3, [r7, #32]
}
 8002aaa:	bf00      	nop
 8002aac:	e7fe      	b.n	8002aac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <xQueueGenericCreateStatic+0x7e>
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <xQueueGenericCreateStatic+0x82>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <xQueueGenericCreateStatic+0x84>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10a      	bne.n	8002ada <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	61fb      	str	r3, [r7, #28]
}
 8002ad6:	bf00      	nop
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002ada:	2350      	movs	r3, #80	; 0x50
 8002adc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b50      	cmp	r3, #80	; 0x50
 8002ae2:	d00a      	beq.n	8002afa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61bb      	str	r3, [r7, #24]
}
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002afa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00d      	beq.n	8002b22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4613      	mov	r3, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	68b9      	ldr	r1, [r7, #8]
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f83f 	bl	8002ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3730      	adds	r7, #48	; 0x30
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b08a      	sub	sp, #40	; 0x28
 8002b30:	af02      	add	r7, sp, #8
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4613      	mov	r3, r2
 8002b38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10a      	bne.n	8002b56 <xQueueGenericCreate+0x2a>
	__asm volatile
 8002b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b44:	f383 8811 	msr	BASEPRI, r3
 8002b48:	f3bf 8f6f 	isb	sy
 8002b4c:	f3bf 8f4f 	dsb	sy
 8002b50:	613b      	str	r3, [r7, #16]
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	fb02 f303 	mul.w	r3, r2, r3
 8002b5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	3350      	adds	r3, #80	; 0x50
 8002b64:	4618      	mov	r0, r3
 8002b66:	f002 faff 	bl	8005168 <pvPortMalloc>
 8002b6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d011      	beq.n	8002b96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	3350      	adds	r3, #80	; 0x50
 8002b7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b84:	79fa      	ldrb	r2, [r7, #7]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	68b9      	ldr	r1, [r7, #8]
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 f805 	bl	8002ba0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002b96:	69bb      	ldr	r3, [r7, #24]
	}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3720      	adds	r7, #32
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
 8002bac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d103      	bne.n	8002bbc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e002      	b.n	8002bc2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002bce:	2101      	movs	r1, #1
 8002bd0:	69b8      	ldr	r0, [r7, #24]
 8002bd2:	f7ff fecb 	bl	800296c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d10a      	bne.n	8002c0c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8002bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfa:	f383 8811 	msr	BASEPRI, r3
 8002bfe:	f3bf 8f6f 	isb	sy
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	613b      	str	r3, [r7, #16]
}
 8002c08:	bf00      	nop
 8002c0a:	e7fe      	b.n	8002c0a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002c0c:	683a      	ldr	r2, [r7, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d90a      	bls.n	8002c2a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c18:	f383 8811 	msr	BASEPRI, r3
 8002c1c:	f3bf 8f6f 	isb	sy
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	60fb      	str	r3, [r7, #12]
}
 8002c26:	bf00      	nop
 8002c28:	e7fe      	b.n	8002c28 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ff7c 	bl	8002b2c <xQueueGenericCreate>
 8002c34:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002c42:	697b      	ldr	r3, [r7, #20]
	}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10a      	bne.n	8002c7e <xQueueGenericSend+0x32>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c7a:	bf00      	nop
 8002c7c:	e7fe      	b.n	8002c7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d103      	bne.n	8002c8c <xQueueGenericSend+0x40>
 8002c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <xQueueGenericSend+0x44>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e000      	b.n	8002c92 <xQueueGenericSend+0x46>
 8002c90:	2300      	movs	r3, #0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d10a      	bne.n	8002cac <xQueueGenericSend+0x60>
	__asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d103      	bne.n	8002cba <xQueueGenericSend+0x6e>
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <xQueueGenericSend+0x72>
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e000      	b.n	8002cc0 <xQueueGenericSend+0x74>
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10a      	bne.n	8002cda <xQueueGenericSend+0x8e>
	__asm volatile
 8002cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc8:	f383 8811 	msr	BASEPRI, r3
 8002ccc:	f3bf 8f6f 	isb	sy
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	623b      	str	r3, [r7, #32]
}
 8002cd6:	bf00      	nop
 8002cd8:	e7fe      	b.n	8002cd8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cda:	f001 facb 	bl	8004274 <xTaskGetSchedulerState>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <xQueueGenericSend+0x9e>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <xQueueGenericSend+0xa2>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericSend+0xa4>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10a      	bne.n	8002d0a <xQueueGenericSend+0xbe>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	61fb      	str	r3, [r7, #28]
}
 8002d06:	bf00      	nop
 8002d08:	e7fe      	b.n	8002d08 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d0a:	f002 f90b 	bl	8004f24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d302      	bcc.n	8002d20 <xQueueGenericSend+0xd4>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d129      	bne.n	8002d74 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d26:	f000 fb4d 	bl	80033c4 <prvCopyDataToQueue>
 8002d2a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d010      	beq.n	8002d56 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	3324      	adds	r3, #36	; 0x24
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f8dd 	bl	8003ef8 <xTaskRemoveFromEventList>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d44:	4b3f      	ldr	r3, [pc, #252]	; (8002e44 <xQueueGenericSend+0x1f8>)
 8002d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	f3bf 8f4f 	dsb	sy
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	e00a      	b.n	8002d6c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d007      	beq.n	8002d6c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d5c:	4b39      	ldr	r3, [pc, #228]	; (8002e44 <xQueueGenericSend+0x1f8>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d6c:	f002 f90a 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e063      	b.n	8002e3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d103      	bne.n	8002d82 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d7a:	f002 f903 	bl	8004f84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e05c      	b.n	8002e3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d88:	f107 0314 	add.w	r3, r7, #20
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f001 f917 	bl	8003fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d92:	2301      	movs	r3, #1
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d96:	f002 f8f5 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d9a:	f000 fe89 	bl	8003ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d9e:	f002 f8c1 	bl	8004f24 <vPortEnterCritical>
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002da8:	b25b      	sxtb	r3, r3
 8002daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dae:	d103      	bne.n	8002db8 <xQueueGenericSend+0x16c>
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dbe:	b25b      	sxtb	r3, r3
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d103      	bne.n	8002dce <xQueueGenericSend+0x182>
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002dce:	f002 f8d9 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dd2:	1d3a      	adds	r2, r7, #4
 8002dd4:	f107 0314 	add.w	r3, r7, #20
 8002dd8:	4611      	mov	r1, r2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f001 f906 	bl	8003fec <xTaskCheckForTimeOut>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d124      	bne.n	8002e30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002de6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002de8:	f000 fbe4 	bl	80035b4 <prvIsQueueFull>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d018      	beq.n	8002e24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002df4:	3310      	adds	r3, #16
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	4611      	mov	r1, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f001 f82c 	bl	8003e58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e02:	f000 fb6f 	bl	80034e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e06:	f000 fe61 	bl	8003acc <xTaskResumeAll>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f47f af7c 	bne.w	8002d0a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <xQueueGenericSend+0x1f8>)
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	f3bf 8f6f 	isb	sy
 8002e22:	e772      	b.n	8002d0a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e26:	f000 fb5d 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e2a:	f000 fe4f 	bl	8003acc <xTaskResumeAll>
 8002e2e:	e76c      	b.n	8002d0a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e32:	f000 fb57 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e36:	f000 fe49 	bl	8003acc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3738      	adds	r7, #56	; 0x38
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	e000ed04 	.word	0xe000ed04

08002e48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b090      	sub	sp, #64	; 0x40
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10a      	bne.n	8002e76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d103      	bne.n	8002e84 <xQueueGenericSendFromISR+0x3c>
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <xQueueGenericSendFromISR+0x40>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <xQueueGenericSendFromISR+0x42>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d103      	bne.n	8002eb2 <xQueueGenericSendFromISR+0x6a>
 8002eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d101      	bne.n	8002eb6 <xQueueGenericSendFromISR+0x6e>
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <xQueueGenericSendFromISR+0x70>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	623b      	str	r3, [r7, #32]
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ed2:	f002 f909 	bl	80050e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ed6:	f3ef 8211 	mrs	r2, BASEPRI
 8002eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ede:	f383 8811 	msr	BASEPRI, r3
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	61fa      	str	r2, [r7, #28]
 8002eec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002eee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ef0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <xQueueGenericSendFromISR+0xbc>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d12f      	bne.n	8002f64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002f1a:	f000 fa53 	bl	80033c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f26:	d112      	bne.n	8002f4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d016      	beq.n	8002f5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f32:	3324      	adds	r3, #36	; 0x24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 ffdf 	bl	8003ef8 <xTaskRemoveFromEventList>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	e007      	b.n	8002f5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002f52:	3301      	adds	r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	b25a      	sxtb	r2, r3
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002f62:	e001      	b.n	8002f68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3740      	adds	r7, #64	; 0x40
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08c      	sub	sp, #48	; 0x30
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d10a      	bne.n	8002fb0 <xQueueReceive+0x30>
	__asm volatile
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	f383 8811 	msr	BASEPRI, r3
 8002fa2:	f3bf 8f6f 	isb	sy
 8002fa6:	f3bf 8f4f 	dsb	sy
 8002faa:	623b      	str	r3, [r7, #32]
}
 8002fac:	bf00      	nop
 8002fae:	e7fe      	b.n	8002fae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d103      	bne.n	8002fbe <xQueueReceive+0x3e>
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueReceive+0x42>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueReceive+0x44>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <xQueueReceive+0x5e>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61fb      	str	r3, [r7, #28]
}
 8002fda:	bf00      	nop
 8002fdc:	e7fe      	b.n	8002fdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fde:	f001 f949 	bl	8004274 <xTaskGetSchedulerState>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d102      	bne.n	8002fee <xQueueReceive+0x6e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <xQueueReceive+0x72>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <xQueueReceive+0x74>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10a      	bne.n	800300e <xQueueReceive+0x8e>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	f383 8811 	msr	BASEPRI, r3
 8003000:	f3bf 8f6f 	isb	sy
 8003004:	f3bf 8f4f 	dsb	sy
 8003008:	61bb      	str	r3, [r7, #24]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800300e:	f001 ff89 	bl	8004f24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003016:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01f      	beq.n	800305e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003022:	f000 fa39 	bl	8003498 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800302e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00f      	beq.n	8003056 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	3310      	adds	r3, #16
 800303a:	4618      	mov	r0, r3
 800303c:	f000 ff5c 	bl	8003ef8 <xTaskRemoveFromEventList>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d007      	beq.n	8003056 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <xQueueReceive+0x1bc>)
 8003048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f3bf 8f4f 	dsb	sy
 8003052:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003056:	f001 ff95 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 800305a:	2301      	movs	r3, #1
 800305c:	e069      	b.n	8003132 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003064:	f001 ff8e 	bl	8004f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003068:	2300      	movs	r3, #0
 800306a:	e062      	b.n	8003132 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	4618      	mov	r0, r3
 8003078:	f000 ffa2 	bl	8003fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800307c:	2301      	movs	r3, #1
 800307e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003080:	f001 ff80 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003084:	f000 fd14 	bl	8003ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003088:	f001 ff4c 	bl	8004f24 <vPortEnterCritical>
 800308c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003092:	b25b      	sxtb	r3, r3
 8003094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003098:	d103      	bne.n	80030a2 <xQueueReceive+0x122>
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030a8:	b25b      	sxtb	r3, r3
 80030aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ae:	d103      	bne.n	80030b8 <xQueueReceive+0x138>
 80030b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030b8:	f001 ff64 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030bc:	1d3a      	adds	r2, r7, #4
 80030be:	f107 0310 	add.w	r3, r7, #16
 80030c2:	4611      	mov	r1, r2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f000 ff91 	bl	8003fec <xTaskCheckForTimeOut>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d123      	bne.n	8003118 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030d2:	f000 fa59 	bl	8003588 <prvIsQueueEmpty>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d017      	beq.n	800310c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	3324      	adds	r3, #36	; 0x24
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f000 feb7 	bl	8003e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80030ec:	f000 f9fa 	bl	80034e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030f0:	f000 fcec 	bl	8003acc <xTaskResumeAll>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d189      	bne.n	800300e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <xQueueReceive+0x1bc>)
 80030fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	e780      	b.n	800300e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800310c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800310e:	f000 f9e9 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003112:	f000 fcdb 	bl	8003acc <xTaskResumeAll>
 8003116:	e77a      	b.n	800300e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800311a:	f000 f9e3 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800311e:	f000 fcd5 	bl	8003acc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003124:	f000 fa30 	bl	8003588 <prvIsQueueEmpty>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	f43f af6f 	beq.w	800300e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003130:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003132:	4618      	mov	r0, r3
 8003134:	3730      	adds	r7, #48	; 0x30
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	e000ed04 	.word	0xe000ed04

08003140 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800314a:	2300      	movs	r3, #0
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003152:	2300      	movs	r3, #0
 8003154:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10a      	bne.n	8003172 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800315c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003160:	f383 8811 	msr	BASEPRI, r3
 8003164:	f3bf 8f6f 	isb	sy
 8003168:	f3bf 8f4f 	dsb	sy
 800316c:	623b      	str	r3, [r7, #32]
}
 800316e:	bf00      	nop
 8003170:	e7fe      	b.n	8003170 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00a      	beq.n	8003190 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800317e:	f383 8811 	msr	BASEPRI, r3
 8003182:	f3bf 8f6f 	isb	sy
 8003186:	f3bf 8f4f 	dsb	sy
 800318a:	61fb      	str	r3, [r7, #28]
}
 800318c:	bf00      	nop
 800318e:	e7fe      	b.n	800318e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003190:	f001 f870 	bl	8004274 <xTaskGetSchedulerState>
 8003194:	4603      	mov	r3, r0
 8003196:	2b00      	cmp	r3, #0
 8003198:	d102      	bne.n	80031a0 <xQueueSemaphoreTake+0x60>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <xQueueSemaphoreTake+0x64>
 80031a0:	2301      	movs	r3, #1
 80031a2:	e000      	b.n	80031a6 <xQueueSemaphoreTake+0x66>
 80031a4:	2300      	movs	r3, #0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10a      	bne.n	80031c0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80031aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ae:	f383 8811 	msr	BASEPRI, r3
 80031b2:	f3bf 8f6f 	isb	sy
 80031b6:	f3bf 8f4f 	dsb	sy
 80031ba:	61bb      	str	r3, [r7, #24]
}
 80031bc:	bf00      	nop
 80031be:	e7fe      	b.n	80031be <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80031c0:	f001 feb0 	bl	8004f24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80031c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d024      	beq.n	800321a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d2:	1e5a      	subs	r2, r3, #1
 80031d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d104      	bne.n	80031ea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031e0:	f001 f9be 	bl	8004560 <pvTaskIncrementMutexHeldCount>
 80031e4:	4602      	mov	r2, r0
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00f      	beq.n	8003212 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031f4:	3310      	adds	r3, #16
 80031f6:	4618      	mov	r0, r3
 80031f8:	f000 fe7e 	bl	8003ef8 <xTaskRemoveFromEventList>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003202:	4b54      	ldr	r3, [pc, #336]	; (8003354 <xQueueSemaphoreTake+0x214>)
 8003204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003212:	f001 feb7 	bl	8004f84 <vPortExitCritical>
				return pdPASS;
 8003216:	2301      	movs	r3, #1
 8003218:	e097      	b.n	800334a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d111      	bne.n	8003244 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	617b      	str	r3, [r7, #20]
}
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800323c:	f001 fea2 	bl	8004f84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003240:	2300      	movs	r3, #0
 8003242:	e082      	b.n	800334a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800324a:	f107 030c 	add.w	r3, r7, #12
 800324e:	4618      	mov	r0, r3
 8003250:	f000 feb6 	bl	8003fc0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003254:	2301      	movs	r3, #1
 8003256:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003258:	f001 fe94 	bl	8004f84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800325c:	f000 fc28 	bl	8003ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003260:	f001 fe60 	bl	8004f24 <vPortEnterCritical>
 8003264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800326a:	b25b      	sxtb	r3, r3
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d103      	bne.n	800327a <xQueueSemaphoreTake+0x13a>
 8003272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800327a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003286:	d103      	bne.n	8003290 <xQueueSemaphoreTake+0x150>
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003290:	f001 fe78 	bl	8004f84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003294:	463a      	mov	r2, r7
 8003296:	f107 030c 	add.w	r3, r7, #12
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fea5 	bl	8003fec <xTaskCheckForTimeOut>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d132      	bne.n	800330e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032aa:	f000 f96d 	bl	8003588 <prvIsQueueEmpty>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d026      	beq.n	8003302 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d109      	bne.n	80032d0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80032bc:	f001 fe32 	bl	8004f24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fff3 	bl	80042b0 <xTaskPriorityInherit>
 80032ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80032cc:	f001 fe5a 	bl	8004f84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	3324      	adds	r3, #36	; 0x24
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4611      	mov	r1, r2
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fdbd 	bl	8003e58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80032e0:	f000 f900 	bl	80034e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032e4:	f000 fbf2 	bl	8003acc <xTaskResumeAll>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f47f af68 	bne.w	80031c0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80032f0:	4b18      	ldr	r3, [pc, #96]	; (8003354 <xQueueSemaphoreTake+0x214>)
 80032f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
 8003300:	e75e      	b.n	80031c0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003304:	f000 f8ee 	bl	80034e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003308:	f000 fbe0 	bl	8003acc <xTaskResumeAll>
 800330c:	e758      	b.n	80031c0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800330e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003310:	f000 f8e8 	bl	80034e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003314:	f000 fbda 	bl	8003acc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800331a:	f000 f935 	bl	8003588 <prvIsQueueEmpty>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	f43f af4d 	beq.w	80031c0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00d      	beq.n	8003348 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800332c:	f001 fdfa 	bl	8004f24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003330:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003332:	f000 f82f 	bl	8003394 <prvGetDisinheritPriorityAfterTimeout>
 8003336:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800333e:	4618      	mov	r0, r3
 8003340:	f001 f88c 	bl	800445c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003344:	f001 fe1e 	bl	8004f84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003348:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800334a:	4618      	mov	r0, r3
 800334c:	3738      	adds	r7, #56	; 0x38
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10a      	bne.n	800337c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	60bb      	str	r3, [r7, #8]
}
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800337c:	f001 fdd2 	bl	8004f24 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003384:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003386:	f001 fdfd 	bl	8004f84 <vPortExitCritical>

	return uxReturn;
 800338a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d006      	beq.n	80033b2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e001      	b.n	80033b6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80033b6:	68fb      	ldr	r3, [r7, #12]
	}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d14d      	bne.n	8003486 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 ffc6 	bl	8004380 <xTaskPriorityDisinherit>
 80033f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	e043      	b.n	8003486 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d119      	bne.n	8003438 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6858      	ldr	r0, [r3, #4]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	461a      	mov	r2, r3
 800340e:	68b9      	ldr	r1, [r7, #8]
 8003410:	f002 f8be 	bl	8005590 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	441a      	add	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685a      	ldr	r2, [r3, #4]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	429a      	cmp	r2, r3
 800342c:	d32b      	bcc.n	8003486 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	e026      	b.n	8003486 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68d8      	ldr	r0, [r3, #12]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003440:	461a      	mov	r2, r3
 8003442:	68b9      	ldr	r1, [r7, #8]
 8003444:	f002 f8a4 	bl	8005590 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	425b      	negs	r3, r3
 8003452:	441a      	add	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d207      	bcs.n	8003474 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346c:	425b      	negs	r3, r3
 800346e:	441a      	add	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d105      	bne.n	8003486 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d002      	beq.n	8003486 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	3b01      	subs	r3, #1
 8003484:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800348e:	697b      	ldr	r3, [r7, #20]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3718      	adds	r7, #24
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d018      	beq.n	80034dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	441a      	add	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d303      	bcc.n	80034cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	461a      	mov	r2, r3
 80034d6:	6838      	ldr	r0, [r7, #0]
 80034d8:	f002 f85a 	bl	8005590 <memcpy>
	}
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034ec:	f001 fd1a 	bl	8004f24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034f8:	e011      	b.n	800351e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d012      	beq.n	8003528 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	3324      	adds	r3, #36	; 0x24
 8003506:	4618      	mov	r0, r3
 8003508:	f000 fcf6 	bl	8003ef8 <xTaskRemoveFromEventList>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003512:	f000 fdcd 	bl	80040b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	3b01      	subs	r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	2b00      	cmp	r3, #0
 8003524:	dce9      	bgt.n	80034fa <prvUnlockQueue+0x16>
 8003526:	e000      	b.n	800352a <prvUnlockQueue+0x46>
					break;
 8003528:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	22ff      	movs	r2, #255	; 0xff
 800352e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003532:	f001 fd27 	bl	8004f84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003536:	f001 fcf5 	bl	8004f24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003540:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003542:	e011      	b.n	8003568 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d012      	beq.n	8003572 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	3310      	adds	r3, #16
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fcd1 	bl	8003ef8 <xTaskRemoveFromEventList>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800355c:	f000 fda8 	bl	80040b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003560:	7bbb      	ldrb	r3, [r7, #14]
 8003562:	3b01      	subs	r3, #1
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800356c:	2b00      	cmp	r3, #0
 800356e:	dce9      	bgt.n	8003544 <prvUnlockQueue+0x60>
 8003570:	e000      	b.n	8003574 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003572:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800357c:	f001 fd02 	bl	8004f84 <vPortExitCritical>
}
 8003580:	bf00      	nop
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003590:	f001 fcc8 	bl	8004f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d102      	bne.n	80035a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800359c:	2301      	movs	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e001      	b.n	80035a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035a6:	f001 fced 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80035bc:	f001 fcb2 	bl	8004f24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d102      	bne.n	80035d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035cc:	2301      	movs	r3, #1
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e001      	b.n	80035d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035d6:	f001 fcd5 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 80035da:	68fb      	ldr	r3, [r7, #12]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ee:	2300      	movs	r3, #0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	e014      	b.n	800361e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035f4:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <vQueueAddToRegistry+0x50>)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003600:	490c      	ldr	r1, [pc, #48]	; (8003634 <vQueueAddToRegistry+0x50>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	683a      	ldr	r2, [r7, #0]
 8003606:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800360a:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <vQueueAddToRegistry+0x50>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003616:	e006      	b.n	8003626 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3301      	adds	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b07      	cmp	r3, #7
 8003622:	d9e7      	bls.n	80035f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	20000824 	.word	0x20000824

08003638 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003648:	f001 fc6c 	bl	8004f24 <vPortEnterCritical>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003652:	b25b      	sxtb	r3, r3
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d103      	bne.n	8003662 <vQueueWaitForMessageRestricted+0x2a>
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003668:	b25b      	sxtb	r3, r3
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d103      	bne.n	8003678 <vQueueWaitForMessageRestricted+0x40>
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003678:	f001 fc84 	bl	8004f84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3324      	adds	r3, #36	; 0x24
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	68b9      	ldr	r1, [r7, #8]
 800368c:	4618      	mov	r0, r3
 800368e:	f000 fc07 	bl	8003ea0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003692:	6978      	ldr	r0, [r7, #20]
 8003694:	f7ff ff26 	bl	80034e4 <prvUnlockQueue>
	}
 8003698:	bf00      	nop
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	; 0x38
 80036a4:	af04      	add	r7, sp, #16
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	e7fe      	b.n	80036c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61fb      	str	r3, [r7, #28]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036e6:	235c      	movs	r3, #92	; 0x5c
 80036e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b5c      	cmp	r3, #92	; 0x5c
 80036ee:	d00a      	beq.n	8003706 <xTaskCreateStatic+0x66>
	__asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	61bb      	str	r3, [r7, #24]
}
 8003702:	bf00      	nop
 8003704:	e7fe      	b.n	8003704 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003706:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d01e      	beq.n	800374c <xTaskCreateStatic+0xac>
 800370e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003710:	2b00      	cmp	r3, #0
 8003712:	d01b      	beq.n	800374c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800371c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003720:	2202      	movs	r2, #2
 8003722:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003726:	2300      	movs	r3, #0
 8003728:	9303      	str	r3, [sp, #12]
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	9302      	str	r3, [sp, #8]
 800372e:	f107 0314 	add.w	r3, r7, #20
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f850 	bl	80037e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003744:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003746:	f000 f8dd 	bl	8003904 <prvAddNewTaskToReadyList>
 800374a:	e001      	b.n	8003750 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003750:	697b      	ldr	r3, [r7, #20]
	}
 8003752:	4618      	mov	r0, r3
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800375a:	b580      	push	{r7, lr}
 800375c:	b08c      	sub	sp, #48	; 0x30
 800375e:	af04      	add	r7, sp, #16
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800376a:	88fb      	ldrh	r3, [r7, #6]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f001 fcfa 	bl	8005168 <pvPortMalloc>
 8003774:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00e      	beq.n	800379a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800377c:	205c      	movs	r0, #92	; 0x5c
 800377e:	f001 fcf3 	bl	8005168 <pvPortMalloc>
 8003782:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
 8003790:	e005      	b.n	800379e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f001 fdb4 	bl	8005300 <vPortFree>
 8003798:	e001      	b.n	800379e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800379a:	2300      	movs	r3, #0
 800379c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d017      	beq.n	80037d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	2300      	movs	r3, #0
 80037b0:	9303      	str	r3, [sp, #12]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	9302      	str	r3, [sp, #8]
 80037b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f80e 	bl	80037e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037c8:	69f8      	ldr	r0, [r7, #28]
 80037ca:	f000 f89b 	bl	8003904 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037ce:	2301      	movs	r3, #1
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e002      	b.n	80037da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037da:	69bb      	ldr	r3, [r7, #24]
	}
 80037dc:	4618      	mov	r0, r3
 80037de:	3720      	adds	r7, #32
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	461a      	mov	r2, r3
 80037fc:	21a5      	movs	r1, #165	; 0xa5
 80037fe:	f001 fed5 	bl	80055ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800380c:	3b01      	subs	r3, #1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	f023 0307 	bic.w	r3, r3, #7
 800381a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382a:	f383 8811 	msr	BASEPRI, r3
 800382e:	f3bf 8f6f 	isb	sy
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	617b      	str	r3, [r7, #20]
}
 8003838:	bf00      	nop
 800383a:	e7fe      	b.n	800383a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01f      	beq.n	8003882 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e012      	b.n	800386e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	4413      	add	r3, r2
 800384e:	7819      	ldrb	r1, [r3, #0]
 8003850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	3334      	adds	r3, #52	; 0x34
 8003858:	460a      	mov	r2, r1
 800385a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d006      	beq.n	8003876 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	3301      	adds	r3, #1
 800386c:	61fb      	str	r3, [r7, #28]
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d9e9      	bls.n	8003848 <prvInitialiseNewTask+0x64>
 8003874:	e000      	b.n	8003878 <prvInitialiseNewTask+0x94>
			{
				break;
 8003876:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	e003      	b.n	800388a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800388c:	2b37      	cmp	r3, #55	; 0x37
 800388e:	d901      	bls.n	8003894 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003890:	2337      	movs	r3, #55	; 0x37
 8003892:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003898:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800389a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800389c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800389e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	3304      	adds	r3, #4
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fe ffca 	bl	8002844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	3318      	adds	r3, #24
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe ffc5 	bl	8002844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80038c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d2:	2200      	movs	r2, #0
 80038d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	68f9      	ldr	r1, [r7, #12]
 80038e2:	69b8      	ldr	r0, [r7, #24]
 80038e4:	f001 f9f2 	bl	8004ccc <pxPortInitialiseStack>
 80038e8:	4602      	mov	r2, r0
 80038ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038fa:	bf00      	nop
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800390c:	f001 fb0a 	bl	8004f24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003910:	4b2d      	ldr	r3, [pc, #180]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a2c      	ldr	r2, [pc, #176]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 8003918:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800391a:	4b2c      	ldr	r3, [pc, #176]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003922:	4a2a      	ldr	r2, [pc, #168]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003928:	4b27      	ldr	r3, [pc, #156]	; (80039c8 <prvAddNewTaskToReadyList+0xc4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d110      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003930:	f000 fbe2 	bl	80040f8 <prvInitialiseTaskLists>
 8003934:	e00d      	b.n	8003952 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003936:	4b26      	ldr	r3, [pc, #152]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800393e:	4b23      	ldr	r3, [pc, #140]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	429a      	cmp	r2, r3
 800394a:	d802      	bhi.n	8003952 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003952:	4b20      	ldr	r3, [pc, #128]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3301      	adds	r3, #1
 8003958:	4a1e      	ldr	r2, [pc, #120]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800395c:	4b1d      	ldr	r3, [pc, #116]	; (80039d4 <prvAddNewTaskToReadyList+0xd0>)
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003968:	4b1b      	ldr	r3, [pc, #108]	; (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	429a      	cmp	r2, r3
 800396e:	d903      	bls.n	8003978 <prvAddNewTaskToReadyList+0x74>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	4a18      	ldr	r2, [pc, #96]	; (80039d8 <prvAddNewTaskToReadyList+0xd4>)
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800397c:	4613      	mov	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	4413      	add	r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4a15      	ldr	r2, [pc, #84]	; (80039dc <prvAddNewTaskToReadyList+0xd8>)
 8003986:	441a      	add	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3304      	adds	r3, #4
 800398c:	4619      	mov	r1, r3
 800398e:	4610      	mov	r0, r2
 8003990:	f7fe ff65 	bl	800285e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003994:	f001 faf6 	bl	8004f84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003998:	4b0d      	ldr	r3, [pc, #52]	; (80039d0 <prvAddNewTaskToReadyList+0xcc>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <prvAddNewTaskToReadyList+0xc8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d207      	bcs.n	80039be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80039ae:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <prvAddNewTaskToReadyList+0xdc>)
 80039b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f3bf 8f4f 	dsb	sy
 80039ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000d38 	.word	0x20000d38
 80039cc:	20000864 	.word	0x20000864
 80039d0:	20000d44 	.word	0x20000d44
 80039d4:	20000d54 	.word	0x20000d54
 80039d8:	20000d40 	.word	0x20000d40
 80039dc:	20000868 	.word	0x20000868
 80039e0:	e000ed04 	.word	0xe000ed04

080039e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08a      	sub	sp, #40	; 0x28
 80039e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80039f2:	463a      	mov	r2, r7
 80039f4:	1d39      	adds	r1, r7, #4
 80039f6:	f107 0308 	add.w	r3, r7, #8
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fece 	bl	800279c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a00:	6839      	ldr	r1, [r7, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68ba      	ldr	r2, [r7, #8]
 8003a06:	9202      	str	r2, [sp, #8]
 8003a08:	9301      	str	r3, [sp, #4]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	460a      	mov	r2, r1
 8003a12:	4921      	ldr	r1, [pc, #132]	; (8003a98 <vTaskStartScheduler+0xb4>)
 8003a14:	4821      	ldr	r0, [pc, #132]	; (8003a9c <vTaskStartScheduler+0xb8>)
 8003a16:	f7ff fe43 	bl	80036a0 <xTaskCreateStatic>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	4a20      	ldr	r2, [pc, #128]	; (8003aa0 <vTaskStartScheduler+0xbc>)
 8003a1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a20:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <vTaskStartScheduler+0xbc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e001      	b.n	8003a32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d102      	bne.n	8003a3e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a38:	f000 fdfa 	bl	8004630 <xTimerCreateTimerTask>
 8003a3c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d116      	bne.n	8003a72 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a48:	f383 8811 	msr	BASEPRI, r3
 8003a4c:	f3bf 8f6f 	isb	sy
 8003a50:	f3bf 8f4f 	dsb	sy
 8003a54:	613b      	str	r3, [r7, #16]
}
 8003a56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <vTaskStartScheduler+0xc0>)
 8003a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <vTaskStartScheduler+0xc4>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a66:	4b11      	ldr	r3, [pc, #68]	; (8003aac <vTaskStartScheduler+0xc8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a6c:	f001 f9b8 	bl	8004de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a70:	e00e      	b.n	8003a90 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a78:	d10a      	bne.n	8003a90 <vTaskStartScheduler+0xac>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60fb      	str	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <vTaskStartScheduler+0xaa>
}
 8003a90:	bf00      	nop
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	08006058 	.word	0x08006058
 8003a9c:	080040c9 	.word	0x080040c9
 8003aa0:	20000d5c 	.word	0x20000d5c
 8003aa4:	20000d58 	.word	0x20000d58
 8003aa8:	20000d44 	.word	0x20000d44
 8003aac:	20000d3c 	.word	0x20000d3c

08003ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ab4:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <vTaskSuspendAll+0x18>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3301      	adds	r3, #1
 8003aba:	4a03      	ldr	r2, [pc, #12]	; (8003ac8 <vTaskSuspendAll+0x18>)
 8003abc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003abe:	bf00      	nop
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	20000d60 	.word	0x20000d60

08003acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ada:	4b42      	ldr	r3, [pc, #264]	; (8003be4 <xTaskResumeAll+0x118>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10a      	bne.n	8003af8 <xTaskResumeAll+0x2c>
	__asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	603b      	str	r3, [r7, #0]
}
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003af8:	f001 fa14 	bl	8004f24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <xTaskResumeAll+0x118>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3b01      	subs	r3, #1
 8003b02:	4a38      	ldr	r2, [pc, #224]	; (8003be4 <xTaskResumeAll+0x118>)
 8003b04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <xTaskResumeAll+0x118>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d162      	bne.n	8003bd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b0e:	4b36      	ldr	r3, [pc, #216]	; (8003be8 <xTaskResumeAll+0x11c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d05e      	beq.n	8003bd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b16:	e02f      	b.n	8003b78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b18:	4b34      	ldr	r3, [pc, #208]	; (8003bec <xTaskResumeAll+0x120>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	3318      	adds	r3, #24
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fef7 	bl	8002918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fef2 	bl	8002918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b38:	4b2d      	ldr	r3, [pc, #180]	; (8003bf0 <xTaskResumeAll+0x124>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d903      	bls.n	8003b48 <xTaskResumeAll+0x7c>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b44:	4a2a      	ldr	r2, [pc, #168]	; (8003bf0 <xTaskResumeAll+0x124>)
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4a27      	ldr	r2, [pc, #156]	; (8003bf4 <xTaskResumeAll+0x128>)
 8003b56:	441a      	add	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4610      	mov	r0, r2
 8003b60:	f7fe fe7d 	bl	800285e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <xTaskResumeAll+0x12c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d302      	bcc.n	8003b78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003b72:	4b22      	ldr	r3, [pc, #136]	; (8003bfc <xTaskResumeAll+0x130>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b78:	4b1c      	ldr	r3, [pc, #112]	; (8003bec <xTaskResumeAll+0x120>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1cb      	bne.n	8003b18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b86:	f000 fb55 	bl	8004234 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <xTaskResumeAll+0x134>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d010      	beq.n	8003bb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003b96:	f000 f847 	bl	8003c28 <xTaskIncrementTick>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003ba0:	4b16      	ldr	r3, [pc, #88]	; (8003bfc <xTaskResumeAll+0x130>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f1      	bne.n	8003b96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003bb2:	4b13      	ldr	r3, [pc, #76]	; (8003c00 <xTaskResumeAll+0x134>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bb8:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <xTaskResumeAll+0x130>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bc4:	4b0f      	ldr	r3, [pc, #60]	; (8003c04 <xTaskResumeAll+0x138>)
 8003bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bca:	601a      	str	r2, [r3, #0]
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bd4:	f001 f9d6 	bl	8004f84 <vPortExitCritical>

	return xAlreadyYielded;
 8003bd8:	68bb      	ldr	r3, [r7, #8]
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000d60 	.word	0x20000d60
 8003be8:	20000d38 	.word	0x20000d38
 8003bec:	20000cf8 	.word	0x20000cf8
 8003bf0:	20000d40 	.word	0x20000d40
 8003bf4:	20000868 	.word	0x20000868
 8003bf8:	20000864 	.word	0x20000864
 8003bfc:	20000d4c 	.word	0x20000d4c
 8003c00:	20000d48 	.word	0x20000d48
 8003c04:	e000ed04 	.word	0xe000ed04

08003c08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <xTaskGetTickCount+0x1c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c14:	687b      	ldr	r3, [r7, #4]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000d3c 	.word	0x20000d3c

08003c28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c32:	4b4f      	ldr	r3, [pc, #316]	; (8003d70 <xTaskIncrementTick+0x148>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f040 808f 	bne.w	8003d5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c3c:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <xTaskIncrementTick+0x14c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3301      	adds	r3, #1
 8003c42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c44:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <xTaskIncrementTick+0x14c>)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d120      	bne.n	8003c92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c50:	4b49      	ldr	r3, [pc, #292]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <xTaskIncrementTick+0x48>
	__asm volatile
 8003c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5e:	f383 8811 	msr	BASEPRI, r3
 8003c62:	f3bf 8f6f 	isb	sy
 8003c66:	f3bf 8f4f 	dsb	sy
 8003c6a:	603b      	str	r3, [r7, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	e7fe      	b.n	8003c6e <xTaskIncrementTick+0x46>
 8003c70:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b41      	ldr	r3, [pc, #260]	; (8003d7c <xTaskIncrementTick+0x154>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a3f      	ldr	r2, [pc, #252]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <xTaskIncrementTick+0x154>)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6013      	str	r3, [r2, #0]
 8003c84:	4b3e      	ldr	r3, [pc, #248]	; (8003d80 <xTaskIncrementTick+0x158>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	4a3d      	ldr	r2, [pc, #244]	; (8003d80 <xTaskIncrementTick+0x158>)
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	f000 fad1 	bl	8004234 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003c92:	4b3c      	ldr	r3, [pc, #240]	; (8003d84 <xTaskIncrementTick+0x15c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d349      	bcc.n	8003d30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c9c:	4b36      	ldr	r3, [pc, #216]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca6:	4b37      	ldr	r3, [pc, #220]	; (8003d84 <xTaskIncrementTick+0x15c>)
 8003ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cac:	601a      	str	r2, [r3, #0]
					break;
 8003cae:	e03f      	b.n	8003d30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cb0:	4b31      	ldr	r3, [pc, #196]	; (8003d78 <xTaskIncrementTick+0x150>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d203      	bcs.n	8003cd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cc8:	4a2e      	ldr	r2, [pc, #184]	; (8003d84 <xTaskIncrementTick+0x15c>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003cce:	e02f      	b.n	8003d30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	3304      	adds	r3, #4
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f7fe fe1f 	bl	8002918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d004      	beq.n	8003cec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	3318      	adds	r3, #24
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fe fe16 	bl	8002918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4b25      	ldr	r3, [pc, #148]	; (8003d88 <xTaskIncrementTick+0x160>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d903      	bls.n	8003d00 <xTaskIncrementTick+0xd8>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <xTaskIncrementTick+0x160>)
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <xTaskIncrementTick+0x164>)
 8003d0e:	441a      	add	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fe fda1 	bl	800285e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <xTaskIncrementTick+0x168>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d3b8      	bcc.n	8003c9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d2e:	e7b5      	b.n	8003c9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d30:	4b17      	ldr	r3, [pc, #92]	; (8003d90 <xTaskIncrementTick+0x168>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d36:	4915      	ldr	r1, [pc, #84]	; (8003d8c <xTaskIncrementTick+0x164>)
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d901      	bls.n	8003d4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d4c:	4b11      	ldr	r3, [pc, #68]	; (8003d94 <xTaskIncrementTick+0x16c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003d54:	2301      	movs	r3, #1
 8003d56:	617b      	str	r3, [r7, #20]
 8003d58:	e004      	b.n	8003d64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d5a:	4b0f      	ldr	r3, [pc, #60]	; (8003d98 <xTaskIncrementTick+0x170>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3301      	adds	r3, #1
 8003d60:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <xTaskIncrementTick+0x170>)
 8003d62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d64:	697b      	ldr	r3, [r7, #20]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3718      	adds	r7, #24
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	20000d60 	.word	0x20000d60
 8003d74:	20000d3c 	.word	0x20000d3c
 8003d78:	20000cf0 	.word	0x20000cf0
 8003d7c:	20000cf4 	.word	0x20000cf4
 8003d80:	20000d50 	.word	0x20000d50
 8003d84:	20000d58 	.word	0x20000d58
 8003d88:	20000d40 	.word	0x20000d40
 8003d8c:	20000868 	.word	0x20000868
 8003d90:	20000864 	.word	0x20000864
 8003d94:	20000d4c 	.word	0x20000d4c
 8003d98:	20000d48 	.word	0x20000d48

08003d9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003da2:	4b28      	ldr	r3, [pc, #160]	; (8003e44 <vTaskSwitchContext+0xa8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d003      	beq.n	8003db2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <vTaskSwitchContext+0xac>)
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003db0:	e041      	b.n	8003e36 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003db2:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <vTaskSwitchContext+0xac>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003db8:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <vTaskSwitchContext+0xb0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
 8003dbe:	e010      	b.n	8003de2 <vTaskSwitchContext+0x46>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10a      	bne.n	8003ddc <vTaskSwitchContext+0x40>
	__asm volatile
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	607b      	str	r3, [r7, #4]
}
 8003dd8:	bf00      	nop
 8003dda:	e7fe      	b.n	8003dda <vTaskSwitchContext+0x3e>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	491b      	ldr	r1, [pc, #108]	; (8003e50 <vTaskSwitchContext+0xb4>)
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	4613      	mov	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0e4      	beq.n	8003dc0 <vTaskSwitchContext+0x24>
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4413      	add	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4a13      	ldr	r2, [pc, #76]	; (8003e50 <vTaskSwitchContext+0xb4>)
 8003e02:	4413      	add	r3, r2
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	685a      	ldr	r2, [r3, #4]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	605a      	str	r2, [r3, #4]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3308      	adds	r3, #8
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d104      	bne.n	8003e26 <vTaskSwitchContext+0x8a>
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a09      	ldr	r2, [pc, #36]	; (8003e54 <vTaskSwitchContext+0xb8>)
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	4a06      	ldr	r2, [pc, #24]	; (8003e4c <vTaskSwitchContext+0xb0>)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6013      	str	r3, [r2, #0]
}
 8003e36:	bf00      	nop
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000d60 	.word	0x20000d60
 8003e48:	20000d4c 	.word	0x20000d4c
 8003e4c:	20000d40 	.word	0x20000d40
 8003e50:	20000868 	.word	0x20000868
 8003e54:	20000864 	.word	0x20000864

08003e58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6c:	f383 8811 	msr	BASEPRI, r3
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	f3bf 8f4f 	dsb	sy
 8003e78:	60fb      	str	r3, [r7, #12]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <vTaskPlaceOnEventList+0x44>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3318      	adds	r3, #24
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fe fd0d 	bl	80028a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	6838      	ldr	r0, [r7, #0]
 8003e90:	f000 fb7a 	bl	8004588 <prvAddCurrentTaskToDelayedList>
}
 8003e94:	bf00      	nop
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	20000864 	.word	0x20000864

08003ea0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d10a      	bne.n	8003ec8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	617b      	str	r3, [r7, #20]
}
 8003ec4:	bf00      	nop
 8003ec6:	e7fe      	b.n	8003ec6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ec8:	4b0a      	ldr	r3, [pc, #40]	; (8003ef4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3318      	adds	r3, #24
 8003ece:	4619      	mov	r1, r3
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7fe fcc4 	bl	800285e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	68b8      	ldr	r0, [r7, #8]
 8003ee6:	f000 fb4f 	bl	8004588 <prvAddCurrentTaskToDelayedList>
	}
 8003eea:	bf00      	nop
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	20000864 	.word	0x20000864

08003ef8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10a      	bne.n	8003f24 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60fb      	str	r3, [r7, #12]
}
 8003f20:	bf00      	nop
 8003f22:	e7fe      	b.n	8003f22 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7fe fcf5 	bl	8002918 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <xTaskRemoveFromEventList+0xb0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d11d      	bne.n	8003f72 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe fcec 	bl	8002918 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f44:	4b19      	ldr	r3, [pc, #100]	; (8003fac <xTaskRemoveFromEventList+0xb4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d903      	bls.n	8003f54 <xTaskRemoveFromEventList+0x5c>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	4a16      	ldr	r2, [pc, #88]	; (8003fac <xTaskRemoveFromEventList+0xb4>)
 8003f52:	6013      	str	r3, [r2, #0]
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f58:	4613      	mov	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	4413      	add	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	4a13      	ldr	r2, [pc, #76]	; (8003fb0 <xTaskRemoveFromEventList+0xb8>)
 8003f62:	441a      	add	r2, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3304      	adds	r3, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4610      	mov	r0, r2
 8003f6c:	f7fe fc77 	bl	800285e <vListInsertEnd>
 8003f70:	e005      	b.n	8003f7e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	3318      	adds	r3, #24
 8003f76:	4619      	mov	r1, r3
 8003f78:	480e      	ldr	r0, [pc, #56]	; (8003fb4 <xTaskRemoveFromEventList+0xbc>)
 8003f7a:	f7fe fc70 	bl	800285e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <xTaskRemoveFromEventList+0xc0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d905      	bls.n	8003f98 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <xTaskRemoveFromEventList+0xc4>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	e001      	b.n	8003f9c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003f9c:	697b      	ldr	r3, [r7, #20]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3718      	adds	r7, #24
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	20000d60 	.word	0x20000d60
 8003fac:	20000d40 	.word	0x20000d40
 8003fb0:	20000868 	.word	0x20000868
 8003fb4:	20000cf8 	.word	0x20000cf8
 8003fb8:	20000864 	.word	0x20000864
 8003fbc:	20000d4c 	.word	0x20000d4c

08003fc0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fc8:	4b06      	ldr	r3, [pc, #24]	; (8003fe4 <vTaskInternalSetTimeOutState+0x24>)
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fd0:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <vTaskInternalSetTimeOutState+0x28>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	605a      	str	r2, [r3, #4]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	20000d50 	.word	0x20000d50
 8003fe8:	20000d3c 	.word	0x20000d3c

08003fec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004000:	f383 8811 	msr	BASEPRI, r3
 8004004:	f3bf 8f6f 	isb	sy
 8004008:	f3bf 8f4f 	dsb	sy
 800400c:	613b      	str	r3, [r7, #16]
}
 800400e:	bf00      	nop
 8004010:	e7fe      	b.n	8004010 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10a      	bne.n	800402e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	60fb      	str	r3, [r7, #12]
}
 800402a:	bf00      	nop
 800402c:	e7fe      	b.n	800402c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800402e:	f000 ff79 	bl	8004f24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <xTaskCheckForTimeOut+0xbc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404a:	d102      	bne.n	8004052 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	61fb      	str	r3, [r7, #28]
 8004050:	e023      	b.n	800409a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	4b15      	ldr	r3, [pc, #84]	; (80040ac <xTaskCheckForTimeOut+0xc0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	429a      	cmp	r2, r3
 800405c:	d007      	beq.n	800406e <xTaskCheckForTimeOut+0x82>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	429a      	cmp	r2, r3
 8004066:	d302      	bcc.n	800406e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	e015      	b.n	800409a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d20b      	bcs.n	8004090 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	1ad2      	subs	r2, r2, r3
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff ff9b 	bl	8003fc0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
 800408e:	e004      	b.n	800409a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004096:	2301      	movs	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800409a:	f000 ff73 	bl	8004f84 <vPortExitCritical>

	return xReturn;
 800409e:	69fb      	ldr	r3, [r7, #28]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3720      	adds	r7, #32
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20000d3c 	.word	0x20000d3c
 80040ac:	20000d50 	.word	0x20000d50

080040b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <vTaskMissedYield+0x14>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
}
 80040ba:	bf00      	nop
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr
 80040c4:	20000d4c 	.word	0x20000d4c

080040c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040d0:	f000 f852 	bl	8004178 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <prvIdleTask+0x28>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d9f9      	bls.n	80040d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <prvIdleTask+0x2c>)
 80040de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80040ec:	e7f0      	b.n	80040d0 <prvIdleTask+0x8>
 80040ee:	bf00      	nop
 80040f0:	20000868 	.word	0x20000868
 80040f4:	e000ed04 	.word	0xe000ed04

080040f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040fe:	2300      	movs	r3, #0
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	e00c      	b.n	800411e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4a12      	ldr	r2, [pc, #72]	; (8004158 <prvInitialiseTaskLists+0x60>)
 8004110:	4413      	add	r3, r2
 8004112:	4618      	mov	r0, r3
 8004114:	f7fe fb76 	bl	8002804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	3301      	adds	r3, #1
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2b37      	cmp	r3, #55	; 0x37
 8004122:	d9ef      	bls.n	8004104 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004124:	480d      	ldr	r0, [pc, #52]	; (800415c <prvInitialiseTaskLists+0x64>)
 8004126:	f7fe fb6d 	bl	8002804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800412a:	480d      	ldr	r0, [pc, #52]	; (8004160 <prvInitialiseTaskLists+0x68>)
 800412c:	f7fe fb6a 	bl	8002804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004130:	480c      	ldr	r0, [pc, #48]	; (8004164 <prvInitialiseTaskLists+0x6c>)
 8004132:	f7fe fb67 	bl	8002804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004136:	480c      	ldr	r0, [pc, #48]	; (8004168 <prvInitialiseTaskLists+0x70>)
 8004138:	f7fe fb64 	bl	8002804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800413c:	480b      	ldr	r0, [pc, #44]	; (800416c <prvInitialiseTaskLists+0x74>)
 800413e:	f7fe fb61 	bl	8002804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <prvInitialiseTaskLists+0x78>)
 8004144:	4a05      	ldr	r2, [pc, #20]	; (800415c <prvInitialiseTaskLists+0x64>)
 8004146:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004148:	4b0a      	ldr	r3, [pc, #40]	; (8004174 <prvInitialiseTaskLists+0x7c>)
 800414a:	4a05      	ldr	r2, [pc, #20]	; (8004160 <prvInitialiseTaskLists+0x68>)
 800414c:	601a      	str	r2, [r3, #0]
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000868 	.word	0x20000868
 800415c:	20000cc8 	.word	0x20000cc8
 8004160:	20000cdc 	.word	0x20000cdc
 8004164:	20000cf8 	.word	0x20000cf8
 8004168:	20000d0c 	.word	0x20000d0c
 800416c:	20000d24 	.word	0x20000d24
 8004170:	20000cf0 	.word	0x20000cf0
 8004174:	20000cf4 	.word	0x20000cf4

08004178 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800417e:	e019      	b.n	80041b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004180:	f000 fed0 	bl	8004f24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004184:	4b10      	ldr	r3, [pc, #64]	; (80041c8 <prvCheckTasksWaitingTermination+0x50>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	4618      	mov	r0, r3
 8004192:	f7fe fbc1 	bl	8002918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004196:	4b0d      	ldr	r3, [pc, #52]	; (80041cc <prvCheckTasksWaitingTermination+0x54>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	3b01      	subs	r3, #1
 800419c:	4a0b      	ldr	r2, [pc, #44]	; (80041cc <prvCheckTasksWaitingTermination+0x54>)
 800419e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041a0:	4b0b      	ldr	r3, [pc, #44]	; (80041d0 <prvCheckTasksWaitingTermination+0x58>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	4a0a      	ldr	r2, [pc, #40]	; (80041d0 <prvCheckTasksWaitingTermination+0x58>)
 80041a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041aa:	f000 feeb 	bl	8004f84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f810 	bl	80041d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <prvCheckTasksWaitingTermination+0x58>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1e1      	bne.n	8004180 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041bc:	bf00      	nop
 80041be:	bf00      	nop
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000d0c 	.word	0x20000d0c
 80041cc:	20000d38 	.word	0x20000d38
 80041d0:	20000d20 	.word	0x20000d20

080041d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d108      	bne.n	80041f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ea:	4618      	mov	r0, r3
 80041ec:	f001 f888 	bl	8005300 <vPortFree>
				vPortFree( pxTCB );
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f001 f885 	bl	8005300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80041f6:	e018      	b.n	800422a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d103      	bne.n	800420a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f001 f87c 	bl	8005300 <vPortFree>
	}
 8004208:	e00f      	b.n	800422a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004210:	2b02      	cmp	r3, #2
 8004212:	d00a      	beq.n	800422a <prvDeleteTCB+0x56>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	60fb      	str	r3, [r7, #12]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <prvDeleteTCB+0x54>
	}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <prvResetNextTaskUnblockTime+0x38>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d104      	bne.n	800424e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <prvResetNextTaskUnblockTime+0x3c>)
 8004246:	f04f 32ff 	mov.w	r2, #4294967295
 800424a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800424c:	e008      	b.n	8004260 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <prvResetNextTaskUnblockTime+0x38>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	4a04      	ldr	r2, [pc, #16]	; (8004270 <prvResetNextTaskUnblockTime+0x3c>)
 800425e:	6013      	str	r3, [r2, #0]
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	20000cf0 	.word	0x20000cf0
 8004270:	20000d58 	.word	0x20000d58

08004274 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800427a:	4b0b      	ldr	r3, [pc, #44]	; (80042a8 <xTaskGetSchedulerState+0x34>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004282:	2301      	movs	r3, #1
 8004284:	607b      	str	r3, [r7, #4]
 8004286:	e008      	b.n	800429a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004288:	4b08      	ldr	r3, [pc, #32]	; (80042ac <xTaskGetSchedulerState+0x38>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d102      	bne.n	8004296 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004290:	2302      	movs	r3, #2
 8004292:	607b      	str	r3, [r7, #4]
 8004294:	e001      	b.n	800429a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004296:	2300      	movs	r3, #0
 8004298:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800429a:	687b      	ldr	r3, [r7, #4]
	}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr
 80042a8:	20000d44 	.word	0x20000d44
 80042ac:	20000d60 	.word	0x20000d60

080042b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042bc:	2300      	movs	r3, #0
 80042be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d051      	beq.n	800436a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ca:	4b2a      	ldr	r3, [pc, #168]	; (8004374 <xTaskPriorityInherit+0xc4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d241      	bcs.n	8004358 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	db06      	blt.n	80042ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042dc:	4b25      	ldr	r3, [pc, #148]	; (8004374 <xTaskPriorityInherit+0xc4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6959      	ldr	r1, [r3, #20]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <xTaskPriorityInherit+0xc8>)
 80042fc:	4413      	add	r3, r2
 80042fe:	4299      	cmp	r1, r3
 8004300:	d122      	bne.n	8004348 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3304      	adds	r3, #4
 8004306:	4618      	mov	r0, r3
 8004308:	f7fe fb06 	bl	8002918 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800430c:	4b19      	ldr	r3, [pc, #100]	; (8004374 <xTaskPriorityInherit+0xc4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4b18      	ldr	r3, [pc, #96]	; (800437c <xTaskPriorityInherit+0xcc>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d903      	bls.n	800432a <xTaskPriorityInherit+0x7a>
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	4a15      	ldr	r2, [pc, #84]	; (800437c <xTaskPriorityInherit+0xcc>)
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a10      	ldr	r2, [pc, #64]	; (8004378 <xTaskPriorityInherit+0xc8>)
 8004338:	441a      	add	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3304      	adds	r3, #4
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f7fe fa8c 	bl	800285e <vListInsertEnd>
 8004346:	e004      	b.n	8004352 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004348:	4b0a      	ldr	r3, [pc, #40]	; (8004374 <xTaskPriorityInherit+0xc4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004352:	2301      	movs	r3, #1
 8004354:	60fb      	str	r3, [r7, #12]
 8004356:	e008      	b.n	800436a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <xTaskPriorityInherit+0xc4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	429a      	cmp	r2, r3
 8004364:	d201      	bcs.n	800436a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004366:	2301      	movs	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800436a:	68fb      	ldr	r3, [r7, #12]
	}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000864 	.word	0x20000864
 8004378:	20000868 	.word	0x20000868
 800437c:	20000d40 	.word	0x20000d40

08004380 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d056      	beq.n	8004444 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004396:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <xTaskPriorityDisinherit+0xd0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	429a      	cmp	r2, r3
 800439e:	d00a      	beq.n	80043b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	60fb      	str	r3, [r7, #12]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	60bb      	str	r3, [r7, #8]
}
 80043d0:	bf00      	nop
 80043d2:	e7fe      	b.n	80043d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d02c      	beq.n	8004444 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d128      	bne.n	8004444 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	3304      	adds	r3, #4
 80043f6:	4618      	mov	r0, r3
 80043f8:	f7fe fa8e 	bl	8002918 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004408:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004414:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <xTaskPriorityDisinherit+0xd4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	429a      	cmp	r2, r3
 800441a:	d903      	bls.n	8004424 <xTaskPriorityDisinherit+0xa4>
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004420:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <xTaskPriorityDisinherit+0xd4>)
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004428:	4613      	mov	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4a09      	ldr	r2, [pc, #36]	; (8004458 <xTaskPriorityDisinherit+0xd8>)
 8004432:	441a      	add	r2, r3
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f7fe fa0f 	bl	800285e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004444:	697b      	ldr	r3, [r7, #20]
	}
 8004446:	4618      	mov	r0, r3
 8004448:	3718      	adds	r7, #24
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	20000864 	.word	0x20000864
 8004454:	20000d40 	.word	0x20000d40
 8004458:	20000868 	.word	0x20000868

0800445c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800445c:	b580      	push	{r7, lr}
 800445e:	b088      	sub	sp, #32
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d06a      	beq.n	800454a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	60fb      	str	r3, [r7, #12]
}
 800448e:	bf00      	nop
 8004490:	e7fe      	b.n	8004490 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d902      	bls.n	80044a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	61fb      	str	r3, [r7, #28]
 80044a0:	e002      	b.n	80044a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ac:	69fa      	ldr	r2, [r7, #28]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d04b      	beq.n	800454a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d146      	bne.n	800454a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044bc:	4b25      	ldr	r3, [pc, #148]	; (8004554 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d10a      	bne.n	80044dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80044c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	60bb      	str	r3, [r7, #8]
}
 80044d8:	bf00      	nop
 80044da:	e7fe      	b.n	80044da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	699b      	ldr	r3, [r3, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	db04      	blt.n	80044fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	6959      	ldr	r1, [r3, #20]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4a13      	ldr	r2, [pc, #76]	; (8004558 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800450a:	4413      	add	r3, r2
 800450c:	4299      	cmp	r1, r3
 800450e:	d11c      	bne.n	800454a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	3304      	adds	r3, #4
 8004514:	4618      	mov	r0, r3
 8004516:	f7fe f9ff 	bl	8002918 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451e:	4b0f      	ldr	r3, [pc, #60]	; (800455c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d903      	bls.n	800452e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452a:	4a0c      	ldr	r2, [pc, #48]	; (800455c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004532:	4613      	mov	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4a07      	ldr	r2, [pc, #28]	; (8004558 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800453c:	441a      	add	r2, r3
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	3304      	adds	r3, #4
 8004542:	4619      	mov	r1, r3
 8004544:	4610      	mov	r0, r2
 8004546:	f7fe f98a 	bl	800285e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800454a:	bf00      	nop
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	20000864 	.word	0x20000864
 8004558:	20000868 	.word	0x20000868
 800455c:	20000d40 	.word	0x20000d40

08004560 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004560:	b480      	push	{r7}
 8004562:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004564:	4b07      	ldr	r3, [pc, #28]	; (8004584 <pvTaskIncrementMutexHeldCount+0x24>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <pvTaskIncrementMutexHeldCount+0x24>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004572:	3201      	adds	r2, #1
 8004574:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004576:	4b03      	ldr	r3, [pc, #12]	; (8004584 <pvTaskIncrementMutexHeldCount+0x24>)
 8004578:	681b      	ldr	r3, [r3, #0]
	}
 800457a:	4618      	mov	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	20000864 	.word	0x20000864

08004588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004592:	4b21      	ldr	r3, [pc, #132]	; (8004618 <prvAddCurrentTaskToDelayedList+0x90>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004598:	4b20      	ldr	r3, [pc, #128]	; (800461c <prvAddCurrentTaskToDelayedList+0x94>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3304      	adds	r3, #4
 800459e:	4618      	mov	r0, r3
 80045a0:	f7fe f9ba 	bl	8002918 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045aa:	d10a      	bne.n	80045c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d007      	beq.n	80045c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <prvAddCurrentTaskToDelayedList+0x94>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4819      	ldr	r0, [pc, #100]	; (8004620 <prvAddCurrentTaskToDelayedList+0x98>)
 80045bc:	f7fe f94f 	bl	800285e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80045c0:	e026      	b.n	8004610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045ca:	4b14      	ldr	r3, [pc, #80]	; (800461c <prvAddCurrentTaskToDelayedList+0x94>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d209      	bcs.n	80045ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4b0f      	ldr	r3, [pc, #60]	; (800461c <prvAddCurrentTaskToDelayedList+0x94>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7fe f95d 	bl	80028a6 <vListInsert>
}
 80045ec:	e010      	b.n	8004610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ee:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b0a      	ldr	r3, [pc, #40]	; (800461c <prvAddCurrentTaskToDelayedList+0x94>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f7fe f953 	bl	80028a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d202      	bcs.n	8004610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800460a:	4a08      	ldr	r2, [pc, #32]	; (800462c <prvAddCurrentTaskToDelayedList+0xa4>)
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	6013      	str	r3, [r2, #0]
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}
 8004618:	20000d3c 	.word	0x20000d3c
 800461c:	20000864 	.word	0x20000864
 8004620:	20000d24 	.word	0x20000d24
 8004624:	20000cf4 	.word	0x20000cf4
 8004628:	20000cf0 	.word	0x20000cf0
 800462c:	20000d58 	.word	0x20000d58

08004630 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004636:	2300      	movs	r3, #0
 8004638:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800463a:	f000 fb07 	bl	8004c4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800463e:	4b1c      	ldr	r3, [pc, #112]	; (80046b0 <xTimerCreateTimerTask+0x80>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d021      	beq.n	800468a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004646:	2300      	movs	r3, #0
 8004648:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800464a:	2300      	movs	r3, #0
 800464c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800464e:	1d3a      	adds	r2, r7, #4
 8004650:	f107 0108 	add.w	r1, r7, #8
 8004654:	f107 030c 	add.w	r3, r7, #12
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe f8b9 	bl	80027d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	9202      	str	r2, [sp, #8]
 8004666:	9301      	str	r3, [sp, #4]
 8004668:	2302      	movs	r3, #2
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2300      	movs	r3, #0
 800466e:	460a      	mov	r2, r1
 8004670:	4910      	ldr	r1, [pc, #64]	; (80046b4 <xTimerCreateTimerTask+0x84>)
 8004672:	4811      	ldr	r0, [pc, #68]	; (80046b8 <xTimerCreateTimerTask+0x88>)
 8004674:	f7ff f814 	bl	80036a0 <xTaskCreateStatic>
 8004678:	4603      	mov	r3, r0
 800467a:	4a10      	ldr	r2, [pc, #64]	; (80046bc <xTimerCreateTimerTask+0x8c>)
 800467c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800467e:	4b0f      	ldr	r3, [pc, #60]	; (80046bc <xTimerCreateTimerTask+0x8c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004686:	2301      	movs	r3, #1
 8004688:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	613b      	str	r3, [r7, #16]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046a6:	697b      	ldr	r3, [r7, #20]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000d94 	.word	0x20000d94
 80046b4:	08006060 	.word	0x08006060
 80046b8:	080047f5 	.word	0x080047f5
 80046bc:	20000d98 	.word	0x20000d98

080046c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b08a      	sub	sp, #40	; 0x28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d10a      	bne.n	80046ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80046d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046dc:	f383 8811 	msr	BASEPRI, r3
 80046e0:	f3bf 8f6f 	isb	sy
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	623b      	str	r3, [r7, #32]
}
 80046ea:	bf00      	nop
 80046ec:	e7fe      	b.n	80046ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046ee:	4b1a      	ldr	r3, [pc, #104]	; (8004758 <xTimerGenericCommand+0x98>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d02a      	beq.n	800474c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b05      	cmp	r3, #5
 8004706:	dc18      	bgt.n	800473a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004708:	f7ff fdb4 	bl	8004274 <xTaskGetSchedulerState>
 800470c:	4603      	mov	r3, r0
 800470e:	2b02      	cmp	r3, #2
 8004710:	d109      	bne.n	8004726 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004712:	4b11      	ldr	r3, [pc, #68]	; (8004758 <xTimerGenericCommand+0x98>)
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	f107 0110 	add.w	r1, r7, #16
 800471a:	2300      	movs	r3, #0
 800471c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471e:	f7fe fa95 	bl	8002c4c <xQueueGenericSend>
 8004722:	6278      	str	r0, [r7, #36]	; 0x24
 8004724:	e012      	b.n	800474c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <xTimerGenericCommand+0x98>)
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	f107 0110 	add.w	r1, r7, #16
 800472e:	2300      	movs	r3, #0
 8004730:	2200      	movs	r2, #0
 8004732:	f7fe fa8b 	bl	8002c4c <xQueueGenericSend>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24
 8004738:	e008      	b.n	800474c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <xTimerGenericCommand+0x98>)
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	f107 0110 	add.w	r1, r7, #16
 8004742:	2300      	movs	r3, #0
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	f7fe fb7f 	bl	8002e48 <xQueueGenericSendFromISR>
 800474a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800474e:	4618      	mov	r0, r3
 8004750:	3728      	adds	r7, #40	; 0x28
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000d94 	.word	0x20000d94

0800475c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af02      	add	r7, sp, #8
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <prvProcessExpiredTimer+0x94>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	3304      	adds	r3, #4
 8004774:	4618      	mov	r0, r3
 8004776:	f7fe f8cf 	bl	8002918 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d022      	beq.n	80047ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	18d1      	adds	r1, r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	683a      	ldr	r2, [r7, #0]
 8004794:	6978      	ldr	r0, [r7, #20]
 8004796:	f000 f8d1 	bl	800493c <prvInsertTimerInActiveList>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d01f      	beq.n	80047e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047a0:	2300      	movs	r3, #0
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	2300      	movs	r3, #0
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	2100      	movs	r1, #0
 80047aa:	6978      	ldr	r0, [r7, #20]
 80047ac:	f7ff ff88 	bl	80046c0 <xTimerGenericCommand>
 80047b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d113      	bne.n	80047e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	60fb      	str	r3, [r7, #12]
}
 80047ca:	bf00      	nop
 80047cc:	e7fe      	b.n	80047cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047d4:	f023 0301 	bic.w	r3, r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	6978      	ldr	r0, [r7, #20]
 80047e6:	4798      	blx	r3
}
 80047e8:	bf00      	nop
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000d8c 	.word	0x20000d8c

080047f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047fc:	f107 0308 	add.w	r3, r7, #8
 8004800:	4618      	mov	r0, r3
 8004802:	f000 f857 	bl	80048b4 <prvGetNextExpireTime>
 8004806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4619      	mov	r1, r3
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 f803 	bl	8004818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004812:	f000 f8d5 	bl	80049c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004816:	e7f1      	b.n	80047fc <prvTimerTask+0x8>

08004818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b084      	sub	sp, #16
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004822:	f7ff f945 	bl	8003ab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f866 	bl	80048fc <prvSampleTimeNow>
 8004830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d130      	bne.n	800489a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <prvProcessTimerOrBlockTask+0x3c>
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	429a      	cmp	r2, r3
 8004844:	d806      	bhi.n	8004854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004846:	f7ff f941 	bl	8003acc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff85 	bl	800475c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004852:	e024      	b.n	800489e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800485a:	4b13      	ldr	r3, [pc, #76]	; (80048a8 <prvProcessTimerOrBlockTask+0x90>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <prvProcessTimerOrBlockTask+0x50>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <prvProcessTimerOrBlockTask+0x52>
 8004868:	2300      	movs	r3, #0
 800486a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800486c:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <prvProcessTimerOrBlockTask+0x94>)
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	4619      	mov	r1, r3
 800487a:	f7fe fedd 	bl	8003638 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800487e:	f7ff f925 	bl	8003acc <xTaskResumeAll>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d10a      	bne.n	800489e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004888:	4b09      	ldr	r3, [pc, #36]	; (80048b0 <prvProcessTimerOrBlockTask+0x98>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
}
 8004898:	e001      	b.n	800489e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800489a:	f7ff f917 	bl	8003acc <xTaskResumeAll>
}
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	20000d90 	.word	0x20000d90
 80048ac:	20000d94 	.word	0x20000d94
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048bc:	4b0e      	ldr	r3, [pc, #56]	; (80048f8 <prvGetNextExpireTime+0x44>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <prvGetNextExpireTime+0x16>
 80048c6:	2201      	movs	r2, #1
 80048c8:	e000      	b.n	80048cc <prvGetNextExpireTime+0x18>
 80048ca:	2200      	movs	r2, #0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d105      	bne.n	80048e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048d8:	4b07      	ldr	r3, [pc, #28]	; (80048f8 <prvGetNextExpireTime+0x44>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e001      	b.n	80048e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048e8:	68fb      	ldr	r3, [r7, #12]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	20000d8c 	.word	0x20000d8c

080048fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004904:	f7ff f980 	bl	8003c08 <xTaskGetTickCount>
 8004908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <prvSampleTimeNow+0x3c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	429a      	cmp	r2, r3
 8004912:	d205      	bcs.n	8004920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004914:	f000 f936 	bl	8004b84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e002      	b.n	8004926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004926:	4a04      	ldr	r2, [pc, #16]	; (8004938 <prvSampleTimeNow+0x3c>)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800492c:	68fb      	ldr	r3, [r7, #12]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000d9c 	.word	0x20000d9c

0800493c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800494a:	2300      	movs	r3, #0
 800494c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68fa      	ldr	r2, [r7, #12]
 8004958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	429a      	cmp	r2, r3
 8004960:	d812      	bhi.n	8004988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	1ad2      	subs	r2, r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e01b      	b.n	80049ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004976:	4b10      	ldr	r3, [pc, #64]	; (80049b8 <prvInsertTimerInActiveList+0x7c>)
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	3304      	adds	r3, #4
 800497e:	4619      	mov	r1, r3
 8004980:	4610      	mov	r0, r2
 8004982:	f7fd ff90 	bl	80028a6 <vListInsert>
 8004986:	e012      	b.n	80049ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d206      	bcs.n	800499e <prvInsertTimerInActiveList+0x62>
 8004990:	68ba      	ldr	r2, [r7, #8]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d302      	bcc.n	800499e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004998:	2301      	movs	r3, #1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	e007      	b.n	80049ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800499e:	4b07      	ldr	r3, [pc, #28]	; (80049bc <prvInsertTimerInActiveList+0x80>)
 80049a0:	681a      	ldr	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3304      	adds	r3, #4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4610      	mov	r0, r2
 80049aa:	f7fd ff7c 	bl	80028a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	20000d90 	.word	0x20000d90
 80049bc:	20000d8c 	.word	0x20000d8c

080049c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08e      	sub	sp, #56	; 0x38
 80049c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049c6:	e0ca      	b.n	8004b5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da18      	bge.n	8004a00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049ce:	1d3b      	adds	r3, r7, #4
 80049d0:	3304      	adds	r3, #4
 80049d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10a      	bne.n	80049f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	61fb      	str	r3, [r7, #28]
}
 80049ec:	bf00      	nop
 80049ee:	e7fe      	b.n	80049ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049f6:	6850      	ldr	r0, [r2, #4]
 80049f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049fa:	6892      	ldr	r2, [r2, #8]
 80049fc:	4611      	mov	r1, r2
 80049fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f2c0 80aa 	blt.w	8004b5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d004      	beq.n	8004a1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a16:	3304      	adds	r3, #4
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fd ff7d 	bl	8002918 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a1e:	463b      	mov	r3, r7
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff ff6b 	bl	80048fc <prvSampleTimeNow>
 8004a26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b09      	cmp	r3, #9
 8004a2c:	f200 8097 	bhi.w	8004b5e <prvProcessReceivedCommands+0x19e>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <prvProcessReceivedCommands+0x78>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a61 	.word	0x08004a61
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a61 	.word	0x08004a61
 8004a44:	08004ad5 	.word	0x08004ad5
 8004a48:	08004ae9 	.word	0x08004ae9
 8004a4c:	08004b33 	.word	0x08004b33
 8004a50:	08004a61 	.word	0x08004a61
 8004a54:	08004a61 	.word	0x08004a61
 8004a58:	08004ad5 	.word	0x08004ad5
 8004a5c:	08004ae9 	.word	0x08004ae9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a66:	f043 0301 	orr.w	r3, r3, #1
 8004a6a:	b2da      	uxtb	r2, r3
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	18d1      	adds	r1, r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a80:	f7ff ff5c 	bl	800493c <prvInsertTimerInActiveList>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d069      	beq.n	8004b5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d05e      	beq.n	8004b5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004aa0:	68ba      	ldr	r2, [r7, #8]
 8004aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	441a      	add	r2, r3
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	2100      	movs	r1, #0
 8004ab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ab2:	f7ff fe05 	bl	80046c0 <xTimerGenericCommand>
 8004ab6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d14f      	bne.n	8004b5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	61bb      	str	r3, [r7, #24]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ada:	f023 0301 	bic.w	r3, r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004ae6:	e03a      	b.n	8004b5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	b2da      	uxtb	r2, r3
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b02:	699b      	ldr	r3, [r3, #24]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	617b      	str	r3, [r7, #20]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b24:	18d1      	adds	r1, r2, r3
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b2c:	f7ff ff06 	bl	800493c <prvInsertTimerInActiveList>
					break;
 8004b30:	e015      	b.n	8004b5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d103      	bne.n	8004b48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b42:	f000 fbdd 	bl	8005300 <vPortFree>
 8004b46:	e00a      	b.n	8004b5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b5a:	e000      	b.n	8004b5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004b5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b5e:	4b08      	ldr	r3, [pc, #32]	; (8004b80 <prvProcessReceivedCommands+0x1c0>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	1d39      	adds	r1, r7, #4
 8004b64:	2200      	movs	r2, #0
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fe fa0a 	bl	8002f80 <xQueueReceive>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f47f af2a 	bne.w	80049c8 <prvProcessReceivedCommands+0x8>
	}
}
 8004b74:	bf00      	nop
 8004b76:	bf00      	nop
 8004b78:	3730      	adds	r7, #48	; 0x30
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	20000d94 	.word	0x20000d94

08004b84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b088      	sub	sp, #32
 8004b88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b8a:	e048      	b.n	8004c1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b8c:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <prvSwitchTimerLists+0xc0>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b96:	4b2b      	ldr	r3, [pc, #172]	; (8004c44 <prvSwitchTimerLists+0xc0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	3304      	adds	r3, #4
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7fd feb7 	bl	8002918 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d02e      	beq.n	8004c1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d90e      	bls.n	8004bf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bde:	4b19      	ldr	r3, [pc, #100]	; (8004c44 <prvSwitchTimerLists+0xc0>)
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	3304      	adds	r3, #4
 8004be6:	4619      	mov	r1, r3
 8004be8:	4610      	mov	r0, r2
 8004bea:	f7fd fe5c 	bl	80028a6 <vListInsert>
 8004bee:	e016      	b.n	8004c1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	2100      	movs	r1, #0
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7ff fd60 	bl	80046c0 <xTimerGenericCommand>
 8004c00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10a      	bne.n	8004c1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0c:	f383 8811 	msr	BASEPRI, r3
 8004c10:	f3bf 8f6f 	isb	sy
 8004c14:	f3bf 8f4f 	dsb	sy
 8004c18:	603b      	str	r3, [r7, #0]
}
 8004c1a:	bf00      	nop
 8004c1c:	e7fe      	b.n	8004c1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <prvSwitchTimerLists+0xc0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1b1      	bne.n	8004b8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c28:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <prvSwitchTimerLists+0xc0>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c2e:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <prvSwitchTimerLists+0xc4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a04      	ldr	r2, [pc, #16]	; (8004c44 <prvSwitchTimerLists+0xc0>)
 8004c34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c36:	4a04      	ldr	r2, [pc, #16]	; (8004c48 <prvSwitchTimerLists+0xc4>)
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	6013      	str	r3, [r2, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20000d8c 	.word	0x20000d8c
 8004c48:	20000d90 	.word	0x20000d90

08004c4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c52:	f000 f967 	bl	8004f24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c56:	4b15      	ldr	r3, [pc, #84]	; (8004cac <prvCheckForValidListAndQueue+0x60>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d120      	bne.n	8004ca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c5e:	4814      	ldr	r0, [pc, #80]	; (8004cb0 <prvCheckForValidListAndQueue+0x64>)
 8004c60:	f7fd fdd0 	bl	8002804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c64:	4813      	ldr	r0, [pc, #76]	; (8004cb4 <prvCheckForValidListAndQueue+0x68>)
 8004c66:	f7fd fdcd 	bl	8002804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <prvCheckForValidListAndQueue+0x6c>)
 8004c6c:	4a10      	ldr	r2, [pc, #64]	; (8004cb0 <prvCheckForValidListAndQueue+0x64>)
 8004c6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c70:	4b12      	ldr	r3, [pc, #72]	; (8004cbc <prvCheckForValidListAndQueue+0x70>)
 8004c72:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <prvCheckForValidListAndQueue+0x68>)
 8004c74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c76:	2300      	movs	r3, #0
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <prvCheckForValidListAndQueue+0x74>)
 8004c7c:	4a11      	ldr	r2, [pc, #68]	; (8004cc4 <prvCheckForValidListAndQueue+0x78>)
 8004c7e:	2110      	movs	r1, #16
 8004c80:	200a      	movs	r0, #10
 8004c82:	f7fd fedb 	bl	8002a3c <xQueueGenericCreateStatic>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <prvCheckForValidListAndQueue+0x60>)
 8004c8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c8c:	4b07      	ldr	r3, [pc, #28]	; (8004cac <prvCheckForValidListAndQueue+0x60>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <prvCheckForValidListAndQueue+0x60>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	490b      	ldr	r1, [pc, #44]	; (8004cc8 <prvCheckForValidListAndQueue+0x7c>)
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fca2 	bl	80035e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ca0:	f000 f970 	bl	8004f84 <vPortExitCritical>
}
 8004ca4:	bf00      	nop
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000d94 	.word	0x20000d94
 8004cb0:	20000d64 	.word	0x20000d64
 8004cb4:	20000d78 	.word	0x20000d78
 8004cb8:	20000d8c 	.word	0x20000d8c
 8004cbc:	20000d90 	.word	0x20000d90
 8004cc0:	20000e40 	.word	0x20000e40
 8004cc4:	20000da0 	.word	0x20000da0
 8004cc8:	08006068 	.word	0x08006068

08004ccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	60f8      	str	r0, [r7, #12]
 8004cd4:	60b9      	str	r1, [r7, #8]
 8004cd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	3b04      	subs	r3, #4
 8004cdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f023 0201 	bic.w	r2, r3, #1
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3b04      	subs	r3, #4
 8004cfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cfc:	4a0c      	ldr	r2, [pc, #48]	; (8004d30 <pxPortInitialiseStack+0x64>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b14      	subs	r3, #20
 8004d06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3b04      	subs	r3, #4
 8004d12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f06f 0202 	mvn.w	r2, #2
 8004d1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	3b20      	subs	r3, #32
 8004d20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d22:	68fb      	ldr	r3, [r7, #12]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	08004d35 	.word	0x08004d35

08004d34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d3e:	4b12      	ldr	r3, [pc, #72]	; (8004d88 <prvTaskExitError+0x54>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d46:	d00a      	beq.n	8004d5e <prvTaskExitError+0x2a>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60fb      	str	r3, [r7, #12]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <prvTaskExitError+0x28>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	60bb      	str	r3, [r7, #8]
}
 8004d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d72:	bf00      	nop
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0fc      	beq.n	8004d74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d7a:	bf00      	nop
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000074 	.word	0x20000074
 8004d8c:	00000000 	.word	0x00000000

08004d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d90:	4b07      	ldr	r3, [pc, #28]	; (8004db0 <pxCurrentTCBConst2>)
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	6808      	ldr	r0, [r1, #0]
 8004d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9a:	f380 8809 	msr	PSP, r0
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f04f 0000 	mov.w	r0, #0
 8004da6:	f380 8811 	msr	BASEPRI, r0
 8004daa:	4770      	bx	lr
 8004dac:	f3af 8000 	nop.w

08004db0 <pxCurrentTCBConst2>:
 8004db0:	20000864 	.word	0x20000864
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop

08004db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004db8:	4808      	ldr	r0, [pc, #32]	; (8004ddc <prvPortStartFirstTask+0x24>)
 8004dba:	6800      	ldr	r0, [r0, #0]
 8004dbc:	6800      	ldr	r0, [r0, #0]
 8004dbe:	f380 8808 	msr	MSP, r0
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8814 	msr	CONTROL, r0
 8004dca:	b662      	cpsie	i
 8004dcc:	b661      	cpsie	f
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	f3bf 8f6f 	isb	sy
 8004dd6:	df00      	svc	0
 8004dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004dda:	bf00      	nop
 8004ddc:	e000ed08 	.word	0xe000ed08

08004de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004de6:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <xPortStartScheduler+0x120>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a46      	ldr	r2, [pc, #280]	; (8004f04 <xPortStartScheduler+0x124>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d10a      	bne.n	8004e06 <xPortStartScheduler+0x26>
	__asm volatile
 8004df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df4:	f383 8811 	msr	BASEPRI, r3
 8004df8:	f3bf 8f6f 	isb	sy
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	613b      	str	r3, [r7, #16]
}
 8004e02:	bf00      	nop
 8004e04:	e7fe      	b.n	8004e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e06:	4b3e      	ldr	r3, [pc, #248]	; (8004f00 <xPortStartScheduler+0x120>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3f      	ldr	r2, [pc, #252]	; (8004f08 <xPortStartScheduler+0x128>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d10a      	bne.n	8004e26 <xPortStartScheduler+0x46>
	__asm volatile
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	60fb      	str	r3, [r7, #12]
}
 8004e22:	bf00      	nop
 8004e24:	e7fe      	b.n	8004e24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e26:	4b39      	ldr	r3, [pc, #228]	; (8004f0c <xPortStartScheduler+0x12c>)
 8004e28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	22ff      	movs	r2, #255	; 0xff
 8004e36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	4b31      	ldr	r3, [pc, #196]	; (8004f10 <xPortStartScheduler+0x130>)
 8004e4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e4e:	4b31      	ldr	r3, [pc, #196]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e54:	e009      	b.n	8004e6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004e56:	4b2f      	ldr	r3, [pc, #188]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	3b01      	subs	r3, #1
 8004e5c:	4a2d      	ldr	r2, [pc, #180]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e60:	78fb      	ldrb	r3, [r7, #3]
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e72:	2b80      	cmp	r3, #128	; 0x80
 8004e74:	d0ef      	beq.n	8004e56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f1c3 0307 	rsb	r3, r3, #7
 8004e7e:	2b04      	cmp	r3, #4
 8004e80:	d00a      	beq.n	8004e98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e86:	f383 8811 	msr	BASEPRI, r3
 8004e8a:	f3bf 8f6f 	isb	sy
 8004e8e:	f3bf 8f4f 	dsb	sy
 8004e92:	60bb      	str	r3, [r7, #8]
}
 8004e94:	bf00      	nop
 8004e96:	e7fe      	b.n	8004e96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e98:	4b1e      	ldr	r3, [pc, #120]	; (8004f14 <xPortStartScheduler+0x134>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	; (8004f14 <xPortStartScheduler+0x134>)
 8004ea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ea2:	4b1c      	ldr	r3, [pc, #112]	; (8004f14 <xPortStartScheduler+0x134>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004eaa:	4a1a      	ldr	r2, [pc, #104]	; (8004f14 <xPortStartScheduler+0x134>)
 8004eac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	b2da      	uxtb	r2, r3
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <xPortStartScheduler+0x138>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a17      	ldr	r2, [pc, #92]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004ec2:	4b15      	ldr	r3, [pc, #84]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a14      	ldr	r2, [pc, #80]	; (8004f18 <xPortStartScheduler+0x138>)
 8004ec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004ece:	f000 f8dd 	bl	800508c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <xPortStartScheduler+0x13c>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004ed8:	f000 f8fc 	bl	80050d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004edc:	4b10      	ldr	r3, [pc, #64]	; (8004f20 <xPortStartScheduler+0x140>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0f      	ldr	r2, [pc, #60]	; (8004f20 <xPortStartScheduler+0x140>)
 8004ee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004ee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004ee8:	f7ff ff66 	bl	8004db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004eec:	f7fe ff56 	bl	8003d9c <vTaskSwitchContext>
	prvTaskExitError();
 8004ef0:	f7ff ff20 	bl	8004d34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000ed00 	.word	0xe000ed00
 8004f04:	410fc271 	.word	0x410fc271
 8004f08:	410fc270 	.word	0x410fc270
 8004f0c:	e000e400 	.word	0xe000e400
 8004f10:	20000e90 	.word	0x20000e90
 8004f14:	20000e94 	.word	0x20000e94
 8004f18:	e000ed20 	.word	0xe000ed20
 8004f1c:	20000074 	.word	0x20000074
 8004f20:	e000ef34 	.word	0xe000ef34

08004f24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	607b      	str	r3, [r7, #4]
}
 8004f3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004f3e:	4b0f      	ldr	r3, [pc, #60]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3301      	adds	r3, #1
 8004f44:	4a0d      	ldr	r2, [pc, #52]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004f48:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <vPortEnterCritical+0x58>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d10f      	bne.n	8004f70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <vPortEnterCritical+0x5c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	603b      	str	r3, [r7, #0]
}
 8004f6c:	bf00      	nop
 8004f6e:	e7fe      	b.n	8004f6e <vPortEnterCritical+0x4a>
	}
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	20000074 	.word	0x20000074
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f8a:	4b12      	ldr	r3, [pc, #72]	; (8004fd4 <vPortExitCritical+0x50>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <vPortExitCritical+0x24>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	607b      	str	r3, [r7, #4]
}
 8004fa4:	bf00      	nop
 8004fa6:	e7fe      	b.n	8004fa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004fa8:	4b0a      	ldr	r3, [pc, #40]	; (8004fd4 <vPortExitCritical+0x50>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <vPortExitCritical+0x50>)
 8004fb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004fb2:	4b08      	ldr	r3, [pc, #32]	; (8004fd4 <vPortExitCritical+0x50>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d105      	bne.n	8004fc6 <vPortExitCritical+0x42>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
}
 8004fc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	370c      	adds	r7, #12
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	20000074 	.word	0x20000074
	...

08004fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004fe0:	f3ef 8009 	mrs	r0, PSP
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4b15      	ldr	r3, [pc, #84]	; (8005040 <pxCurrentTCBConst>)
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	f01e 0f10 	tst.w	lr, #16
 8004ff0:	bf08      	it	eq
 8004ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005000:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005004:	f380 8811 	msr	BASEPRI, r0
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	f7fe fec4 	bl	8003d9c <vTaskSwitchContext>
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f380 8811 	msr	BASEPRI, r0
 800501c:	bc09      	pop	{r0, r3}
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6808      	ldr	r0, [r1, #0]
 8005022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005026:	f01e 0f10 	tst.w	lr, #16
 800502a:	bf08      	it	eq
 800502c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005030:	f380 8809 	msr	PSP, r0
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w

08005040 <pxCurrentTCBConst>:
 8005040:	20000864 	.word	0x20000864
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop

08005048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	607b      	str	r3, [r7, #4]
}
 8005060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005062:	f7fe fde1 	bl	8003c28 <xTaskIncrementTick>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d003      	beq.n	8005074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800506c:	4b06      	ldr	r3, [pc, #24]	; (8005088 <xPortSysTickHandler+0x40>)
 800506e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005072:	601a      	str	r2, [r3, #0]
 8005074:	2300      	movs	r3, #0
 8005076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f383 8811 	msr	BASEPRI, r3
}
 800507e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	e000ed04 	.word	0xe000ed04

0800508c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800508c:	b480      	push	{r7}
 800508e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <vPortSetupTimerInterrupt+0x34>)
 8005092:	2200      	movs	r2, #0
 8005094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005096:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <vPortSetupTimerInterrupt+0x38>)
 8005098:	2200      	movs	r2, #0
 800509a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <vPortSetupTimerInterrupt+0x3c>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0a      	ldr	r2, [pc, #40]	; (80050cc <vPortSetupTimerInterrupt+0x40>)
 80050a2:	fba2 2303 	umull	r2, r3, r2, r3
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <vPortSetupTimerInterrupt+0x44>)
 80050aa:	3b01      	subs	r3, #1
 80050ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ae:	4b04      	ldr	r3, [pc, #16]	; (80050c0 <vPortSetupTimerInterrupt+0x34>)
 80050b0:	2207      	movs	r2, #7
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	e000e010 	.word	0xe000e010
 80050c4:	e000e018 	.word	0xe000e018
 80050c8:	20000068 	.word	0x20000068
 80050cc:	10624dd3 	.word	0x10624dd3
 80050d0:	e000e014 	.word	0xe000e014

080050d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80050d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80050e4 <vPortEnableVFP+0x10>
 80050d8:	6801      	ldr	r1, [r0, #0]
 80050da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050de:	6001      	str	r1, [r0, #0]
 80050e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80050e2:	bf00      	nop
 80050e4:	e000ed88 	.word	0xe000ed88

080050e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80050ee:	f3ef 8305 	mrs	r3, IPSR
 80050f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b0f      	cmp	r3, #15
 80050f8:	d914      	bls.n	8005124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80050fa:	4a17      	ldr	r2, [pc, #92]	; (8005158 <vPortValidateInterruptPriority+0x70>)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4413      	add	r3, r2
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005104:	4b15      	ldr	r3, [pc, #84]	; (800515c <vPortValidateInterruptPriority+0x74>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	7afa      	ldrb	r2, [r7, #11]
 800510a:	429a      	cmp	r2, r3
 800510c:	d20a      	bcs.n	8005124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	607b      	str	r3, [r7, #4]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005124:	4b0e      	ldr	r3, [pc, #56]	; (8005160 <vPortValidateInterruptPriority+0x78>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800512c:	4b0d      	ldr	r3, [pc, #52]	; (8005164 <vPortValidateInterruptPriority+0x7c>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	429a      	cmp	r2, r3
 8005132:	d90a      	bls.n	800514a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	603b      	str	r3, [r7, #0]
}
 8005146:	bf00      	nop
 8005148:	e7fe      	b.n	8005148 <vPortValidateInterruptPriority+0x60>
	}
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	e000e3f0 	.word	0xe000e3f0
 800515c:	20000e90 	.word	0x20000e90
 8005160:	e000ed0c 	.word	0xe000ed0c
 8005164:	20000e94 	.word	0x20000e94

08005168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005174:	f7fe fc9c 	bl	8003ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005178:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <pvPortMalloc+0x180>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d101      	bne.n	8005184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005180:	f000 f920 	bl	80053c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005184:	4b59      	ldr	r3, [pc, #356]	; (80052ec <pvPortMalloc+0x184>)
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4013      	ands	r3, r2
 800518c:	2b00      	cmp	r3, #0
 800518e:	f040 8093 	bne.w	80052b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d01d      	beq.n	80051d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005198:	2208      	movs	r2, #8
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4413      	add	r3, r2
 800519e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d014      	beq.n	80051d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f023 0307 	bic.w	r3, r3, #7
 80051b0:	3308      	adds	r3, #8
 80051b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f003 0307 	and.w	r3, r3, #7
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <pvPortMalloc+0x6c>
	__asm volatile
 80051be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c2:	f383 8811 	msr	BASEPRI, r3
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	617b      	str	r3, [r7, #20]
}
 80051d0:	bf00      	nop
 80051d2:	e7fe      	b.n	80051d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d06e      	beq.n	80052b8 <pvPortMalloc+0x150>
 80051da:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <pvPortMalloc+0x188>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d869      	bhi.n	80052b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80051e4:	4b43      	ldr	r3, [pc, #268]	; (80052f4 <pvPortMalloc+0x18c>)
 80051e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <pvPortMalloc+0x18c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ee:	e004      	b.n	80051fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	687a      	ldr	r2, [r7, #4]
 8005200:	429a      	cmp	r2, r3
 8005202:	d903      	bls.n	800520c <pvPortMalloc+0xa4>
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1f1      	bne.n	80051f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800520c:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <pvPortMalloc+0x180>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005212:	429a      	cmp	r2, r3
 8005214:	d050      	beq.n	80052b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005216:	6a3b      	ldr	r3, [r7, #32]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2208      	movs	r2, #8
 800521c:	4413      	add	r3, r2
 800521e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	1ad2      	subs	r2, r2, r3
 8005230:	2308      	movs	r3, #8
 8005232:	005b      	lsls	r3, r3, #1
 8005234:	429a      	cmp	r2, r3
 8005236:	d91f      	bls.n	8005278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4413      	add	r3, r2
 800523e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <pvPortMalloc+0xf8>
	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	613b      	str	r3, [r7, #16]
}
 800525c:	bf00      	nop
 800525e:	e7fe      	b.n	800525e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005272:	69b8      	ldr	r0, [r7, #24]
 8005274:	f000 f908 	bl	8005488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <pvPortMalloc+0x188>)
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	4a1b      	ldr	r2, [pc, #108]	; (80052f0 <pvPortMalloc+0x188>)
 8005284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005286:	4b1a      	ldr	r3, [pc, #104]	; (80052f0 <pvPortMalloc+0x188>)
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <pvPortMalloc+0x190>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	429a      	cmp	r2, r3
 8005290:	d203      	bcs.n	800529a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <pvPortMalloc+0x188>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	; (80052f8 <pvPortMalloc+0x190>)
 8005298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	685a      	ldr	r2, [r3, #4]
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <pvPortMalloc+0x184>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	431a      	orrs	r2, r3
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80052a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <pvPortMalloc+0x194>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	3301      	adds	r3, #1
 80052b4:	4a11      	ldr	r2, [pc, #68]	; (80052fc <pvPortMalloc+0x194>)
 80052b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80052b8:	f7fe fc08 	bl	8003acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <pvPortMalloc+0x174>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	e7fe      	b.n	80052da <pvPortMalloc+0x172>
	return pvReturn;
 80052dc:	69fb      	ldr	r3, [r7, #28]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3728      	adds	r7, #40	; 0x28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	20004aa0 	.word	0x20004aa0
 80052ec:	20004ab4 	.word	0x20004ab4
 80052f0:	20004aa4 	.word	0x20004aa4
 80052f4:	20004a98 	.word	0x20004a98
 80052f8:	20004aa8 	.word	0x20004aa8
 80052fc:	20004aac 	.word	0x20004aac

08005300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b086      	sub	sp, #24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d04d      	beq.n	80053ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005312:	2308      	movs	r3, #8
 8005314:	425b      	negs	r3, r3
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4413      	add	r3, r2
 800531a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	4b24      	ldr	r3, [pc, #144]	; (80053b8 <vPortFree+0xb8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4013      	ands	r3, r2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <vPortFree+0x44>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <vPortFree+0x62>
	__asm volatile
 800534c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005350:	f383 8811 	msr	BASEPRI, r3
 8005354:	f3bf 8f6f 	isb	sy
 8005358:	f3bf 8f4f 	dsb	sy
 800535c:	60bb      	str	r3, [r7, #8]
}
 800535e:	bf00      	nop
 8005360:	e7fe      	b.n	8005360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	4b14      	ldr	r3, [pc, #80]	; (80053b8 <vPortFree+0xb8>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4013      	ands	r3, r2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d01e      	beq.n	80053ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d11a      	bne.n	80053ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	4b0e      	ldr	r3, [pc, #56]	; (80053b8 <vPortFree+0xb8>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	43db      	mvns	r3, r3
 8005382:	401a      	ands	r2, r3
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005388:	f7fe fb92 	bl	8003ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	4b0a      	ldr	r3, [pc, #40]	; (80053bc <vPortFree+0xbc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4413      	add	r3, r2
 8005396:	4a09      	ldr	r2, [pc, #36]	; (80053bc <vPortFree+0xbc>)
 8005398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800539a:	6938      	ldr	r0, [r7, #16]
 800539c:	f000 f874 	bl	8005488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80053a0:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <vPortFree+0xc0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	3301      	adds	r3, #1
 80053a6:	4a06      	ldr	r2, [pc, #24]	; (80053c0 <vPortFree+0xc0>)
 80053a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80053aa:	f7fe fb8f 	bl	8003acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80053ae:	bf00      	nop
 80053b0:	3718      	adds	r7, #24
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	20004ab4 	.word	0x20004ab4
 80053bc:	20004aa4 	.word	0x20004aa4
 80053c0:	20004ab0 	.word	0x20004ab0

080053c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80053ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80053ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80053d0:	4b27      	ldr	r3, [pc, #156]	; (8005470 <prvHeapInit+0xac>)
 80053d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f003 0307 	and.w	r3, r3, #7
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00c      	beq.n	80053f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	3307      	adds	r3, #7
 80053e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053ec:	68ba      	ldr	r2, [r7, #8]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	4a1f      	ldr	r2, [pc, #124]	; (8005470 <prvHeapInit+0xac>)
 80053f4:	4413      	add	r3, r2
 80053f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053fc:	4a1d      	ldr	r2, [pc, #116]	; (8005474 <prvHeapInit+0xb0>)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005402:	4b1c      	ldr	r3, [pc, #112]	; (8005474 <prvHeapInit+0xb0>)
 8005404:	2200      	movs	r2, #0
 8005406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005410:	2208      	movs	r2, #8
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0307 	bic.w	r3, r3, #7
 800541e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a15      	ldr	r2, [pc, #84]	; (8005478 <prvHeapInit+0xb4>)
 8005424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005426:	4b14      	ldr	r3, [pc, #80]	; (8005478 <prvHeapInit+0xb4>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2200      	movs	r2, #0
 800542c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <prvHeapInit+0xb4>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <prvHeapInit+0xb4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	4a0a      	ldr	r2, [pc, #40]	; (800547c <prvHeapInit+0xb8>)
 8005452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <prvHeapInit+0xbc>)
 800545a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800545c:	4b09      	ldr	r3, [pc, #36]	; (8005484 <prvHeapInit+0xc0>)
 800545e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005462:	601a      	str	r2, [r3, #0]
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	20000e98 	.word	0x20000e98
 8005474:	20004a98 	.word	0x20004a98
 8005478:	20004aa0 	.word	0x20004aa0
 800547c:	20004aa8 	.word	0x20004aa8
 8005480:	20004aa4 	.word	0x20004aa4
 8005484:	20004ab4 	.word	0x20004ab4

08005488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005490:	4b28      	ldr	r3, [pc, #160]	; (8005534 <prvInsertBlockIntoFreeList+0xac>)
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <prvInsertBlockIntoFreeList+0x14>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d8f7      	bhi.n	8005496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	4413      	add	r3, r2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d108      	bne.n	80054ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	441a      	add	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d118      	bne.n	8005510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b15      	ldr	r3, [pc, #84]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d00d      	beq.n	8005506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685a      	ldr	r2, [r3, #4]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	601a      	str	r2, [r3, #0]
 8005504:	e008      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005506:	4b0c      	ldr	r3, [pc, #48]	; (8005538 <prvInsertBlockIntoFreeList+0xb0>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	e003      	b.n	8005518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d002      	beq.n	8005526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20004a98 	.word	0x20004a98
 8005538:	20004aa0 	.word	0x20004aa0

0800553c <__errno>:
 800553c:	4b01      	ldr	r3, [pc, #4]	; (8005544 <__errno+0x8>)
 800553e:	6818      	ldr	r0, [r3, #0]
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000078 	.word	0x20000078

08005548 <__libc_init_array>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	4d0d      	ldr	r5, [pc, #52]	; (8005580 <__libc_init_array+0x38>)
 800554c:	4c0d      	ldr	r4, [pc, #52]	; (8005584 <__libc_init_array+0x3c>)
 800554e:	1b64      	subs	r4, r4, r5
 8005550:	10a4      	asrs	r4, r4, #2
 8005552:	2600      	movs	r6, #0
 8005554:	42a6      	cmp	r6, r4
 8005556:	d109      	bne.n	800556c <__libc_init_array+0x24>
 8005558:	4d0b      	ldr	r5, [pc, #44]	; (8005588 <__libc_init_array+0x40>)
 800555a:	4c0c      	ldr	r4, [pc, #48]	; (800558c <__libc_init_array+0x44>)
 800555c:	f000 fd14 	bl	8005f88 <_init>
 8005560:	1b64      	subs	r4, r4, r5
 8005562:	10a4      	asrs	r4, r4, #2
 8005564:	2600      	movs	r6, #0
 8005566:	42a6      	cmp	r6, r4
 8005568:	d105      	bne.n	8005576 <__libc_init_array+0x2e>
 800556a:	bd70      	pop	{r4, r5, r6, pc}
 800556c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005570:	4798      	blx	r3
 8005572:	3601      	adds	r6, #1
 8005574:	e7ee      	b.n	8005554 <__libc_init_array+0xc>
 8005576:	f855 3b04 	ldr.w	r3, [r5], #4
 800557a:	4798      	blx	r3
 800557c:	3601      	adds	r6, #1
 800557e:	e7f2      	b.n	8005566 <__libc_init_array+0x1e>
 8005580:	08006184 	.word	0x08006184
 8005584:	08006184 	.word	0x08006184
 8005588:	08006184 	.word	0x08006184
 800558c:	08006188 	.word	0x08006188

08005590 <memcpy>:
 8005590:	440a      	add	r2, r1
 8005592:	4291      	cmp	r1, r2
 8005594:	f100 33ff 	add.w	r3, r0, #4294967295
 8005598:	d100      	bne.n	800559c <memcpy+0xc>
 800559a:	4770      	bx	lr
 800559c:	b510      	push	{r4, lr}
 800559e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80055a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a6:	4291      	cmp	r1, r2
 80055a8:	d1f9      	bne.n	800559e <memcpy+0xe>
 80055aa:	bd10      	pop	{r4, pc}

080055ac <memset>:
 80055ac:	4402      	add	r2, r0
 80055ae:	4603      	mov	r3, r0
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d100      	bne.n	80055b6 <memset+0xa>
 80055b4:	4770      	bx	lr
 80055b6:	f803 1b01 	strb.w	r1, [r3], #1
 80055ba:	e7f9      	b.n	80055b0 <memset+0x4>

080055bc <putchar>:
 80055bc:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <putchar+0x28>)
 80055be:	b513      	push	{r0, r1, r4, lr}
 80055c0:	681c      	ldr	r4, [r3, #0]
 80055c2:	4601      	mov	r1, r0
 80055c4:	b134      	cbz	r4, 80055d4 <putchar+0x18>
 80055c6:	69a3      	ldr	r3, [r4, #24]
 80055c8:	b923      	cbnz	r3, 80055d4 <putchar+0x18>
 80055ca:	9001      	str	r0, [sp, #4]
 80055cc:	4620      	mov	r0, r4
 80055ce:	f000 f863 	bl	8005698 <__sinit>
 80055d2:	9901      	ldr	r1, [sp, #4]
 80055d4:	68a2      	ldr	r2, [r4, #8]
 80055d6:	4620      	mov	r0, r4
 80055d8:	b002      	add	sp, #8
 80055da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055de:	f000 b98f 	b.w	8005900 <_putc_r>
 80055e2:	bf00      	nop
 80055e4:	20000078 	.word	0x20000078

080055e8 <std>:
 80055e8:	2300      	movs	r3, #0
 80055ea:	b510      	push	{r4, lr}
 80055ec:	4604      	mov	r4, r0
 80055ee:	e9c0 3300 	strd	r3, r3, [r0]
 80055f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055f6:	6083      	str	r3, [r0, #8]
 80055f8:	8181      	strh	r1, [r0, #12]
 80055fa:	6643      	str	r3, [r0, #100]	; 0x64
 80055fc:	81c2      	strh	r2, [r0, #14]
 80055fe:	6183      	str	r3, [r0, #24]
 8005600:	4619      	mov	r1, r3
 8005602:	2208      	movs	r2, #8
 8005604:	305c      	adds	r0, #92	; 0x5c
 8005606:	f7ff ffd1 	bl	80055ac <memset>
 800560a:	4b05      	ldr	r3, [pc, #20]	; (8005620 <std+0x38>)
 800560c:	6263      	str	r3, [r4, #36]	; 0x24
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <std+0x3c>)
 8005610:	62a3      	str	r3, [r4, #40]	; 0x28
 8005612:	4b05      	ldr	r3, [pc, #20]	; (8005628 <std+0x40>)
 8005614:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <std+0x44>)
 8005618:	6224      	str	r4, [r4, #32]
 800561a:	6323      	str	r3, [r4, #48]	; 0x30
 800561c:	bd10      	pop	{r4, pc}
 800561e:	bf00      	nop
 8005620:	080059b1 	.word	0x080059b1
 8005624:	080059d3 	.word	0x080059d3
 8005628:	08005a0b 	.word	0x08005a0b
 800562c:	08005a2f 	.word	0x08005a2f

08005630 <_cleanup_r>:
 8005630:	4901      	ldr	r1, [pc, #4]	; (8005638 <_cleanup_r+0x8>)
 8005632:	f000 b8af 	b.w	8005794 <_fwalk_reent>
 8005636:	bf00      	nop
 8005638:	08005d09 	.word	0x08005d09

0800563c <__sfmoreglue>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	2268      	movs	r2, #104	; 0x68
 8005640:	1e4d      	subs	r5, r1, #1
 8005642:	4355      	muls	r5, r2
 8005644:	460e      	mov	r6, r1
 8005646:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800564a:	f000 f8e5 	bl	8005818 <_malloc_r>
 800564e:	4604      	mov	r4, r0
 8005650:	b140      	cbz	r0, 8005664 <__sfmoreglue+0x28>
 8005652:	2100      	movs	r1, #0
 8005654:	e9c0 1600 	strd	r1, r6, [r0]
 8005658:	300c      	adds	r0, #12
 800565a:	60a0      	str	r0, [r4, #8]
 800565c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005660:	f7ff ffa4 	bl	80055ac <memset>
 8005664:	4620      	mov	r0, r4
 8005666:	bd70      	pop	{r4, r5, r6, pc}

08005668 <__sfp_lock_acquire>:
 8005668:	4801      	ldr	r0, [pc, #4]	; (8005670 <__sfp_lock_acquire+0x8>)
 800566a:	f000 b8b3 	b.w	80057d4 <__retarget_lock_acquire_recursive>
 800566e:	bf00      	nop
 8005670:	20004ab9 	.word	0x20004ab9

08005674 <__sfp_lock_release>:
 8005674:	4801      	ldr	r0, [pc, #4]	; (800567c <__sfp_lock_release+0x8>)
 8005676:	f000 b8ae 	b.w	80057d6 <__retarget_lock_release_recursive>
 800567a:	bf00      	nop
 800567c:	20004ab9 	.word	0x20004ab9

08005680 <__sinit_lock_acquire>:
 8005680:	4801      	ldr	r0, [pc, #4]	; (8005688 <__sinit_lock_acquire+0x8>)
 8005682:	f000 b8a7 	b.w	80057d4 <__retarget_lock_acquire_recursive>
 8005686:	bf00      	nop
 8005688:	20004aba 	.word	0x20004aba

0800568c <__sinit_lock_release>:
 800568c:	4801      	ldr	r0, [pc, #4]	; (8005694 <__sinit_lock_release+0x8>)
 800568e:	f000 b8a2 	b.w	80057d6 <__retarget_lock_release_recursive>
 8005692:	bf00      	nop
 8005694:	20004aba 	.word	0x20004aba

08005698 <__sinit>:
 8005698:	b510      	push	{r4, lr}
 800569a:	4604      	mov	r4, r0
 800569c:	f7ff fff0 	bl	8005680 <__sinit_lock_acquire>
 80056a0:	69a3      	ldr	r3, [r4, #24]
 80056a2:	b11b      	cbz	r3, 80056ac <__sinit+0x14>
 80056a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a8:	f7ff bff0 	b.w	800568c <__sinit_lock_release>
 80056ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056b0:	6523      	str	r3, [r4, #80]	; 0x50
 80056b2:	4b13      	ldr	r3, [pc, #76]	; (8005700 <__sinit+0x68>)
 80056b4:	4a13      	ldr	r2, [pc, #76]	; (8005704 <__sinit+0x6c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	bf04      	itt	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	61a3      	streq	r3, [r4, #24]
 80056c2:	4620      	mov	r0, r4
 80056c4:	f000 f820 	bl	8005708 <__sfp>
 80056c8:	6060      	str	r0, [r4, #4]
 80056ca:	4620      	mov	r0, r4
 80056cc:	f000 f81c 	bl	8005708 <__sfp>
 80056d0:	60a0      	str	r0, [r4, #8]
 80056d2:	4620      	mov	r0, r4
 80056d4:	f000 f818 	bl	8005708 <__sfp>
 80056d8:	2200      	movs	r2, #0
 80056da:	60e0      	str	r0, [r4, #12]
 80056dc:	2104      	movs	r1, #4
 80056de:	6860      	ldr	r0, [r4, #4]
 80056e0:	f7ff ff82 	bl	80055e8 <std>
 80056e4:	68a0      	ldr	r0, [r4, #8]
 80056e6:	2201      	movs	r2, #1
 80056e8:	2109      	movs	r1, #9
 80056ea:	f7ff ff7d 	bl	80055e8 <std>
 80056ee:	68e0      	ldr	r0, [r4, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	2112      	movs	r1, #18
 80056f4:	f7ff ff78 	bl	80055e8 <std>
 80056f8:	2301      	movs	r3, #1
 80056fa:	61a3      	str	r3, [r4, #24]
 80056fc:	e7d2      	b.n	80056a4 <__sinit+0xc>
 80056fe:	bf00      	nop
 8005700:	08006118 	.word	0x08006118
 8005704:	08005631 	.word	0x08005631

08005708 <__sfp>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	4607      	mov	r7, r0
 800570c:	f7ff ffac 	bl	8005668 <__sfp_lock_acquire>
 8005710:	4b1e      	ldr	r3, [pc, #120]	; (800578c <__sfp+0x84>)
 8005712:	681e      	ldr	r6, [r3, #0]
 8005714:	69b3      	ldr	r3, [r6, #24]
 8005716:	b913      	cbnz	r3, 800571e <__sfp+0x16>
 8005718:	4630      	mov	r0, r6
 800571a:	f7ff ffbd 	bl	8005698 <__sinit>
 800571e:	3648      	adds	r6, #72	; 0x48
 8005720:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005724:	3b01      	subs	r3, #1
 8005726:	d503      	bpl.n	8005730 <__sfp+0x28>
 8005728:	6833      	ldr	r3, [r6, #0]
 800572a:	b30b      	cbz	r3, 8005770 <__sfp+0x68>
 800572c:	6836      	ldr	r6, [r6, #0]
 800572e:	e7f7      	b.n	8005720 <__sfp+0x18>
 8005730:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005734:	b9d5      	cbnz	r5, 800576c <__sfp+0x64>
 8005736:	4b16      	ldr	r3, [pc, #88]	; (8005790 <__sfp+0x88>)
 8005738:	60e3      	str	r3, [r4, #12]
 800573a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800573e:	6665      	str	r5, [r4, #100]	; 0x64
 8005740:	f000 f847 	bl	80057d2 <__retarget_lock_init_recursive>
 8005744:	f7ff ff96 	bl	8005674 <__sfp_lock_release>
 8005748:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800574c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005750:	6025      	str	r5, [r4, #0]
 8005752:	61a5      	str	r5, [r4, #24]
 8005754:	2208      	movs	r2, #8
 8005756:	4629      	mov	r1, r5
 8005758:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800575c:	f7ff ff26 	bl	80055ac <memset>
 8005760:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005764:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005768:	4620      	mov	r0, r4
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800576c:	3468      	adds	r4, #104	; 0x68
 800576e:	e7d9      	b.n	8005724 <__sfp+0x1c>
 8005770:	2104      	movs	r1, #4
 8005772:	4638      	mov	r0, r7
 8005774:	f7ff ff62 	bl	800563c <__sfmoreglue>
 8005778:	4604      	mov	r4, r0
 800577a:	6030      	str	r0, [r6, #0]
 800577c:	2800      	cmp	r0, #0
 800577e:	d1d5      	bne.n	800572c <__sfp+0x24>
 8005780:	f7ff ff78 	bl	8005674 <__sfp_lock_release>
 8005784:	230c      	movs	r3, #12
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	e7ee      	b.n	8005768 <__sfp+0x60>
 800578a:	bf00      	nop
 800578c:	08006118 	.word	0x08006118
 8005790:	ffff0001 	.word	0xffff0001

08005794 <_fwalk_reent>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	4606      	mov	r6, r0
 800579a:	4688      	mov	r8, r1
 800579c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057a0:	2700      	movs	r7, #0
 80057a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a6:	f1b9 0901 	subs.w	r9, r9, #1
 80057aa:	d505      	bpl.n	80057b8 <_fwalk_reent+0x24>
 80057ac:	6824      	ldr	r4, [r4, #0]
 80057ae:	2c00      	cmp	r4, #0
 80057b0:	d1f7      	bne.n	80057a2 <_fwalk_reent+0xe>
 80057b2:	4638      	mov	r0, r7
 80057b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057b8:	89ab      	ldrh	r3, [r5, #12]
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d907      	bls.n	80057ce <_fwalk_reent+0x3a>
 80057be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c2:	3301      	adds	r3, #1
 80057c4:	d003      	beq.n	80057ce <_fwalk_reent+0x3a>
 80057c6:	4629      	mov	r1, r5
 80057c8:	4630      	mov	r0, r6
 80057ca:	47c0      	blx	r8
 80057cc:	4307      	orrs	r7, r0
 80057ce:	3568      	adds	r5, #104	; 0x68
 80057d0:	e7e9      	b.n	80057a6 <_fwalk_reent+0x12>

080057d2 <__retarget_lock_init_recursive>:
 80057d2:	4770      	bx	lr

080057d4 <__retarget_lock_acquire_recursive>:
 80057d4:	4770      	bx	lr

080057d6 <__retarget_lock_release_recursive>:
 80057d6:	4770      	bx	lr

080057d8 <sbrk_aligned>:
 80057d8:	b570      	push	{r4, r5, r6, lr}
 80057da:	4e0e      	ldr	r6, [pc, #56]	; (8005814 <sbrk_aligned+0x3c>)
 80057dc:	460c      	mov	r4, r1
 80057de:	6831      	ldr	r1, [r6, #0]
 80057e0:	4605      	mov	r5, r0
 80057e2:	b911      	cbnz	r1, 80057ea <sbrk_aligned+0x12>
 80057e4:	f000 f8d4 	bl	8005990 <_sbrk_r>
 80057e8:	6030      	str	r0, [r6, #0]
 80057ea:	4621      	mov	r1, r4
 80057ec:	4628      	mov	r0, r5
 80057ee:	f000 f8cf 	bl	8005990 <_sbrk_r>
 80057f2:	1c43      	adds	r3, r0, #1
 80057f4:	d00a      	beq.n	800580c <sbrk_aligned+0x34>
 80057f6:	1cc4      	adds	r4, r0, #3
 80057f8:	f024 0403 	bic.w	r4, r4, #3
 80057fc:	42a0      	cmp	r0, r4
 80057fe:	d007      	beq.n	8005810 <sbrk_aligned+0x38>
 8005800:	1a21      	subs	r1, r4, r0
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f8c4 	bl	8005990 <_sbrk_r>
 8005808:	3001      	adds	r0, #1
 800580a:	d101      	bne.n	8005810 <sbrk_aligned+0x38>
 800580c:	f04f 34ff 	mov.w	r4, #4294967295
 8005810:	4620      	mov	r0, r4
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	20004ac0 	.word	0x20004ac0

08005818 <_malloc_r>:
 8005818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800581c:	1ccd      	adds	r5, r1, #3
 800581e:	f025 0503 	bic.w	r5, r5, #3
 8005822:	3508      	adds	r5, #8
 8005824:	2d0c      	cmp	r5, #12
 8005826:	bf38      	it	cc
 8005828:	250c      	movcc	r5, #12
 800582a:	2d00      	cmp	r5, #0
 800582c:	4607      	mov	r7, r0
 800582e:	db01      	blt.n	8005834 <_malloc_r+0x1c>
 8005830:	42a9      	cmp	r1, r5
 8005832:	d905      	bls.n	8005840 <_malloc_r+0x28>
 8005834:	230c      	movs	r3, #12
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	2600      	movs	r6, #0
 800583a:	4630      	mov	r0, r6
 800583c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005840:	4e2e      	ldr	r6, [pc, #184]	; (80058fc <_malloc_r+0xe4>)
 8005842:	f000 fb15 	bl	8005e70 <__malloc_lock>
 8005846:	6833      	ldr	r3, [r6, #0]
 8005848:	461c      	mov	r4, r3
 800584a:	bb34      	cbnz	r4, 800589a <_malloc_r+0x82>
 800584c:	4629      	mov	r1, r5
 800584e:	4638      	mov	r0, r7
 8005850:	f7ff ffc2 	bl	80057d8 <sbrk_aligned>
 8005854:	1c43      	adds	r3, r0, #1
 8005856:	4604      	mov	r4, r0
 8005858:	d14d      	bne.n	80058f6 <_malloc_r+0xde>
 800585a:	6834      	ldr	r4, [r6, #0]
 800585c:	4626      	mov	r6, r4
 800585e:	2e00      	cmp	r6, #0
 8005860:	d140      	bne.n	80058e4 <_malloc_r+0xcc>
 8005862:	6823      	ldr	r3, [r4, #0]
 8005864:	4631      	mov	r1, r6
 8005866:	4638      	mov	r0, r7
 8005868:	eb04 0803 	add.w	r8, r4, r3
 800586c:	f000 f890 	bl	8005990 <_sbrk_r>
 8005870:	4580      	cmp	r8, r0
 8005872:	d13a      	bne.n	80058ea <_malloc_r+0xd2>
 8005874:	6821      	ldr	r1, [r4, #0]
 8005876:	3503      	adds	r5, #3
 8005878:	1a6d      	subs	r5, r5, r1
 800587a:	f025 0503 	bic.w	r5, r5, #3
 800587e:	3508      	adds	r5, #8
 8005880:	2d0c      	cmp	r5, #12
 8005882:	bf38      	it	cc
 8005884:	250c      	movcc	r5, #12
 8005886:	4629      	mov	r1, r5
 8005888:	4638      	mov	r0, r7
 800588a:	f7ff ffa5 	bl	80057d8 <sbrk_aligned>
 800588e:	3001      	adds	r0, #1
 8005890:	d02b      	beq.n	80058ea <_malloc_r+0xd2>
 8005892:	6823      	ldr	r3, [r4, #0]
 8005894:	442b      	add	r3, r5
 8005896:	6023      	str	r3, [r4, #0]
 8005898:	e00e      	b.n	80058b8 <_malloc_r+0xa0>
 800589a:	6822      	ldr	r2, [r4, #0]
 800589c:	1b52      	subs	r2, r2, r5
 800589e:	d41e      	bmi.n	80058de <_malloc_r+0xc6>
 80058a0:	2a0b      	cmp	r2, #11
 80058a2:	d916      	bls.n	80058d2 <_malloc_r+0xba>
 80058a4:	1961      	adds	r1, r4, r5
 80058a6:	42a3      	cmp	r3, r4
 80058a8:	6025      	str	r5, [r4, #0]
 80058aa:	bf18      	it	ne
 80058ac:	6059      	strne	r1, [r3, #4]
 80058ae:	6863      	ldr	r3, [r4, #4]
 80058b0:	bf08      	it	eq
 80058b2:	6031      	streq	r1, [r6, #0]
 80058b4:	5162      	str	r2, [r4, r5]
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	4638      	mov	r0, r7
 80058ba:	f104 060b 	add.w	r6, r4, #11
 80058be:	f000 fadd 	bl	8005e7c <__malloc_unlock>
 80058c2:	f026 0607 	bic.w	r6, r6, #7
 80058c6:	1d23      	adds	r3, r4, #4
 80058c8:	1af2      	subs	r2, r6, r3
 80058ca:	d0b6      	beq.n	800583a <_malloc_r+0x22>
 80058cc:	1b9b      	subs	r3, r3, r6
 80058ce:	50a3      	str	r3, [r4, r2]
 80058d0:	e7b3      	b.n	800583a <_malloc_r+0x22>
 80058d2:	6862      	ldr	r2, [r4, #4]
 80058d4:	42a3      	cmp	r3, r4
 80058d6:	bf0c      	ite	eq
 80058d8:	6032      	streq	r2, [r6, #0]
 80058da:	605a      	strne	r2, [r3, #4]
 80058dc:	e7ec      	b.n	80058b8 <_malloc_r+0xa0>
 80058de:	4623      	mov	r3, r4
 80058e0:	6864      	ldr	r4, [r4, #4]
 80058e2:	e7b2      	b.n	800584a <_malloc_r+0x32>
 80058e4:	4634      	mov	r4, r6
 80058e6:	6876      	ldr	r6, [r6, #4]
 80058e8:	e7b9      	b.n	800585e <_malloc_r+0x46>
 80058ea:	230c      	movs	r3, #12
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	4638      	mov	r0, r7
 80058f0:	f000 fac4 	bl	8005e7c <__malloc_unlock>
 80058f4:	e7a1      	b.n	800583a <_malloc_r+0x22>
 80058f6:	6025      	str	r5, [r4, #0]
 80058f8:	e7de      	b.n	80058b8 <_malloc_r+0xa0>
 80058fa:	bf00      	nop
 80058fc:	20004abc 	.word	0x20004abc

08005900 <_putc_r>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	460d      	mov	r5, r1
 8005904:	4614      	mov	r4, r2
 8005906:	4606      	mov	r6, r0
 8005908:	b118      	cbz	r0, 8005912 <_putc_r+0x12>
 800590a:	6983      	ldr	r3, [r0, #24]
 800590c:	b90b      	cbnz	r3, 8005912 <_putc_r+0x12>
 800590e:	f7ff fec3 	bl	8005698 <__sinit>
 8005912:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <_putc_r+0x84>)
 8005914:	429c      	cmp	r4, r3
 8005916:	d124      	bne.n	8005962 <_putc_r+0x62>
 8005918:	6874      	ldr	r4, [r6, #4]
 800591a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800591c:	07d8      	lsls	r0, r3, #31
 800591e:	d405      	bmi.n	800592c <_putc_r+0x2c>
 8005920:	89a3      	ldrh	r3, [r4, #12]
 8005922:	0599      	lsls	r1, r3, #22
 8005924:	d402      	bmi.n	800592c <_putc_r+0x2c>
 8005926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005928:	f7ff ff54 	bl	80057d4 <__retarget_lock_acquire_recursive>
 800592c:	68a3      	ldr	r3, [r4, #8]
 800592e:	3b01      	subs	r3, #1
 8005930:	2b00      	cmp	r3, #0
 8005932:	60a3      	str	r3, [r4, #8]
 8005934:	da05      	bge.n	8005942 <_putc_r+0x42>
 8005936:	69a2      	ldr	r2, [r4, #24]
 8005938:	4293      	cmp	r3, r2
 800593a:	db1c      	blt.n	8005976 <_putc_r+0x76>
 800593c:	b2eb      	uxtb	r3, r5
 800593e:	2b0a      	cmp	r3, #10
 8005940:	d019      	beq.n	8005976 <_putc_r+0x76>
 8005942:	6823      	ldr	r3, [r4, #0]
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	6022      	str	r2, [r4, #0]
 8005948:	701d      	strb	r5, [r3, #0]
 800594a:	b2ed      	uxtb	r5, r5
 800594c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800594e:	07da      	lsls	r2, r3, #31
 8005950:	d405      	bmi.n	800595e <_putc_r+0x5e>
 8005952:	89a3      	ldrh	r3, [r4, #12]
 8005954:	059b      	lsls	r3, r3, #22
 8005956:	d402      	bmi.n	800595e <_putc_r+0x5e>
 8005958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800595a:	f7ff ff3c 	bl	80057d6 <__retarget_lock_release_recursive>
 800595e:	4628      	mov	r0, r5
 8005960:	bd70      	pop	{r4, r5, r6, pc}
 8005962:	4b09      	ldr	r3, [pc, #36]	; (8005988 <_putc_r+0x88>)
 8005964:	429c      	cmp	r4, r3
 8005966:	d101      	bne.n	800596c <_putc_r+0x6c>
 8005968:	68b4      	ldr	r4, [r6, #8]
 800596a:	e7d6      	b.n	800591a <_putc_r+0x1a>
 800596c:	4b07      	ldr	r3, [pc, #28]	; (800598c <_putc_r+0x8c>)
 800596e:	429c      	cmp	r4, r3
 8005970:	bf08      	it	eq
 8005972:	68f4      	ldreq	r4, [r6, #12]
 8005974:	e7d1      	b.n	800591a <_putc_r+0x1a>
 8005976:	4629      	mov	r1, r5
 8005978:	4622      	mov	r2, r4
 800597a:	4630      	mov	r0, r6
 800597c:	f000 f85c 	bl	8005a38 <__swbuf_r>
 8005980:	4605      	mov	r5, r0
 8005982:	e7e3      	b.n	800594c <_putc_r+0x4c>
 8005984:	0800613c 	.word	0x0800613c
 8005988:	0800615c 	.word	0x0800615c
 800598c:	0800611c 	.word	0x0800611c

08005990 <_sbrk_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d06      	ldr	r5, [pc, #24]	; (80059ac <_sbrk_r+0x1c>)
 8005994:	2300      	movs	r3, #0
 8005996:	4604      	mov	r4, r0
 8005998:	4608      	mov	r0, r1
 800599a:	602b      	str	r3, [r5, #0]
 800599c:	f7fb f9c4 	bl	8000d28 <_sbrk>
 80059a0:	1c43      	adds	r3, r0, #1
 80059a2:	d102      	bne.n	80059aa <_sbrk_r+0x1a>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	b103      	cbz	r3, 80059aa <_sbrk_r+0x1a>
 80059a8:	6023      	str	r3, [r4, #0]
 80059aa:	bd38      	pop	{r3, r4, r5, pc}
 80059ac:	20004ac4 	.word	0x20004ac4

080059b0 <__sread>:
 80059b0:	b510      	push	{r4, lr}
 80059b2:	460c      	mov	r4, r1
 80059b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b8:	f000 fab2 	bl	8005f20 <_read_r>
 80059bc:	2800      	cmp	r0, #0
 80059be:	bfab      	itete	ge
 80059c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80059c2:	89a3      	ldrhlt	r3, [r4, #12]
 80059c4:	181b      	addge	r3, r3, r0
 80059c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80059ca:	bfac      	ite	ge
 80059cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80059ce:	81a3      	strhlt	r3, [r4, #12]
 80059d0:	bd10      	pop	{r4, pc}

080059d2 <__swrite>:
 80059d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059d6:	461f      	mov	r7, r3
 80059d8:	898b      	ldrh	r3, [r1, #12]
 80059da:	05db      	lsls	r3, r3, #23
 80059dc:	4605      	mov	r5, r0
 80059de:	460c      	mov	r4, r1
 80059e0:	4616      	mov	r6, r2
 80059e2:	d505      	bpl.n	80059f0 <__swrite+0x1e>
 80059e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059e8:	2302      	movs	r3, #2
 80059ea:	2200      	movs	r2, #0
 80059ec:	f000 f9c8 	bl	8005d80 <_lseek_r>
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059fa:	81a3      	strh	r3, [r4, #12]
 80059fc:	4632      	mov	r2, r6
 80059fe:	463b      	mov	r3, r7
 8005a00:	4628      	mov	r0, r5
 8005a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a06:	f000 b869 	b.w	8005adc <_write_r>

08005a0a <__sseek>:
 8005a0a:	b510      	push	{r4, lr}
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a12:	f000 f9b5 	bl	8005d80 <_lseek_r>
 8005a16:	1c43      	adds	r3, r0, #1
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	bf15      	itete	ne
 8005a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005a26:	81a3      	strheq	r3, [r4, #12]
 8005a28:	bf18      	it	ne
 8005a2a:	81a3      	strhne	r3, [r4, #12]
 8005a2c:	bd10      	pop	{r4, pc}

08005a2e <__sclose>:
 8005a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a32:	f000 b8d3 	b.w	8005bdc <_close_r>
	...

08005a38 <__swbuf_r>:
 8005a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a3a:	460e      	mov	r6, r1
 8005a3c:	4614      	mov	r4, r2
 8005a3e:	4605      	mov	r5, r0
 8005a40:	b118      	cbz	r0, 8005a4a <__swbuf_r+0x12>
 8005a42:	6983      	ldr	r3, [r0, #24]
 8005a44:	b90b      	cbnz	r3, 8005a4a <__swbuf_r+0x12>
 8005a46:	f7ff fe27 	bl	8005698 <__sinit>
 8005a4a:	4b21      	ldr	r3, [pc, #132]	; (8005ad0 <__swbuf_r+0x98>)
 8005a4c:	429c      	cmp	r4, r3
 8005a4e:	d12b      	bne.n	8005aa8 <__swbuf_r+0x70>
 8005a50:	686c      	ldr	r4, [r5, #4]
 8005a52:	69a3      	ldr	r3, [r4, #24]
 8005a54:	60a3      	str	r3, [r4, #8]
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	071a      	lsls	r2, r3, #28
 8005a5a:	d52f      	bpl.n	8005abc <__swbuf_r+0x84>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	b36b      	cbz	r3, 8005abc <__swbuf_r+0x84>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	6820      	ldr	r0, [r4, #0]
 8005a64:	1ac0      	subs	r0, r0, r3
 8005a66:	6963      	ldr	r3, [r4, #20]
 8005a68:	b2f6      	uxtb	r6, r6
 8005a6a:	4283      	cmp	r3, r0
 8005a6c:	4637      	mov	r7, r6
 8005a6e:	dc04      	bgt.n	8005a7a <__swbuf_r+0x42>
 8005a70:	4621      	mov	r1, r4
 8005a72:	4628      	mov	r0, r5
 8005a74:	f000 f948 	bl	8005d08 <_fflush_r>
 8005a78:	bb30      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005a7a:	68a3      	ldr	r3, [r4, #8]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	6022      	str	r2, [r4, #0]
 8005a86:	701e      	strb	r6, [r3, #0]
 8005a88:	6963      	ldr	r3, [r4, #20]
 8005a8a:	3001      	adds	r0, #1
 8005a8c:	4283      	cmp	r3, r0
 8005a8e:	d004      	beq.n	8005a9a <__swbuf_r+0x62>
 8005a90:	89a3      	ldrh	r3, [r4, #12]
 8005a92:	07db      	lsls	r3, r3, #31
 8005a94:	d506      	bpl.n	8005aa4 <__swbuf_r+0x6c>
 8005a96:	2e0a      	cmp	r6, #10
 8005a98:	d104      	bne.n	8005aa4 <__swbuf_r+0x6c>
 8005a9a:	4621      	mov	r1, r4
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	f000 f933 	bl	8005d08 <_fflush_r>
 8005aa2:	b988      	cbnz	r0, 8005ac8 <__swbuf_r+0x90>
 8005aa4:	4638      	mov	r0, r7
 8005aa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aa8:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <__swbuf_r+0x9c>)
 8005aaa:	429c      	cmp	r4, r3
 8005aac:	d101      	bne.n	8005ab2 <__swbuf_r+0x7a>
 8005aae:	68ac      	ldr	r4, [r5, #8]
 8005ab0:	e7cf      	b.n	8005a52 <__swbuf_r+0x1a>
 8005ab2:	4b09      	ldr	r3, [pc, #36]	; (8005ad8 <__swbuf_r+0xa0>)
 8005ab4:	429c      	cmp	r4, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	68ec      	ldreq	r4, [r5, #12]
 8005aba:	e7ca      	b.n	8005a52 <__swbuf_r+0x1a>
 8005abc:	4621      	mov	r1, r4
 8005abe:	4628      	mov	r0, r5
 8005ac0:	f000 f81e 	bl	8005b00 <__swsetup_r>
 8005ac4:	2800      	cmp	r0, #0
 8005ac6:	d0cb      	beq.n	8005a60 <__swbuf_r+0x28>
 8005ac8:	f04f 37ff 	mov.w	r7, #4294967295
 8005acc:	e7ea      	b.n	8005aa4 <__swbuf_r+0x6c>
 8005ace:	bf00      	nop
 8005ad0:	0800613c 	.word	0x0800613c
 8005ad4:	0800615c 	.word	0x0800615c
 8005ad8:	0800611c 	.word	0x0800611c

08005adc <_write_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	; (8005afc <_write_r+0x20>)
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	4611      	mov	r1, r2
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	602a      	str	r2, [r5, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f7fa fd04 	bl	80004f8 <_write>
 8005af0:	1c43      	adds	r3, r0, #1
 8005af2:	d102      	bne.n	8005afa <_write_r+0x1e>
 8005af4:	682b      	ldr	r3, [r5, #0]
 8005af6:	b103      	cbz	r3, 8005afa <_write_r+0x1e>
 8005af8:	6023      	str	r3, [r4, #0]
 8005afa:	bd38      	pop	{r3, r4, r5, pc}
 8005afc:	20004ac4 	.word	0x20004ac4

08005b00 <__swsetup_r>:
 8005b00:	4b32      	ldr	r3, [pc, #200]	; (8005bcc <__swsetup_r+0xcc>)
 8005b02:	b570      	push	{r4, r5, r6, lr}
 8005b04:	681d      	ldr	r5, [r3, #0]
 8005b06:	4606      	mov	r6, r0
 8005b08:	460c      	mov	r4, r1
 8005b0a:	b125      	cbz	r5, 8005b16 <__swsetup_r+0x16>
 8005b0c:	69ab      	ldr	r3, [r5, #24]
 8005b0e:	b913      	cbnz	r3, 8005b16 <__swsetup_r+0x16>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f7ff fdc1 	bl	8005698 <__sinit>
 8005b16:	4b2e      	ldr	r3, [pc, #184]	; (8005bd0 <__swsetup_r+0xd0>)
 8005b18:	429c      	cmp	r4, r3
 8005b1a:	d10f      	bne.n	8005b3c <__swsetup_r+0x3c>
 8005b1c:	686c      	ldr	r4, [r5, #4]
 8005b1e:	89a3      	ldrh	r3, [r4, #12]
 8005b20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b24:	0719      	lsls	r1, r3, #28
 8005b26:	d42c      	bmi.n	8005b82 <__swsetup_r+0x82>
 8005b28:	06dd      	lsls	r5, r3, #27
 8005b2a:	d411      	bmi.n	8005b50 <__swsetup_r+0x50>
 8005b2c:	2309      	movs	r3, #9
 8005b2e:	6033      	str	r3, [r6, #0]
 8005b30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b34:	81a3      	strh	r3, [r4, #12]
 8005b36:	f04f 30ff 	mov.w	r0, #4294967295
 8005b3a:	e03e      	b.n	8005bba <__swsetup_r+0xba>
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <__swsetup_r+0xd4>)
 8005b3e:	429c      	cmp	r4, r3
 8005b40:	d101      	bne.n	8005b46 <__swsetup_r+0x46>
 8005b42:	68ac      	ldr	r4, [r5, #8]
 8005b44:	e7eb      	b.n	8005b1e <__swsetup_r+0x1e>
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <__swsetup_r+0xd8>)
 8005b48:	429c      	cmp	r4, r3
 8005b4a:	bf08      	it	eq
 8005b4c:	68ec      	ldreq	r4, [r5, #12]
 8005b4e:	e7e6      	b.n	8005b1e <__swsetup_r+0x1e>
 8005b50:	0758      	lsls	r0, r3, #29
 8005b52:	d512      	bpl.n	8005b7a <__swsetup_r+0x7a>
 8005b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b56:	b141      	cbz	r1, 8005b6a <__swsetup_r+0x6a>
 8005b58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b5c:	4299      	cmp	r1, r3
 8005b5e:	d002      	beq.n	8005b66 <__swsetup_r+0x66>
 8005b60:	4630      	mov	r0, r6
 8005b62:	f000 f991 	bl	8005e88 <_free_r>
 8005b66:	2300      	movs	r3, #0
 8005b68:	6363      	str	r3, [r4, #52]	; 0x34
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b70:	81a3      	strh	r3, [r4, #12]
 8005b72:	2300      	movs	r3, #0
 8005b74:	6063      	str	r3, [r4, #4]
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	89a3      	ldrh	r3, [r4, #12]
 8005b7c:	f043 0308 	orr.w	r3, r3, #8
 8005b80:	81a3      	strh	r3, [r4, #12]
 8005b82:	6923      	ldr	r3, [r4, #16]
 8005b84:	b94b      	cbnz	r3, 8005b9a <__swsetup_r+0x9a>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b90:	d003      	beq.n	8005b9a <__swsetup_r+0x9a>
 8005b92:	4621      	mov	r1, r4
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f92b 	bl	8005df0 <__smakebuf_r>
 8005b9a:	89a0      	ldrh	r0, [r4, #12]
 8005b9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ba0:	f010 0301 	ands.w	r3, r0, #1
 8005ba4:	d00a      	beq.n	8005bbc <__swsetup_r+0xbc>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60a3      	str	r3, [r4, #8]
 8005baa:	6963      	ldr	r3, [r4, #20]
 8005bac:	425b      	negs	r3, r3
 8005bae:	61a3      	str	r3, [r4, #24]
 8005bb0:	6923      	ldr	r3, [r4, #16]
 8005bb2:	b943      	cbnz	r3, 8005bc6 <__swsetup_r+0xc6>
 8005bb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005bb8:	d1ba      	bne.n	8005b30 <__swsetup_r+0x30>
 8005bba:	bd70      	pop	{r4, r5, r6, pc}
 8005bbc:	0781      	lsls	r1, r0, #30
 8005bbe:	bf58      	it	pl
 8005bc0:	6963      	ldrpl	r3, [r4, #20]
 8005bc2:	60a3      	str	r3, [r4, #8]
 8005bc4:	e7f4      	b.n	8005bb0 <__swsetup_r+0xb0>
 8005bc6:	2000      	movs	r0, #0
 8005bc8:	e7f7      	b.n	8005bba <__swsetup_r+0xba>
 8005bca:	bf00      	nop
 8005bcc:	20000078 	.word	0x20000078
 8005bd0:	0800613c 	.word	0x0800613c
 8005bd4:	0800615c 	.word	0x0800615c
 8005bd8:	0800611c 	.word	0x0800611c

08005bdc <_close_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	4d06      	ldr	r5, [pc, #24]	; (8005bf8 <_close_r+0x1c>)
 8005be0:	2300      	movs	r3, #0
 8005be2:	4604      	mov	r4, r0
 8005be4:	4608      	mov	r0, r1
 8005be6:	602b      	str	r3, [r5, #0]
 8005be8:	f7fb f86a 	bl	8000cc0 <_close>
 8005bec:	1c43      	adds	r3, r0, #1
 8005bee:	d102      	bne.n	8005bf6 <_close_r+0x1a>
 8005bf0:	682b      	ldr	r3, [r5, #0]
 8005bf2:	b103      	cbz	r3, 8005bf6 <_close_r+0x1a>
 8005bf4:	6023      	str	r3, [r4, #0]
 8005bf6:	bd38      	pop	{r3, r4, r5, pc}
 8005bf8:	20004ac4 	.word	0x20004ac4

08005bfc <__sflush_r>:
 8005bfc:	898a      	ldrh	r2, [r1, #12]
 8005bfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c02:	4605      	mov	r5, r0
 8005c04:	0710      	lsls	r0, r2, #28
 8005c06:	460c      	mov	r4, r1
 8005c08:	d458      	bmi.n	8005cbc <__sflush_r+0xc0>
 8005c0a:	684b      	ldr	r3, [r1, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	dc05      	bgt.n	8005c1c <__sflush_r+0x20>
 8005c10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dc02      	bgt.n	8005c1c <__sflush_r+0x20>
 8005c16:	2000      	movs	r0, #0
 8005c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c1e:	2e00      	cmp	r6, #0
 8005c20:	d0f9      	beq.n	8005c16 <__sflush_r+0x1a>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005c28:	682f      	ldr	r7, [r5, #0]
 8005c2a:	602b      	str	r3, [r5, #0]
 8005c2c:	d032      	beq.n	8005c94 <__sflush_r+0x98>
 8005c2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	075a      	lsls	r2, r3, #29
 8005c34:	d505      	bpl.n	8005c42 <__sflush_r+0x46>
 8005c36:	6863      	ldr	r3, [r4, #4]
 8005c38:	1ac0      	subs	r0, r0, r3
 8005c3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c3c:	b10b      	cbz	r3, 8005c42 <__sflush_r+0x46>
 8005c3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c40:	1ac0      	subs	r0, r0, r3
 8005c42:	2300      	movs	r3, #0
 8005c44:	4602      	mov	r2, r0
 8005c46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c48:	6a21      	ldr	r1, [r4, #32]
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	47b0      	blx	r6
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	d106      	bne.n	8005c62 <__sflush_r+0x66>
 8005c54:	6829      	ldr	r1, [r5, #0]
 8005c56:	291d      	cmp	r1, #29
 8005c58:	d82c      	bhi.n	8005cb4 <__sflush_r+0xb8>
 8005c5a:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <__sflush_r+0x108>)
 8005c5c:	40ca      	lsrs	r2, r1
 8005c5e:	07d6      	lsls	r6, r2, #31
 8005c60:	d528      	bpl.n	8005cb4 <__sflush_r+0xb8>
 8005c62:	2200      	movs	r2, #0
 8005c64:	6062      	str	r2, [r4, #4]
 8005c66:	04d9      	lsls	r1, r3, #19
 8005c68:	6922      	ldr	r2, [r4, #16]
 8005c6a:	6022      	str	r2, [r4, #0]
 8005c6c:	d504      	bpl.n	8005c78 <__sflush_r+0x7c>
 8005c6e:	1c42      	adds	r2, r0, #1
 8005c70:	d101      	bne.n	8005c76 <__sflush_r+0x7a>
 8005c72:	682b      	ldr	r3, [r5, #0]
 8005c74:	b903      	cbnz	r3, 8005c78 <__sflush_r+0x7c>
 8005c76:	6560      	str	r0, [r4, #84]	; 0x54
 8005c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c7a:	602f      	str	r7, [r5, #0]
 8005c7c:	2900      	cmp	r1, #0
 8005c7e:	d0ca      	beq.n	8005c16 <__sflush_r+0x1a>
 8005c80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c84:	4299      	cmp	r1, r3
 8005c86:	d002      	beq.n	8005c8e <__sflush_r+0x92>
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f8fd 	bl	8005e88 <_free_r>
 8005c8e:	2000      	movs	r0, #0
 8005c90:	6360      	str	r0, [r4, #52]	; 0x34
 8005c92:	e7c1      	b.n	8005c18 <__sflush_r+0x1c>
 8005c94:	6a21      	ldr	r1, [r4, #32]
 8005c96:	2301      	movs	r3, #1
 8005c98:	4628      	mov	r0, r5
 8005c9a:	47b0      	blx	r6
 8005c9c:	1c41      	adds	r1, r0, #1
 8005c9e:	d1c7      	bne.n	8005c30 <__sflush_r+0x34>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0c4      	beq.n	8005c30 <__sflush_r+0x34>
 8005ca6:	2b1d      	cmp	r3, #29
 8005ca8:	d001      	beq.n	8005cae <__sflush_r+0xb2>
 8005caa:	2b16      	cmp	r3, #22
 8005cac:	d101      	bne.n	8005cb2 <__sflush_r+0xb6>
 8005cae:	602f      	str	r7, [r5, #0]
 8005cb0:	e7b1      	b.n	8005c16 <__sflush_r+0x1a>
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	e7ad      	b.n	8005c18 <__sflush_r+0x1c>
 8005cbc:	690f      	ldr	r7, [r1, #16]
 8005cbe:	2f00      	cmp	r7, #0
 8005cc0:	d0a9      	beq.n	8005c16 <__sflush_r+0x1a>
 8005cc2:	0793      	lsls	r3, r2, #30
 8005cc4:	680e      	ldr	r6, [r1, #0]
 8005cc6:	bf08      	it	eq
 8005cc8:	694b      	ldreq	r3, [r1, #20]
 8005cca:	600f      	str	r7, [r1, #0]
 8005ccc:	bf18      	it	ne
 8005cce:	2300      	movne	r3, #0
 8005cd0:	eba6 0807 	sub.w	r8, r6, r7
 8005cd4:	608b      	str	r3, [r1, #8]
 8005cd6:	f1b8 0f00 	cmp.w	r8, #0
 8005cda:	dd9c      	ble.n	8005c16 <__sflush_r+0x1a>
 8005cdc:	6a21      	ldr	r1, [r4, #32]
 8005cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ce0:	4643      	mov	r3, r8
 8005ce2:	463a      	mov	r2, r7
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	47b0      	blx	r6
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	dc06      	bgt.n	8005cfa <__sflush_r+0xfe>
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cf2:	81a3      	strh	r3, [r4, #12]
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	e78e      	b.n	8005c18 <__sflush_r+0x1c>
 8005cfa:	4407      	add	r7, r0
 8005cfc:	eba8 0800 	sub.w	r8, r8, r0
 8005d00:	e7e9      	b.n	8005cd6 <__sflush_r+0xda>
 8005d02:	bf00      	nop
 8005d04:	20400001 	.word	0x20400001

08005d08 <_fflush_r>:
 8005d08:	b538      	push	{r3, r4, r5, lr}
 8005d0a:	690b      	ldr	r3, [r1, #16]
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	b913      	cbnz	r3, 8005d18 <_fflush_r+0x10>
 8005d12:	2500      	movs	r5, #0
 8005d14:	4628      	mov	r0, r5
 8005d16:	bd38      	pop	{r3, r4, r5, pc}
 8005d18:	b118      	cbz	r0, 8005d22 <_fflush_r+0x1a>
 8005d1a:	6983      	ldr	r3, [r0, #24]
 8005d1c:	b90b      	cbnz	r3, 8005d22 <_fflush_r+0x1a>
 8005d1e:	f7ff fcbb 	bl	8005698 <__sinit>
 8005d22:	4b14      	ldr	r3, [pc, #80]	; (8005d74 <_fflush_r+0x6c>)
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d11b      	bne.n	8005d60 <_fflush_r+0x58>
 8005d28:	686c      	ldr	r4, [r5, #4]
 8005d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0ef      	beq.n	8005d12 <_fflush_r+0xa>
 8005d32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d34:	07d0      	lsls	r0, r2, #31
 8005d36:	d404      	bmi.n	8005d42 <_fflush_r+0x3a>
 8005d38:	0599      	lsls	r1, r3, #22
 8005d3a:	d402      	bmi.n	8005d42 <_fflush_r+0x3a>
 8005d3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d3e:	f7ff fd49 	bl	80057d4 <__retarget_lock_acquire_recursive>
 8005d42:	4628      	mov	r0, r5
 8005d44:	4621      	mov	r1, r4
 8005d46:	f7ff ff59 	bl	8005bfc <__sflush_r>
 8005d4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d4c:	07da      	lsls	r2, r3, #31
 8005d4e:	4605      	mov	r5, r0
 8005d50:	d4e0      	bmi.n	8005d14 <_fflush_r+0xc>
 8005d52:	89a3      	ldrh	r3, [r4, #12]
 8005d54:	059b      	lsls	r3, r3, #22
 8005d56:	d4dd      	bmi.n	8005d14 <_fflush_r+0xc>
 8005d58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d5a:	f7ff fd3c 	bl	80057d6 <__retarget_lock_release_recursive>
 8005d5e:	e7d9      	b.n	8005d14 <_fflush_r+0xc>
 8005d60:	4b05      	ldr	r3, [pc, #20]	; (8005d78 <_fflush_r+0x70>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	d101      	bne.n	8005d6a <_fflush_r+0x62>
 8005d66:	68ac      	ldr	r4, [r5, #8]
 8005d68:	e7df      	b.n	8005d2a <_fflush_r+0x22>
 8005d6a:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <_fflush_r+0x74>)
 8005d6c:	429c      	cmp	r4, r3
 8005d6e:	bf08      	it	eq
 8005d70:	68ec      	ldreq	r4, [r5, #12]
 8005d72:	e7da      	b.n	8005d2a <_fflush_r+0x22>
 8005d74:	0800613c 	.word	0x0800613c
 8005d78:	0800615c 	.word	0x0800615c
 8005d7c:	0800611c 	.word	0x0800611c

08005d80 <_lseek_r>:
 8005d80:	b538      	push	{r3, r4, r5, lr}
 8005d82:	4d07      	ldr	r5, [pc, #28]	; (8005da0 <_lseek_r+0x20>)
 8005d84:	4604      	mov	r4, r0
 8005d86:	4608      	mov	r0, r1
 8005d88:	4611      	mov	r1, r2
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	602a      	str	r2, [r5, #0]
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f7fa ffbd 	bl	8000d0e <_lseek>
 8005d94:	1c43      	adds	r3, r0, #1
 8005d96:	d102      	bne.n	8005d9e <_lseek_r+0x1e>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	b103      	cbz	r3, 8005d9e <_lseek_r+0x1e>
 8005d9c:	6023      	str	r3, [r4, #0]
 8005d9e:	bd38      	pop	{r3, r4, r5, pc}
 8005da0:	20004ac4 	.word	0x20004ac4

08005da4 <__swhatbuf_r>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	460e      	mov	r6, r1
 8005da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dac:	2900      	cmp	r1, #0
 8005dae:	b096      	sub	sp, #88	; 0x58
 8005db0:	4614      	mov	r4, r2
 8005db2:	461d      	mov	r5, r3
 8005db4:	da08      	bge.n	8005dc8 <__swhatbuf_r+0x24>
 8005db6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	602a      	str	r2, [r5, #0]
 8005dbe:	061a      	lsls	r2, r3, #24
 8005dc0:	d410      	bmi.n	8005de4 <__swhatbuf_r+0x40>
 8005dc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005dc6:	e00e      	b.n	8005de6 <__swhatbuf_r+0x42>
 8005dc8:	466a      	mov	r2, sp
 8005dca:	f000 f8bb 	bl	8005f44 <_fstat_r>
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	dbf1      	blt.n	8005db6 <__swhatbuf_r+0x12>
 8005dd2:	9a01      	ldr	r2, [sp, #4]
 8005dd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005dd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ddc:	425a      	negs	r2, r3
 8005dde:	415a      	adcs	r2, r3
 8005de0:	602a      	str	r2, [r5, #0]
 8005de2:	e7ee      	b.n	8005dc2 <__swhatbuf_r+0x1e>
 8005de4:	2340      	movs	r3, #64	; 0x40
 8005de6:	2000      	movs	r0, #0
 8005de8:	6023      	str	r3, [r4, #0]
 8005dea:	b016      	add	sp, #88	; 0x58
 8005dec:	bd70      	pop	{r4, r5, r6, pc}
	...

08005df0 <__smakebuf_r>:
 8005df0:	898b      	ldrh	r3, [r1, #12]
 8005df2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005df4:	079d      	lsls	r5, r3, #30
 8005df6:	4606      	mov	r6, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	d507      	bpl.n	8005e0c <__smakebuf_r+0x1c>
 8005dfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e00:	6023      	str	r3, [r4, #0]
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	2301      	movs	r3, #1
 8005e06:	6163      	str	r3, [r4, #20]
 8005e08:	b002      	add	sp, #8
 8005e0a:	bd70      	pop	{r4, r5, r6, pc}
 8005e0c:	ab01      	add	r3, sp, #4
 8005e0e:	466a      	mov	r2, sp
 8005e10:	f7ff ffc8 	bl	8005da4 <__swhatbuf_r>
 8005e14:	9900      	ldr	r1, [sp, #0]
 8005e16:	4605      	mov	r5, r0
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f7ff fcfd 	bl	8005818 <_malloc_r>
 8005e1e:	b948      	cbnz	r0, 8005e34 <__smakebuf_r+0x44>
 8005e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e24:	059a      	lsls	r2, r3, #22
 8005e26:	d4ef      	bmi.n	8005e08 <__smakebuf_r+0x18>
 8005e28:	f023 0303 	bic.w	r3, r3, #3
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	81a3      	strh	r3, [r4, #12]
 8005e32:	e7e3      	b.n	8005dfc <__smakebuf_r+0xc>
 8005e34:	4b0d      	ldr	r3, [pc, #52]	; (8005e6c <__smakebuf_r+0x7c>)
 8005e36:	62b3      	str	r3, [r6, #40]	; 0x28
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	6020      	str	r0, [r4, #0]
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	81a3      	strh	r3, [r4, #12]
 8005e42:	9b00      	ldr	r3, [sp, #0]
 8005e44:	6163      	str	r3, [r4, #20]
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	6120      	str	r0, [r4, #16]
 8005e4a:	b15b      	cbz	r3, 8005e64 <__smakebuf_r+0x74>
 8005e4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e50:	4630      	mov	r0, r6
 8005e52:	f000 f889 	bl	8005f68 <_isatty_r>
 8005e56:	b128      	cbz	r0, 8005e64 <__smakebuf_r+0x74>
 8005e58:	89a3      	ldrh	r3, [r4, #12]
 8005e5a:	f023 0303 	bic.w	r3, r3, #3
 8005e5e:	f043 0301 	orr.w	r3, r3, #1
 8005e62:	81a3      	strh	r3, [r4, #12]
 8005e64:	89a0      	ldrh	r0, [r4, #12]
 8005e66:	4305      	orrs	r5, r0
 8005e68:	81a5      	strh	r5, [r4, #12]
 8005e6a:	e7cd      	b.n	8005e08 <__smakebuf_r+0x18>
 8005e6c:	08005631 	.word	0x08005631

08005e70 <__malloc_lock>:
 8005e70:	4801      	ldr	r0, [pc, #4]	; (8005e78 <__malloc_lock+0x8>)
 8005e72:	f7ff bcaf 	b.w	80057d4 <__retarget_lock_acquire_recursive>
 8005e76:	bf00      	nop
 8005e78:	20004ab8 	.word	0x20004ab8

08005e7c <__malloc_unlock>:
 8005e7c:	4801      	ldr	r0, [pc, #4]	; (8005e84 <__malloc_unlock+0x8>)
 8005e7e:	f7ff bcaa 	b.w	80057d6 <__retarget_lock_release_recursive>
 8005e82:	bf00      	nop
 8005e84:	20004ab8 	.word	0x20004ab8

08005e88 <_free_r>:
 8005e88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005e8a:	2900      	cmp	r1, #0
 8005e8c:	d044      	beq.n	8005f18 <_free_r+0x90>
 8005e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e92:	9001      	str	r0, [sp, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f1a1 0404 	sub.w	r4, r1, #4
 8005e9a:	bfb8      	it	lt
 8005e9c:	18e4      	addlt	r4, r4, r3
 8005e9e:	f7ff ffe7 	bl	8005e70 <__malloc_lock>
 8005ea2:	4a1e      	ldr	r2, [pc, #120]	; (8005f1c <_free_r+0x94>)
 8005ea4:	9801      	ldr	r0, [sp, #4]
 8005ea6:	6813      	ldr	r3, [r2, #0]
 8005ea8:	b933      	cbnz	r3, 8005eb8 <_free_r+0x30>
 8005eaa:	6063      	str	r3, [r4, #4]
 8005eac:	6014      	str	r4, [r2, #0]
 8005eae:	b003      	add	sp, #12
 8005eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005eb4:	f7ff bfe2 	b.w	8005e7c <__malloc_unlock>
 8005eb8:	42a3      	cmp	r3, r4
 8005eba:	d908      	bls.n	8005ece <_free_r+0x46>
 8005ebc:	6825      	ldr	r5, [r4, #0]
 8005ebe:	1961      	adds	r1, r4, r5
 8005ec0:	428b      	cmp	r3, r1
 8005ec2:	bf01      	itttt	eq
 8005ec4:	6819      	ldreq	r1, [r3, #0]
 8005ec6:	685b      	ldreq	r3, [r3, #4]
 8005ec8:	1949      	addeq	r1, r1, r5
 8005eca:	6021      	streq	r1, [r4, #0]
 8005ecc:	e7ed      	b.n	8005eaa <_free_r+0x22>
 8005ece:	461a      	mov	r2, r3
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	b10b      	cbz	r3, 8005ed8 <_free_r+0x50>
 8005ed4:	42a3      	cmp	r3, r4
 8005ed6:	d9fa      	bls.n	8005ece <_free_r+0x46>
 8005ed8:	6811      	ldr	r1, [r2, #0]
 8005eda:	1855      	adds	r5, r2, r1
 8005edc:	42a5      	cmp	r5, r4
 8005ede:	d10b      	bne.n	8005ef8 <_free_r+0x70>
 8005ee0:	6824      	ldr	r4, [r4, #0]
 8005ee2:	4421      	add	r1, r4
 8005ee4:	1854      	adds	r4, r2, r1
 8005ee6:	42a3      	cmp	r3, r4
 8005ee8:	6011      	str	r1, [r2, #0]
 8005eea:	d1e0      	bne.n	8005eae <_free_r+0x26>
 8005eec:	681c      	ldr	r4, [r3, #0]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	6053      	str	r3, [r2, #4]
 8005ef2:	4421      	add	r1, r4
 8005ef4:	6011      	str	r1, [r2, #0]
 8005ef6:	e7da      	b.n	8005eae <_free_r+0x26>
 8005ef8:	d902      	bls.n	8005f00 <_free_r+0x78>
 8005efa:	230c      	movs	r3, #12
 8005efc:	6003      	str	r3, [r0, #0]
 8005efe:	e7d6      	b.n	8005eae <_free_r+0x26>
 8005f00:	6825      	ldr	r5, [r4, #0]
 8005f02:	1961      	adds	r1, r4, r5
 8005f04:	428b      	cmp	r3, r1
 8005f06:	bf04      	itt	eq
 8005f08:	6819      	ldreq	r1, [r3, #0]
 8005f0a:	685b      	ldreq	r3, [r3, #4]
 8005f0c:	6063      	str	r3, [r4, #4]
 8005f0e:	bf04      	itt	eq
 8005f10:	1949      	addeq	r1, r1, r5
 8005f12:	6021      	streq	r1, [r4, #0]
 8005f14:	6054      	str	r4, [r2, #4]
 8005f16:	e7ca      	b.n	8005eae <_free_r+0x26>
 8005f18:	b003      	add	sp, #12
 8005f1a:	bd30      	pop	{r4, r5, pc}
 8005f1c:	20004abc 	.word	0x20004abc

08005f20 <_read_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d07      	ldr	r5, [pc, #28]	; (8005f40 <_read_r+0x20>)
 8005f24:	4604      	mov	r4, r0
 8005f26:	4608      	mov	r0, r1
 8005f28:	4611      	mov	r1, r2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f7fa fea9 	bl	8000c86 <_read>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_read_r+0x1e>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_read_r+0x1e>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20004ac4 	.word	0x20004ac4

08005f44 <_fstat_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d07      	ldr	r5, [pc, #28]	; (8005f64 <_fstat_r+0x20>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	4611      	mov	r1, r2
 8005f50:	602b      	str	r3, [r5, #0]
 8005f52:	f7fa fec1 	bl	8000cd8 <_fstat>
 8005f56:	1c43      	adds	r3, r0, #1
 8005f58:	d102      	bne.n	8005f60 <_fstat_r+0x1c>
 8005f5a:	682b      	ldr	r3, [r5, #0]
 8005f5c:	b103      	cbz	r3, 8005f60 <_fstat_r+0x1c>
 8005f5e:	6023      	str	r3, [r4, #0]
 8005f60:	bd38      	pop	{r3, r4, r5, pc}
 8005f62:	bf00      	nop
 8005f64:	20004ac4 	.word	0x20004ac4

08005f68 <_isatty_r>:
 8005f68:	b538      	push	{r3, r4, r5, lr}
 8005f6a:	4d06      	ldr	r5, [pc, #24]	; (8005f84 <_isatty_r+0x1c>)
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4604      	mov	r4, r0
 8005f70:	4608      	mov	r0, r1
 8005f72:	602b      	str	r3, [r5, #0]
 8005f74:	f7fa fec0 	bl	8000cf8 <_isatty>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_isatty_r+0x1a>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_isatty_r+0x1a>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20004ac4 	.word	0x20004ac4

08005f88 <_init>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr

08005f94 <_fini>:
 8005f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f96:	bf00      	nop
 8005f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f9a:	bc08      	pop	{r3}
 8005f9c:	469e      	mov	lr, r3
 8005f9e:	4770      	bx	lr
